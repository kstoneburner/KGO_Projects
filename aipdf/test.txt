b'FACILITY CONTROL SYSTEM\nCustomPanel Development Guide\nOGLML and ogScript\nVersion 9.5Thank You for Choosing Ross\nYou\'ve made a great choice. We expect you will be very happy with your purchase of Ross Technology.\nOur mission is to:\n1. Provide a Superior Customer Experience\n\xe2\x80\xa2 offer the best product quality and support\n2. Make Cool Practical Technology\n\xe2\x80\xa2 develop great products that customers love\nRoss has become well known for the Ross Video Code of Ethics. It guides our interactions and empowers\nour employees. I hope you enjoy reading it below.\nIf anything at all with your Ross experience does not live up to your expectations be sure to reach out to\nus at solutions@rossvideo.com.\nDavid Ross CEO, Ross Video\ndross@rossvideo.com\nRoss Video Code of Ethics\nAny company is the sum total of the people that make things happen. At Ross, our employees are a\nspecial group. Our employees truly care about doing a great job and delivering a high quality customer\nexperience every day. This code of ethics hangs on the wall of all Ross Video locations to guide our\nbehavior:\n1. We will always act in our customers\xe2\x80\x99 best interest.\n2. We will do our best to understand our customers\xe2\x80\x99 requirements.\n3. We will not ship crap.\n4. We will be great to work with.\n5. We will do something extra for our customers, as an apology, when something big goes wrong and\nit\'s our fault.\n6. We will keep our promises.\n7. We will treat the competition with respect.\n8. We will cooperate with and help other friendly companies.\n9. We will go above and beyond in times of crisis. If there\'s no one to authorize the required action in\ntimes of company or customer crisis - do what you know in your heart is right. (You may rent\nhelicopters if necessary.)\nii \xe2\x80\xa2 Thank You for Choosing Ross DashBoard CustomPanel Development GuideDashBoard CustomPanel Development Guide\n\xe2\x80\xa2 Ross Part Number: 8351DR-007-9.5\n\xe2\x80\xa2 Release Date: November 03, 2022\nCopyright\n\xc2\xa9 2022 Ross Video Limited. Ross\xc2\xae, openGear\xc2\xae, and any related marks are trademarks or registered trademarks of Ross\nVideo Ltd. All other trademarks are the property of their respective companies. PATENTS ISSUED and PENDING. All\nrights reserved. No part of this publication may be reproduced, stored in a retrieval system, or transmitted in any form or\nby any means, mechanical, photocopying, recording or otherwise, without the prior written permission of Ross Video.\nWhile every precaution has been taken in the preparation of this document, Ross Video assumes no responsibility for\nerrors or omissions. Neither is any liability assumed for damages resulting from the use of the information contained\nherein.\nPatents\nPatent numbers US 7,034,886; US 7,508,455; US 7,602,446; US 7,802,802 B2; US 7,834,886; US 7,914,332; US\n8,307,284; US 8,407,374 B2; US 8,499,019 B2; US 8,519,949 B2; US 8,743,292 B2; GB 2,419,119 B; GB 2,447,380 B;\nand other patents pending.\nDashBoard CustomPanel Development Guide Thank You for Choosing Ross \xe2\x80\xa2 iiiCompany Address\nRoss Video Limited Ross Video Incorporated\n8 John Street P.O. Box 880\nIroquois, Ontario, K0E 1K0 Ogdensburg, New York\nCanada USA 13669-0880\nGeneral Business Office: (+1) 613 \xe2\x80\xa2 652 \xe2\x80\xa2 4886\nFax: (+1) 613 \xe2\x80\xa2 652 \xe2\x80\xa2 4425\nTechnical Support: (+1) 613 \xe2\x80\xa2 652 \xe2\x80\xa2 4886\nAfter Hours Emergency: (+1) 613 \xe2\x80\xa2 349 \xe2\x80\xa2 0006\nE-mail (Technical Support): techsupport@rossvideo.com\nE-mail (General Information): solutions@rossvideo.com\nWebsite: http://www.rossvideo.com\niv \xe2\x80\xa2 Thank You for Choosing Ross DashBoard CustomPanel Development GuideContents\nIntroduction 11\nAbout this Guide ...................................................................................................................... 11\nCustomPanel Overview ............................................................................................................ 11\nPanelBuilder .............................................................................................................. 11\nCustomPanel Framework ........................................................................................... 12\nGetting Started ......................................................................................................................... 15\nBuilding a CustomPanel Application ......................................................................... 15\nDashBoard Data Model 16\nIn This Section .......................................................................................................................... 16\nDevice Data Model .................................................................................................................. 16\nData Object Hierarchy ............................................................................................... 16\nDevice / Card ............................................................................................................. 17\nParameters .................................................................................................................. 18\nConstraints ................................................................................................................. 20\nParameter Structure Objects ...................................................................................... 22\nParameter References ................................................................................................ 22\nMenus ........................................................................................................................ 22\nCustomizing Menus Using Display Hints ................................................................................ 24\nUniversal Hints .......................................................................................................... 24\nSeparators, Titles and Layout Hints ........................................................................... 24\nArray Layout Hints .................................................................................................... 26\nINT16/INT32 Parameters with Choice Constraints ................................................... 28\nHints for Numeric Parameters with Other Constraints .............................................. 34\nHints for String Parameters ........................................................................................ 44\nHints for STRUCT Types .......................................................................................... 48\nData Types ............................................................................................................................... 50\nEndianness ................................................................................................................. 50\nNumber Encoding ...................................................................................................... 50\nString Encoding ......................................................................................................... 51\nExternal Data Objects .............................................................................................................. 51\nConstraint ................................................................................................................... 51\nArbitrary File ............................................................................................................. 51\nImage ......................................................................................................................... 52\nOGLML Descriptor or Index XML ........................................................................... 52\nOGLML Documents ................................................................................................................ 52\nContainers .................................................................................................................. 52\nContexts ..................................................................................................................... 52\nOGLML Document Structure .................................................................................... 52\nOGLML URLs ........................................................................................................... 53\nOGLML Descriptor Format ....................................................................................... 54\nCustom Widgets ....................................................................................................................... 55\nCreating Widgets ....................................................................................................... 55\nWidget Samples ......................................................................................................... 58\nDescriptor Location ................................................................................................... 64\nParameter Mapping .................................................................................................... 65\nUsing DashBoard Prebuilt Custom Widgets .............................................................. 65\nCustom APIs Within CustomPanels ........................................................................................ 76\nLexical Order and Loading Order .............................................................................. 76\nEnabling Reuse by Keeping APIs in Separate Files .................................................. 82\nDashBoard CustomPanel Development Guide Contents \xe2\x80\xa2 vManaging Scope ........................................................................................................ 84\nOGLML Reference 86\nIn This Section ......................................................................................................................... 86\nGeneral Attributes .................................................................................................................... 86\nUsing OGP Devices that Support Subscriptions Protocol ......................................... 89\nsubscriptions .............................................................................................................. 89\nExamples.................................................................................................................... 92\nopenGear Style Hints ............................................................................................................... 93\nStyle Hint Reference .................................................................................................. 93\nstyle Style Hint .......................................................................................................... 94\nComponent Color ....................................................................................................... 95\nPredefined Colors ...................................................................................................... 96\nBorder Styles ............................................................................................................. 98\nText/Font Styles ......................................................................................................... 98\nIcon Styles ................................................................................................................. 99\nTooltip Style ............................................................................................................ 100\nInset Style ................................................................................................................ 100\nBackground Styles ................................................................................................... 101\nButton Style Modifiers ............................................................................................. 101\nLayout/Container Tags ........................................................................................................... 102\nabs ............................................................................................................................ 103\nborderlayout ............................................................................................................. 105\nflow .......................................................................................................................... 108\npopup ....................................................................................................................... 109\npager ........................................................................................................................ 110\nsimplegrid ................................................................................................................ 112\nsplit .......................................................................................................................... 112\ntab ............................................................................................................................ 115\ntable ......................................................................................................................... 116\nTop Level Attributes .............................................................................................................. 120\neditlock .................................................................................................................... 120\nencrypt ..................................................................................................................... 121\ngridsize ..................................................................................................................... 121\nkeepalive .................................................................................................................. 122\nWidget Tags ........................................................................................................................... 122\ndrawer ...................................................................................................................... 123\nwizard ...................................................................................................................... 124\nreveal ....................................................................................................................... 124\next ............................................................................................................................ 125\nexit ........................................................................................................................... 126\nhelp .......................................................................................................................... 127\nimage ....................................................................................................................... 128\nlabel ......................................................................................................................... 129\nbutton ....................................................................................................................... 130\nbrowser .................................................................................................................... 130\nblank ........................................................................................................................ 131\nlock .......................................................................................................................... 132\nmemory .................................................................................................................... 132\nwidget ...................................................................................................................... 133\nNon-UI Tags .......................................................................................................................... 135\napi ............................................................................................................................ 136\ncontext (device context) ........................................................................................... 136\nsubscription .............................................................................................................. 137\nmeta ......................................................................................................................... 138\nwidgets ..................................................................................................................... 139\nvi \xe2\x80\xa2 Contents DashBoard CustomPanel Development Guidewidgetdescriptor ...................................................................................................... 139\nlookup ...................................................................................................................... 141\nstyle .......................................................................................................................... 143\ncolor ......................................................................................................................... 143\nogscript .................................................................................................................... 144\nconstraint.................................................................................................................. 147\nparams ...................................................................................................................... 155\ntimer ......................................................................................................................... 156\nlistener ..................................................................................................................... 157\ntask ........................................................................................................................... 158\ntimertask .................................................................................................................. 159\ninclude ..................................................................................................................... 160\nDevice Resource Declarations ............................................................................................... 160\nResource XML File ................................................................................................. 160\nconfig ....................................................................................................................... 164\nconstraint.................................................................................................................. 166\ncard .......................................................................................................................... 167\nframe ........................................................................................................................ 168\nmenu ........................................................................................................................ 168\nmenugroup ............................................................................................................... 169\nstatusmenu ............................................................................................................... 170\nconfigmenu .............................................................................................................. 171\nparams ...................................................................................................................... 172\nparam ....................................................................................................................... 172\nparam (struct) ........................................................................................................... 174\nDevice Resource Tags ............................................................................................................ 176\nmenugroup ............................................................................................................... 177\nmenu ........................................................................................................................ 177\nparam ....................................................................................................................... 178\nconstraint.................................................................................................................. 180\nbuttonbar .................................................................................................................. 180\neditor ........................................................................................................................ 181\nsummary .................................................................................................................. 182\nstatuscombo ............................................................................................................. 182\nMacro Expansion ................................................................................................................... 184\n%frame% ................................................................................................................. 185\n%device% ................................................................................................................ 185\n%slot% ..................................................................................................................... 185\n%value% .................................................................................................................. 186\n%widget% ................................................................................................................ 187\n%const% .................................................................................................................. 187\n%baseoid% .............................................................................................................. 188\n%fully-qualified-id% ............................................................................................... 188\n%panel-path% .......................................................................................................... 188\n%app-path% ............................................................................................................. 189\n%id% ....................................................................................................................... 189\n%eval[ogscript]%..................................................................................................... 189\nogScript Reference 191\nAbout ogScript ....................................................................................................................... 191\nJavaScript ................................................................................................................. 191\nCommonly Used Functions ...................................................................................... 192\nFunctions Set in the User Interface ........................................................................... 192\nmultiSetScriptable Object ........................................................................................ 192\nnkScript Object ........................................................................................................ 192\ncreateFileInput ......................................................................................................... 201\nDashBoard CustomPanel Development Guide Contents \xe2\x80\xa2 viicreateListener ........................................................................................................... 201\ncreateVDCPSender .................................................................................................. 202\nftp ............................................................................................................................. 203\nftpGet ....................................................................................................................... 203\nftpListFiles ............................................................................................................... 204\ngetApplicationPath ................................................................................................... 205\ngetAsyncExecById .................................................................................................. 205\ngetBrowserById ....................................................................................................... 206\ngetContextId ............................................................................................................ 206\ngetFile ...................................................................................................................... 207\ngetFileSize ............................................................................................................... 207\ngetImageById .......................................................................................................... 208\ngetPanelPath ............................................................................................................ 208\ngetPanelRelativeURL .............................................................................................. 208\nhslToColorString ..................................................................................................... 209\nhttp ........................................................................................................................... 209\ninstallTimer .............................................................................................................. 210\nisClosed ................................................................................................................... 211\njsonToString ............................................................................................................ 211\npasteText .................................................................................................................. 212\naddRemoteTrigger ................................................................................................... 212\nogscript Object ....................................................................................................................... 213\naddOnClose .............................................................................................................. 218\naddRemoteTrigger ................................................................................................... 218\nappendXML ............................................................................................................. 218\nasyncExec ................................................................................................................ 219\nasyncFTP ................................................................................................................. 222\nasyncFTPGet ............................................................................................................ 224\nasyncPost ................................................................................................................. 225\ncancelTimer ............................................................................................................. 225\ncopyByteArray ......................................................................................................... 226\ncreateByteArray ....................................................................................................... 226\ncreateFileInput ......................................................................................................... 227\ncreateFileOutput ...................................................................................................... 227\ncreateMessageBuilder .............................................................................................. 228\ncreateMessageParser ................................................................................................ 228\ndebug ....................................................................................................................... 229\nfireGPI ..................................................................................................................... 229\ngetAllById ............................................................................................................... 230\ngetAttribute .............................................................................................................. 230\ngetBuild ................................................................................................................... 231\ngetComponentsById ................................................................................................ 231\ngetCurrentUser ......................................................................................................... 231\ngetIncludeById ........................................................................................................ 232\ngetListenerById ....................................................................................................... 232\ngetModificationDate ................................................................................................ 233\ngetObject .................................................................................................................. 233\ngetPosition ............................................................................................................... 234\ngetPrivateString ....................................................................................................... 235\ngetScopedAttribute .................................................................................................. 236\ngetSize ..................................................................................................................... 236\ngetString ................................................................................................................... 237\ngetTimerManager..................................................................................................... 238\nhide .......................................................................................................................... 241\ninstallTimer .............................................................................................................. 242\nisTimerRunning ....................................................................................................... 243\nparseXML ................................................................................................................ 243\nviii \xe2\x80\xa2 Contents DashBoard CustomPanel Development GuideputObject.................................................................................................................. 244\nputPrivateString ....................................................................................................... 245\nputString .................................................................................................................. 246\nreload ....................................................................................................................... 246\nrename ..................................................................................................................... 247\nreposition ................................................................................................................. 248\nrepositionByPercent ................................................................................................. 248\nreveal ....................................................................................................................... 249\nrunXPath .................................................................................................................. 250\nsaveToFile................................................................................................................ 250\nsendUDPAsBytes .................................................................................................... 251\nsendUDPBytes ......................................................................................................... 251\nsendUDPString ........................................................................................................ 252\nsetAnchorPoints ....................................................................................................... 252\nsetSize ...................................................................................................................... 253\nsetStyle ..................................................................................................................... 253\nsetXML .................................................................................................................... 254\ntoBottom .................................................................................................................. 257\ntoTop ........................................................................................................................ 257\nupload ...................................................................................................................... 258\nparams Object ........................................................................................................................ 259\nparams Functions ...................................................................................................... 259\ncreateCopy ............................................................................................................... 261\ncreateIntChoiceConstraint........................................................................................ 261\ncreateLinkedCopy .................................................................................................... 262\ncreateMultiSet .......................................................................................................... 262\ncreateParam .............................................................................................................. 263\ndeleteParam .............................................................................................................. 264\ngetAllValues ............................................................................................................ 264\ngetConstraint ............................................................................................................ 264\ngetDeviceStatus ....................................................................................................... 265\ngetElementCount ..................................................................................................... 265\ngetIdentifiedConstraint ............................................................................................ 265\ngetParam .................................................................................................................. 266\ngetParam (OID, Index).remove ................................................................................ 266\ngetStream ................................................................................................................. 267\ngetValue ................................................................................................................... 267\ngetValueAsString ..................................................................................................... 267\nisDeviceOnline ........................................................................................................ 268\nisPrivateParamContext ............................................................................................. 268\nreplaceConstraint ..................................................................................................... 269\nreplaceViewConstraint ............................................................................................. 269\nresetAllValues .......................................................................................................... 269\nsetAccess.................................................................................................................. 270\nsetAllValues ............................................................................................................. 270\nsetMenuState ............................................................................................................ 271\nsetPrivateParamContext ........................................................................................... 271\nsetStream.................................................................................................................. 272\nsetValue ................................................................................................................... 272\nsetValueRelative ...................................................................................................... 273\nsubscribe .................................................................................................................. 273\nunsubscribe .............................................................................................................. 274\ntoOid ........................................................................................................................ 275\nParamScriptable Object .......................................................................................................... 277\nrosstalk Object ........................................................................................................................ 278\nrosstalkex Object .................................................................................................................... 280\nrobot Object ............................................................................................................................ 281\nDashBoard CustomPanel Development Guide Contents \xe2\x80\xa2 ixvdcp Object ............................................................................................................................ 281\nnkScript Object ...................................................................................................................... 282\nAppendices 286\nAppendix A: Widget Hint Definitions ................................................................................ 286\nAppendix B: Reserved Object IDs ...................................................................................... 288\nReserved OIDs ......................................................................................................... 288\nReserved MFC and DashBoard Connect (slot 0) OIDs ........................................... 291\nx \xe2\x80\xa2 Contents DashBoard CustomPanel Development GuideIntroduction\nAbout this Guide\nThe CustomPanel Development Guide is part of the DashBoard Help Guide series. These guides\naim to help you get the most out of your DashBoard control management system.\nDashBoard Help Guides include the following:\n\xe2\x80\xa2 DashBoard User Guide / Help \xe2\x80\x93 The complete reference guide for DashBoard.\n\xe2\x80\xa2 DashBoard CustomPanel Development Guide (this guide) \xe2\x80\x93 Learn how to develop custom\npanel applications within DashBoard.\n\xe2\x80\xa2 DashBoard Server and User Rights and Management User Manual- Provides general\ninformation on the DashBoard server, user rights, functions, and possible applications.\n\xe2\x80\xa2 NK Plugin Guide \xe2\x80\x93 Learn about NK plugins.\nThis guide describes the tools available for developing CustomPanel applications within\nDashBoard.\nThe following sections are included:\n\xe2\x80\xa2 DashBoard Data Model \xe2\x80\x93 An overview of how data and UI elements are stored in DashBoard.\n\xe2\x80\xa2 OGLML Reference \xe2\x80\x93 Describes OpenGear Layout Markup Language, which is an XML\nspecification for describing how UI elements are presented within the DashBoard client.\n\xe2\x80\xa2 ogScript Reference \xe2\x80\x93 Describes how to use ogScript, a JavaScript-based scripting language, to\ndefine advanced behavior of CustomPanel applications.\nCustomPanel Overview\nCustomPanels are applications which run within the DashBoard client. These may be served up by\na device directly, or created by a user using DashBoard\xe2\x80\x99s PanelBuilder feature, by writing XML\ncode, or a combination of both. CustomPanels may integrate control of multiple connected devices\nto provide complete solutions to many workflow problems.\nPanelBuilder\nPanelBuilder is a DashBoard tool for creating custom interfaces for products from Ross Video and\npartner companies, such as openGear cards, DashBoard Connect devices, CamBot robotic camera\nsystems, XPression graphics systems, Ultritouch, and Carbonite and Vision Production Switchers.\nPanelBuilder allows users to create custom control interfaces with any combination of openGear\ncontrol and monitoring parameters from any combination of openGear cards and DashBoard\nConnect devices. Users can build graphical navigation layouts based on signal flow or equipment\nDashBoard CustomPanel Development Guide Introduction \xe2\x80\xa2 11location for efficient device and signal monitoring. Custom control panel layouts can provide user,\nor function specific control windows for specific events or situations that require quick access to\nvarious parameters from multiple devices.\nBenefits:\n\xe2\x80\xa2 Create custom control panels. By eliminating unused controls, the operator can work with an\nuncluttered, efficient GUI that\'s perfect for the task at hand.\n\xe2\x80\xa2 Group various controls together from multiple products. Focus on the production, not how it\'s\nbeing produced.\n\xe2\x80\xa2 Create graphical navigation layouts. Present an overview of your facility with simple status\nindicators that can be drilled into to get to the details.\nWith CustomPanels, you can:\n\xe2\x80\xa2 Allow your operators to focus on the production, and not on the equipment being used. This is\nespecially useful when operators are experts in what the production needs to be, but not how\nit\'s made such as in a House of Worship, School, or Corporate setting.\n\xe2\x80\xa2 Support a new workflow using existing equipment. For example, you can select, preview, and\ndisplay static graphics using a Ross Video Master Control MC1-MK.\n\xe2\x80\xa2 Create a Network Operations Center view of geographically dispersed production equipment,\nwith system health status aggregating up through each level so that you can quickly drill down\nto where the trouble is when faults occur.\n\xe2\x80\xa2 Integrate control of multiple devices into a single, logically laid out control surface. For\nexample, you can trigger graphics, video servers, and transitions from the same interface.\n\xe2\x80\xa2 Control other vendors\' equipment. With over 50 openGear and DashBoard Connect partners,\nit\'s quite likely that the equipment you want to control already understands DashBoard.\nOtherwise, advanced users can take advantage of PanelBuilder\'s rich and powerful scripting\nsupport to communicate with third-party equipment using UDP.\nCustomPanel Framework\nApplications built in DashBoard\xe2\x80\x99s PanelBuilder are referred to as CustomPanels. Application\ndevelopment in DashBoard employs a number of complementary technologies to provide user\ninterface applications. These include:\n\xe2\x80\xa2 openGear Protocol (OGP)\n\xe2\x80\xa2 Resource XML files\n\xe2\x80\xa2 openGear Layout Markup Language (OGLML)\n\xe2\x80\xa2 ogScript\n\xe2\x80\xa2 Other control protocols (such as VDCP, RossTalk, etc.)\nThe openGear ecosystem, in general, consists of Devices (such as openGear Cards, or stand-alone\nproducts) and the DashBoard client. Devices communicate via network connection, and in the case\nof openGear cards, through a CANBus interface.\n12 \xe2\x80\xa2 Introduction DashBoard CustomPanel Development Guideparams\nmenus\nexternal objects\nogp\ndevice json\ncard\ncard\ncard\nCANBus\nFigure 1 \xe2\x80\x93 DashBoard Application Framework\nDashBoard Panel applications consist of a number of elements that the designer uses to create an\napplication. These are:\n\xe2\x80\xa2 Data sources\n\xe2\x80\xa2 Internal data store\n\xe2\x80\xa2 Application\n\xe2\x80\xa2 Client Interface\nData Sources\nData may be sourced from several sources. These include:\n\xe2\x80\xa2 Physical devices connected via ogp\n\xe2\x80\xa2 XML files (.xml or .ogd)\n\xe2\x80\xa2 OGLML document with embedded parameter XML data\n\xe2\x80\xa2 Other external data sources\nDashBoard manages synchronization between XML sources and, via OGP, physical devices. The\ndata is stored in DashBoard\xe2\x80\x99s internal data store. The details of OGP and JSON protocols are\navailable to registered openGear partners, and are detailed in openGear Development Guide Part\nII - Software (8200DR-06).\nExternal data sources, not connected via OGP or a DashBoard xml file, must be managed by the\nuser application via ogScript.\nDashBoard allows for multiple data sources to be connected to any application. This allows for\nmultiple devices in addition to local parameters and resources to be incorporated into a\nCustomPanel application.\nDatastore\nDashBoard maintains an internal data store of information. Using OGP or JSON protocol,\nDashBoard retrieves information about the descriptor and value of parameters, menus, and\nexternal objects. Any changes to the Data store from the client or application is transmitted back to\nthe device. Any changes to the Data store from the device are propagated to the Client. Code may\nDashBoard CustomPanel Development Guide Introduction \xe2\x80\xa2 13\npgo\ndata source data store application client interface\n..\no\nx gm dl filex am ccl\ness\nop Pe ln uG gie na r\noglml\nTCP/IP\nogScript api\nogScript\nExternal data source non-ogp devicebe triggered when a parameter changes based upon an ogScript event registered against\nonchange\nthe parameter.\nApplication\nThe application can be implemented using a variety of tools, depending upon the particular\nrequirements. The application uses the data store to access device information. The following tools\nare available for developing applications:\n\xe2\x80\xa2 openGear plug-in: The basic plug-in automatically generates a user interface based upon the\nparameters and menus defined in the data store. The plug-in also supports OGP messaging to\nallow other basic device control.\n\xe2\x80\xa2 OGLML: OGLML is a markup language that may be used to create CustomPanel control\nlayouts within DashBoard, beyond the default control layout provided by the openGear plug-\nin. Applications built in OGLML may include customization of location, size, and appearance\nof controls. The controls in an OGLML application manipulate parameters stored in the data\nstore.\n\xe2\x80\xa2 ogScript: ogScript provides a JavaScript engine to extend the capability of OGLML-based\napplications. ogScript may also be used to access external data sources (either file or network-\nbased) as well as provide for custom interface to non-OGP devices.\nClient Interface\nThe application is presented within the DashBoard client. DashBoard provides services to display\nthe application, interface with devices, and maintain the data store. DashBoard also provides\nmechanisms for device discovery, logging, and alarms, and features an interactive GUI named\nPanelBuilder for the creation of CustomPanel applications.\nopenGear Protocol\nopenGear Protocol (OGP) is a basic communication protocol between DashBoard and devices. It\nprovides a mechanism to communicate the basic Data Model, manage parameter changes and\ndescribe a basic user interface. With OGP, devices can present a rich user interface using a\nstandardized layout.\nThere are several variants of OGP, the details of which are described in in openGear Development\nGuide Part II - Software (8200DR-06), available to registered openGear partners. The knowledge\nof the details of the protocol mechanics is not required to develop applications within DashBoard;\nOGP is simply a mechanism which communicates the Data Model between devices and\nDashBoard.\nResource XML File\nThe structure of a device\xe2\x80\x99s parameters and menus may be expressed in XML format. This file can\nbe generated in DashBoard from an existing device by right-clicking the device and selecting\n\xe2\x80\x9cSave Configuration to file\xe2\x80\x9d. This will generate a \xe2\x80\x9c \xe2\x80\x9d file containing the XML representation\n.ogd\nof the device.\nA resource XML file is also generated by PanelBuilder, if \xe2\x80\x9cExternal Data Source Panel File\xe2\x80\x9d is\nselected when creating the CustomPanel. This file will be given the extension .\n.xml\nIt is also possible to declare resources directly within an OGLML document using the Resource\nXML syntax.\nopenGear Layout Markup Language (OGLML)\nOGLML is an XML layout language which augments OGP by providing a set of tools to\ncustomize the layout and behaviour of a user interface presented in DashBoard. An OGLML\ndocument also allows controls from multiple devices to be combined into a single user interface,\n14 \xe2\x80\xa2 Introduction DashBoard CustomPanel Development Guidecalled CustomPanels. CustomPanels may be designed interactively using DashBoard\xe2\x80\x99s internal\nPanelBuilder feature. PanelBuilder provides a GUI to customize the user interface, and generates\nan OGLML document.\nWhen a new CustomPanel file is created within DashBoard\xe2\x80\x99s PanelBuilder, an OGLML file with\nan extension is created.\n.grid\nOGLML is strictly a layout tool for tailoring the presentation of a device\xe2\x80\x99s user interface within\nDashBoard. It simply specifies how a devices\xe2\x80\x99 resources are displayed, and relies upon resources\nin the data store to provide the values for the content. The data store must be backed by a data\nsource, through one of the mechanisms discussed above.\nogScript\nogScript is a programming language developed to interact with DashBoard-enabled devices. It\nuses JavaScript functions, syntax, and primitive object types. To enable CustomPanel developers\nto interact with panels and devices, ogScript adds some new global objects to JavaScript. Most\nJavaScript works in ogScript scripts, although you might run across an occasional item that does\nnot work.\nogScript may be embedded into an OGLML document to add additional functionality based on a\nset of trigger events (for example, when a page loads, when a parameter changes, mouse clicks,\netc.). There are a number of API definitions to allow control of DashBoard\xe2\x80\x99s features, access to\nthe data store, and connect to external devices and data sources.\nGetting Started\nBuilding a CustomPanel Application\nThere are several steps in creating a CustomPanel application. The easiest way to get started is to\ninteractively design a layout with DashBoard\xe2\x80\x99s PanelBuilder. The basic steps involved are:\n\xe2\x80\xa2 Define data sources\n\xe2\x80\xa2 Define local parameters\n\xe2\x80\xa2 Add controls to the layout in PanelBuilder\n\xe2\x80\xa2 Edit OGLML file for fine-tuning\n\xe2\x80\xa2 Add ogScript to the CustomPanel for advanced functionality\nPanelBuilder is an interactive tool that allows quick and easy layout of control; its output is an\nOGLML document (with a extension).\n.grid\nRefer to DashBoard User Guide help topic or the DashBoard User Guide (8351DR-004) PDF\nfor detailed instructions on building CustomPanels in PanelBuilder.\nDashBoard CustomPanel Development Guide Introduction \xe2\x80\xa2 15DashBoard Data Model\nIn This Section\nThis section describes the underlying data model for openGear and DashBoard Connect devices.\nThis section includes the following topics:\n\xe2\x80\xa2 Device Data Model\n\xe2\x80\xa2 Customizing Menus Using Display Hints\n\xe2\x80\xa2 Data Types\n\xe2\x80\xa2 External Data Objects\n\xe2\x80\xa2 OGLML Documents\n\xe2\x80\xa2 Custom Widgets\n\xe2\x80\xa2 Custom APIs Within CustomPanels\nDevice Data Model\nThis section includes the following topics:\n\xe2\x80\xa2 Data Object Hierarchy\n\xe2\x80\xa2 Device / Card\n\xe2\x80\xa2 Parameters\n\xe2\x80\xa2 Constraints\n\xe2\x80\xa2 Parameter Structure Objects\n\xe2\x80\xa2 Parameter References\n\xe2\x80\xa2 Menus\nData Object Hierarchy\nDashBoard stores a device\xe2\x80\x99s data representation in an object hierarchy.\n16 \xe2\x80\xa2 DashBoard Data Model DashBoard CustomPanel Development GuideFigure 2 - Data Object Hierarchy in DashBoard\nThis hierarchy is explicitly exposed in the XML representation. OGP does not explicitly reference\nthe data through the object hierarchy, but individual data elements may be accessed via their\nOIDs.\nDevice / Card\nAll information regarding a device is encapsulated within the device object. This is encapsulated\nwith a tag in the XML representation. Each node in the DashBoard tree is treated as an\n<card>\nindependent device object. The device object contains a list of parameters and menu-groups.\nEach device node in the DashBoard tree has a unique node-id. This node-id is used by DashBoard\nto reference parameters from multiple devices within the same client interface. The node-id can be\ndetermined by selecting the node in the DashBoard tree and selecting \xe2\x80\x9cView Connection\nInformation\xe2\x80\x9d from the context menu.\nDashBoard CustomPanel Development Guide DashBoard Data Model \xe2\x80\xa2 17Figure 3 - Connection Information\nParameters\nThe configuration and state of any device can be represented by a list of parameters holding\ninformation about the device, including:\n\xe2\x80\xa2 identification: device type and supplier name, software revision, etc.\n\xe2\x80\xa2 status: alarms, voltage, current, temperature, input signal presence and format, etc.\n\xe2\x80\xa2 configuration: user-specified setup parameters (gain, delay, output video format, etc.)\nEach parameter is identified with an Object Identifier (OID), and consists of two parts: the\ndescriptor and the value. The descriptor defines the structure of the data, and the value is the\ncontent, which is dependent on the descriptor. The descriptor may also specify a constraint,\nwhich limits the value to a certain set of valid values.\nObject Identifiers (OIDs)\nEach parameter is identified by a unique object ID (OID). There are 2 types of OIDs supported:\nnumeric and string. All devices must support numeric OIDs, and may optionally support string\nOIDs. However, use of meaningful string OIDs is strongly recommended for new designs, as it\nclarifies code and simplifies the development of CustomPanels. Handling of Numeric and String\nOID parameters utilize different message types. Devices implementing String OIDs must support\nboth message types.\nNumeric OIDs\nNumeric OIDs are 2-byte integers and referenced in this document as a 16-bit hex value, for\nexample: . In JSON messaging, numeric OIDs are encoded as strings. For example, the\n0x0105\nOID is encoded as the string .\n0x0105 "0x105"\nString OIDs\nString OIDs allow text-based parameter identifiers, and must follow the following encoding rules:\n\xe2\x80\xa2 Must not contain spaces\n\xe2\x80\xa2 May only contain the following characters: a-z A-Z 0-9 .(dot) _ (underscore)\n\xe2\x80\xa2 Are case sensitive\n\xe2\x80\xa2 There is no set limit to the String OID identifier length; however, string OIDs over 255\ncharacters cannot be carried over CAN or TCP/IP binary protocol.\nA string OID identifier should not be confused with the parameter name. A string ID is the\n18 \xe2\x80\xa2 DashBoard Data Model DashBoard CustomPanel Development Guidevariable name, the Parameter Name is the display name for the parameter. For example a\nparameter may have the OID \xe2\x80\x9cmle.2.keyer.3.ckey-state\xe2\x80\x9d and the parameter name could be\n\xe2\x80\x9cChroma Key\xe2\x80\x9d. Software refers to the value \xe2\x80\x9cmle.2.keyer.3.ckey-state\xe2\x80\x9d, but the default label on\nthe DashBoard GUI would be \xe2\x80\x9cChroma Key\xe2\x80\x9d.\nDescriptors\nParameters are defined using a descriptor containing its name, data type, data length, constraint\n(set of permitted values) and other information. When DashBoard first contacts a device, it\nrequests the list of parameters for that device, and the descriptor for each parameter. This\ninformation is used to create an appropriate user interface for the device and to properly interpret\nand display parameter values reported by the device.\nIn JSON messaging, descriptor objects are identified by the naming convention oid.\n_d_\nThe descriptor for each parameter contains the following fields:\nField Description\noid Object Identifier for this Parameter\nversion Version of the descriptor\nname Parameter name to be displayed in a user interface\ndata type Data type (integer, float, string, or array thereof)\ndata size Nominal size of the data field\naccess Read/write access indicator\nprecision Precision to displayed for printed numbers\nwidget Graphical display hint for this parameter\nconstraint An object specifying the set of permitted values for the parameter\nVersion\nThe current version is 2. Permitted versions are 0, 1 and 2. Versions 0 and 1 are identical to\nversion 2, except that widget hints are ignored.\nName\nThis field provides the parameter name to be displayed in DashBoard. The name does not need to\nbe unique. It may be ignored by some software (e.g. the SNMP agent).\nData Type and Size\nData type indicates the storage type for the parameter value.\nAccess\nThis field indicates whether the parameter can be modified. This enables the control software to\ndisplay an appropriate control for read-only values, or to disallow edits. In OGP, the supported\nvalues are:\nAccess Value Description\nACCESS_READWRITE 0x01 Parameter may be modified by the control client\nACCESS_READONLY 0x00 Parameter is read-only, and may not be set by the client\nPrecision\nWhen used with numbers \xe2\x80\x94 this field defines the number of digits following the decimal point\ndisplayed for printed numbers. It applies mainly to floating point numbers.\nDashBoard CustomPanel Development Guide DashBoard Data Model \xe2\x80\xa2 19When used with string arrays \xe2\x80\x94this field defines the maximum number of bytes reserved for a\nsingle element in the array. If it is 0, no limit is set for each element, and the maximum number of\nbytes in a parameter value is shared arbitrarily amongst all elements in the array.\nConstraint\nConstraints allow data to be limited to a certain range or certain values.\nWidget Hint\nThe widget hint specifies the type of graphical control that should be used to display this\nparameter. To ensure backward compatibility with DashBoard 1.0, widget hints are ignored if the\nversion field is less than 2.\nConstraints\nConstraints are an important part of the parameter descriptor. It specifies a legal range of values\nwhich the value of the parameter may take. Certain constraints also impact how the parameter is\ndisplayed within DashBoard. Certain widgets require specific constraints, while others may\nbehave in different manners depending upon the constraint applied to the parameter. For array\nparameters, the same constraint applies to each element of the array.\nConstraints are specified through a numeric identifier called ctype. The supported constraint types\nare:\nConstraint Name ctype Param Types Description\nNULL_CONSTRAINT 0 All Parameter is unconstrained.\nRANGE_CONSTRAINT 1 INT16_PARAM Parameter is bounded by a\nINT32_PARAM min-max range. Display\nmin-max range may be\nINT16_ARRAY\ndifferent from the value\nINT32_ARRAY\nrange.\nFLOAT_PARAM\nFLOAT_ARRAY\nCHOICE_CONSTRAINT 2 INT16_PARAM Parameter must be selected\nINT16_ARRAY from a set (enumeration) of\nname-value pairs (up to 255\nchoices)\nEXTENDED_CHOICE 3 INT16_PARAM Parameter must be selected\nINT16_ARRAY from a set (enumeration) of\nname-value pairs (more\nthan 255 choices)\nSTRING_CHOICE 4 STRING_PARAM Provides a set of available\nSTRING_ARRAY choices. Parameter may be\nselected from this set, but\narbitrary values are also\npermitted.\nRANGE_STEP_CONSTRAINT 5 INT16_PARAM Parameter is bounded by a\nINT32_PARAM min-max range. Step size\nindicates the amount to\nINT16_ARRAY\nincrement/decrement the\nINT32_ARRAY\nvalue each time it is\nFLOAT_PARAM changed.\nFLOAT_ARRAY\nALARM_TABLE 10 INT16_PARAM Each bit in the parameter is\nINT32_PARAM a status flag, so param can\ndisplay 16 or 32 concurrent\nINT16_ARRAY\nnamed error conditions.\n20 \xe2\x80\xa2 DashBoard Data Model DashBoard CustomPanel Development GuideConstraint Name ctype Param Types Description\nEXTERNAL_CONSTRAINT 11 All Indicates that the constraint\nis encoded in an external\nobject, rather than encoded\nwithin the descriptor.\nConstraints are normally embedded within the parameter descriptor however; they may also be\nencoded separately as external objects (which allow longer choice lists, etc.).\nA detailed definition of each constraint type, and rules for encoding each constraint, are provided\nbelow.\nNote: The constraint is considered to be a contract for the parameter. DashBoard will\nnot attempt to set a parameter to a value that violates the constraint. Similarly, the\ndevice must ensure that the value reported for each parameter complies with the\nconstraint. Behavior of some control software may be unpredictable if the reported\nvalue violates the constraint.\nUnconstrained\nTo leave a parameter unconstrained, use the NULL_CONTRAINT constraint. Any parameter\nwhich does not have any other constraint applied must specify the NULL_CONSTRAINT.\nRange Constraints\nTo constrain a numerical parameter to a specific range of values, the RANGE_CONSTRAINT or\nRANGE_STEP_CONSTRIANT must be specified. Both constraint types allow a minimum and\nmaximum parameter value (minValue, maxValue). Additionally, an optional display minimum\nand maximum value (minDisp, maxDisp) may also be specified. This allows the display range to\nmap to normalized parameter range. The value to be displayed is determined by the following\nlinear mapping:\n(\xf0\x9d\x91\xa3\xf0\x9d\x91\xa3\xf0\x9d\x91\xa3\xf0\x9d\x91\xa3\xf0\x9d\x91\xa3\xf0\x9d\x91\xa3\xf0\x9d\x91\xa3\xf0\x9d\x91\xa3\xf0\x9d\x91\xa3\xf0\x9d\x91\xa3\xe2\x88\x92\xf0\x9d\x91\x9a\xf0\x9d\x91\x9a\xf0\x9d\x91\x9a\xf0\x9d\x91\x9a\xf0\x9d\x91\x9a\xf0\x9d\x91\x9a\xf0\x9d\x91\x9a\xf0\x9d\x91\x9a\xf0\x9d\x91\xa3\xf0\x9d\x91\xa3\xf0\x9d\x91\xa3\xf0\x9d\x91\xa3\xf0\x9d\x91\xa3\xf0\x9d\x91\xa3\xf0\x9d\x91\xa3\xf0\x9d\x91\xa3)\xc3\x97(\xf0\x9d\x91\x9a\xf0\x9d\x91\x9a\xf0\x9d\x91\xa3\xf0\x9d\x91\xa3\xf0\x9d\x91\x9a\xf0\x9d\x91\x9a\xf0\x9d\x91\x9a\xf0\x9d\x91\x9a\xf0\x9d\x91\x9a\xf0\x9d\x91\x9a\xf0\x9d\x91\x9a\xf0\x9d\x91\x9a\xf0\x9d\x91\x9a\xf0\x9d\x91\x9a\xe2\x88\x92\xf0\x9d\x91\x9a\xf0\x9d\x91\x9a\xf0\x9d\x91\x9a\xf0\x9d\x91\x9a\xf0\x9d\x91\x9a\xf0\x9d\x91\x9a\xf0\x9d\x91\x9a\xf0\x9d\x91\x9a\xf0\x9d\x91\x9a\xf0\x9d\x91\x9a\xf0\x9d\x91\x9a\xf0\x9d\x91\x9a\xf0\x9d\x91\x9a\xf0\x9d\x91\x9a)\n\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91 \xf0\x9d\x91\xa3\xf0\x9d\x91\xa3\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\xa3\xf0\x9d\x91\xa3\xf0\x9d\x91\x91\xf0\x9d\x91\x91 =\xf0\x9d\x91\x9a\xf0\x9d\x91\x9a\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x9a\xf0\x9d\x91\x9a\xf0\x9d\x91\x9a\xf0\x9d\x91\x9a\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91+ (\xf0\x9d\x91\x9a\xf0\x9d\x91\x9a\xf0\x9d\x91\xa3\xf0\x9d\x91\xa3\xf0\x9d\x91\x9a\xf0\x9d\x91\x9a\xf0\x9d\x91\x9a\xf0\x9d\x91\x9a\xf0\x9d\x91\xa3\xf0\x9d\x91\xa3\xf0\x9d\x91\xa3\xf0\x9d\x91\xa3\xf0\x9d\x91\xa3\xf0\x9d\x91\xa3\xf0\x9d\x91\xa3\xf0\x9d\x91\xa3\xe2\x88\x92\xf0\x9d\x91\x9a\xf0\x9d\x91\x9a\xf0\x9d\x91\x9a\xf0\x9d\x91\x9a\xf0\x9d\x91\x9a\xf0\x9d\x91\x9a\xf0\x9d\x91\x9a\xf0\x9d\x91\x9a\xf0\x9d\x91\xa3\xf0\x9d\x91\xa3\xf0\x9d\x91\xa3\xf0\x9d\x91\xa3\xf0\x9d\x91\xa3\xf0\x9d\x91\xa3\xf0\x9d\x91\xa3\xf0\x9d\x91\xa3)\nNote that minDisp and maxDisp must be the same data type as the parameter. For example, to\ndisplay the value of a 12-bit register (0-4095) as a percentage, set\n\xe2\x80\xa2 (minValue, maxValue) = (0, 4095)\n\xe2\x80\xa2 (minDisp, maxDisp) = (0, 100)\nThe difference between RANGE_CONSTRAINT and RANGE_STEP_CONSTRAINT is the\nlatter also allows a step size to be specified. The step is specified in the same data type as the\nparameter and is the minimum change increment on the parameter value (not necessarily the\ndisplay value).\nNote It is strongly recommended that the range (maxValue \xe2\x80\x93 minValue) be evenly\ndivisible by the provided step size. Otherwise, when starting from the minimum, the\nparameter will use values of minValue + n * stepSize and when starting from the\nmaximum, the parameter will use values of maxValue \xe2\x80\x93 n * stepSize.\nRange constraints applied to an array parameter apply to all members of the array.\nChoice Constraints\nChoice constraints allow a parameter to provide a list of choices. CHOICE_CONSTRAINT and\nEXTENDED_CHOICE constraints provide a mechanism to create a set of enumerated values for\nan INT16 or INT32 parameter. This allows integer types to be limited to a specific set of valid\nDashBoard CustomPanel Development Guide DashBoard Data Model \xe2\x80\xa2 21values, as well as providing a mechanism to provide text choices in the DashBoard UI for these\nparameters.\nSTRING_CHOICE constraint provides a set of default values which may be populated in a\nSTRING_PARAM, however unlike CHOICE_CONSTRAINT and EXTENDED_CHOICE, it\ndoes not limit the user to only these values, any value may be used in the string.\nAlarms\nAssigning an ALARM_TABLE constraint to an integer parameter tells DashBoard to treat the\ninteger as an array of alarms. When alarms are set, they will impact the overall status reporting of\nthe device.\nExternal Constraints\nAn EXTERNAL_CONSTRAINT is used to indicate that the constraint for this parameter is\nprovided in an external object, rather than embedded within the parameter descriptor.\nThis constraint simply provides a reference to the external object, encoded as shown in the\nfollowing table.\nParameter Structure Objects\nParameter structure objects, or structs, are user-defined structures defined within parameters.\nThey are defined by encoding a struct descriptor within the value object of a parameter. This is\ndone by inserting an array of sub-OID descriptors (param objects) into the value field of a\nparameter. Structs must have their type set to or .\nSTRUCT STRUCT-ARRAY\nA parameter may inherit the struct descriptor from another parameter through use of a STRUCT\nconstraint which specifies a templateoid. The templateoid specifies the OID of a parameter\nwhose descriptor will be inherited, thus eliminating the need to define identical struct descriptor\nfor each instance of a struct parameter.\nParameter References\nSub-params within a structure may also be defined as references to other parameters. These\nbehave much like C++ or Java variable references. A parameter reference inherits the referenced\nparameter\xe2\x80\x99s type, attributes and constraints.\nMenus\nHow a device is displayed in DashBoard is determined by the menu data provided by the device.\nDashBoard provides two methods for a device to specify menu layout and structure:\n\xe2\x80\xa2 Default openGear layout\n\xe2\x80\xa2 openGear Layout Markup Language (OGLML)\nDefault Menu Layout\nThe default menu layout is designed to make it very simple for devices to display a menu\nstructure. Each menu comprises a name and a list of object identifiers specifying the parameters to\nbe displayed in the menu. Menus are organized into groups, where each group comprises a name\nand an array of menus.\n22 \xe2\x80\xa2 DashBoard Data Model DashBoard CustomPanel Development GuideMenus are divided into menu groups. The default layout displays only 2 groups:\n\xe2\x80\xa2 Group 0: Status (read-only)\n\xe2\x80\xa2 Group 1: Configuration\nBelow is an example of the default layout:\nMenu Tabs Menu Tabs\nParameters\nMenu Group 0 Menu Group 1\nFigure 4 - Menu Layout\nEach product may define any number of menus and groups; however, the DashBoard control\nsystem recognizes two groups in the default UI layout: group 0 = status parameters (read only),\nand group 1 = configuration parameters. Other menu groups are not displayed in the default UI\nlayout presented by DashBoard, but may be used in OGLML UI layouts\nOGLML Menu Layout\nAdvanced menu layouts are available with openGear Layout Markup Language (OGLML).\nOGLML documents can replace an individual menu or the entire device configuration in\nDashBoard\nDashBoard CustomPanel Development Guide DashBoard Data Model \xe2\x80\xa2 23Customizing Menus Using Display Hints\nThe descriptor for each parameter includes a widget hint to allow the device designer to specify\nthe type of control to be used to display the parameter. The hints available depend on the\nparameter type, the constraint type, and the values in the constraint for each parameter. This\nallows the designer to customize the menu for each device.\nDashBoard 1.0 ignored widget hints and provided a default control based on parameter and\nconstraint type. For backwards compatibility, DashBoard 2.0 (and later) ignores widget hints for\nparameters with the version field set to 0 or 1, providing the same default behavior as DashBoard\n1.0. To use widget hints, it is necessary to set the version field within the parameter to 2.\nWhen a read-only parameter provides a widget hint, a read-only version of the parameter\xe2\x80\x99s\npreferred widget is used. The exceptions are WIDGET_DEFAULT (displays like DashBoard 1.0)\nand Alarm Tables (display the alarm). Hints for status menu parameters are overridden for correct\ndisplay in that space.\nUniversal Hints\nThe following widget hints may be used for any parameter type:\nWidget Name Value Description\nWIDGET_DEFAULT 0 DashBoard will choose what it thinks is the best widget\nto use for the parameter type and constraint (makes the\nparameter work like it does with DashBoard 1.0).\nWIDGET_TEXT_DISPLAY 1 shows a read-only version of the parameter value (uses\nsame widget that is shown when WIDGET_DEFAULT\nparameter is set to read-only).\nWIDGET_HIDDEN 2 still uses space on the menu page and shows the label\nfor the parameter but show a blank area on the menu\npage where the widget would be.\nWIDGET_LABEL 100 Displays the value of the parameter as a read-only label\nSeparators, Titles and Layout Hints\nThe following hints are used with string parameters to provide separators, titles, and extended\nlayout options for menus. Parameters using these widget hints are treated as read only and\nconstant \xe2\x80\x93 they do not update live on the screen. Examples of each hint are shown below.\nWidget Name Value Description\nWIDGET_TITLE_LINE 5 displays the value of the String parameter as a label\nwith all other parameter labels and a line across the\ncontent area of the menu page.\nWIDGET_LINE_ONLY 6 displays a line across the content area of the menu\npage with no label on the left.\nWIDGET_TITLE_ONLY 7 displays the value of the String parameter as a label\nwith empty space in the content area of the menu page.\nWIDGET_PAGE_TAB 8 creates a 3rd-level tab within the menu page. The value\nof the parameter is used as the tab label.\nWIDGET_TITLE_HEADER 10 displays a title over the content area of the menu with\nthe value of the parameter used as the header text.\n24 \xe2\x80\xa2 DashBoard Data Model DashBoard CustomPanel Development GuideWIDGET_TITLE_LINE (5)\nThis displays the value of the String parameter as a label aligned with all other parameter labels,\nand a line across the content area of the menu page. The name of the parameter is ignored.\nFigure 5 - WIDGET_TITLE_LINE hint.\nWIDGET_LINE_ONLY (6)\nThis displays a line across the content area of the menu page with no label on the left. The name\nand value of the parameter are ignored.\nFigure 6 - WIDGET_LINE_ONLY hint.\nWIDGET_TITLE_ONLY (7)\nThis displays the value of the String parameter as a label with empty space in the content area of\nthe menu page. The name of the parameter is ignored.\nFigure 7 - WIDGET_TITLE_ONLY hint\nWIDGET_PAGE_TAB (8)\nWhenever a new String parameter with a WIDGET_PAGE_TAB hint is found on a menu page, a\nnew 3rd-level tab is created inside of that menu page. The label on that tab will be the value of the\nString parameter. All parameters listed after each WIDGET_PAGE_TAB String parameters (until\nthe next such parameter) are placed on a menu page inside of that 3rd-level tab.\nFigure 8 - A menu with WIDGET_PAGE_TAB hints.\nNote Whenever WIDGET_PAGE_TAB hints are used on a menu, the first OID in the\nmenu should be for a String parameter with a widget hint defining the first tab\xe2\x80\x99s\nlabel.\nDashBoard CustomPanel Development Guide DashBoard Data Model \xe2\x80\xa2 25WIDGET_TITLE_HEADER (10)\nDisplays a title over the content area of the menu with the value of the parameter used as the\nheader text. No label is shown on the left and the name of the parameter is ignored.\nFigure 9 - WIDGET_TITLE_HEADER hint.\nArray Layout Hints\nBy default, all array parameters are displayed horizontally across a menu page. Adjacent OIDs of\nthe same size will format in DashBoard in a tabular format. For example, 3 array parameters with\n4 elements each, the layout would appear as:\nFigure 10 - Default array layout.\nColumn headers can be added by adding a read-only INT16_ARRAY parameter to the menu\nimmediately before the other arrays (widget hint\nWIDGET_ARRAY_HEADER_HORIZONTAL). The parameter is expected to have a choice\nconstraint. The string values of the elements of this parameter provide the column headers. The\nresulting display is:\nFigure 11 - WIDGET_ARRAY_HEADER_HORIZONTAL hint.\nArray elements can also be given a vertical layout. Changing the widget hint for the header array\nto provides the following layout:\nWIDGET_ARRAY_HEADER_VERTICAL\nFigure 12 - WIDGET_ARRAY_HEADER_VERTICAL hint.\n26 \xe2\x80\xa2 DashBoard Data Model DashBoard CustomPanel Development GuideArray layout can be specified by including a read-only INT16_ARRAY parameter as a header,\nwith one of the following widget hints:\nWidget Name Value Description\nWIDGET_ARRAY_HEADER_VERTICAL 15 indicates that the associated array\nparameter and all subsequent\nparameters should be displayed in a\nvertical layout\nWIDGET_ARRAY_HEADER_HORIZONTAL 16 indicates that the associated array\nparameter and all subsequent\nparameters should be displayed in a\nhorizontal layout\nNormally sequential array OIDs will be formatted as a single table. If it is desired to break a block\nof sequential array OIDs into multiple tables, it is necessary to insert a non-array OID, or switch\nfrom a horizontal layout hint to a vertical layout hint (or vice versa). If multiple arrays of different\nsize are encoded with different sizes, the layout may be unpredictable.\nWIDGET_ARRAY_HEADER_VERTICAL (15)\nThis hint indicates that the associated array parameter and subsequent parameters should be\ndisplayed in a vertical layout. The elements of the parameter will be used as row labels for display.\nThe names of the following arrays are used as column labels. The header should be a read-only\nINT16_ARRAY parameter with a choice constraint to allow meaningful text labels. The elements\nof each array are displayed as specified by the widget hint for that array.\nThe vertical array layout will be applied until another WIDGET_ARRAY_HEADER_VERTICAL\nstarts a new set of vertical columns, a WIDGET_ARRAY_HEADER_HORIZONTAL declares\nthat subsequent arrays should be laid out horizontally, a non-array element in found on the page,\nor the end of the menu page is reached.\nFigure 13 shows an INT16_ARRAY parameter named "Channel", provides a vertical layout and\nrow labels for 7 array parameters named \xe2\x80\x9cChannel Update\xe2\x80\x9d, \xe2\x80\x9cSource\xe2\x80\x9d, \xe2\x80\x9cVertical Channel\xe2\x80\x9d, \xe2\x80\x9cDelay\nArray (ms)\xe2\x80\x9d, \xe2\x80\x9cGain (dB)\xe2\x80\x9d, \xe2\x80\x9cInvert\xe2\x80\x9d, and \xe2\x80\x9cDestination\xe2\x80\x9d.\nFigure 13 - INT6_ARRAY vertical layout example.\nDashBoard CustomPanel Development Guide DashBoard Data Model \xe2\x80\xa2 27WIDGET_ARRAY_HEADER_HORIZONTAL (16)\nThe WIDGET_ARRAY_HEADER_HORIZONTAL is used to create a header over a horizontal\narray. It will also will end a block of vertical array elements. Each element in the header parameter\nwill be displayed as a column header.\nFigure 14 shows an INT16_ARRAY parameter named "Channel" providing a horizontal layout\nand column labels for 7 array parameters named \xe2\x80\x9cHorizontal Channel\xe2\x80\x9d, \xe2\x80\x9cSource\xe2\x80\x9d, \xe2\x80\x9cDelay Array\n(ms)\xe2\x80\x9d, \xe2\x80\x9cGain (dB)\xe2\x80\x9d, \xe2\x80\x9cInvert\xe2\x80\x9d, \xe2\x80\x9cDestination\xe2\x80\x9d and \xe2\x80\x9cTransition\xe2\x80\x9d.\nFigure 14 - INT16_ARRAY horizontal layout example.\nINT16/INT32 Parameters with Choice Constraints\nThe following hints apply to INT16, INT16_ARRAY, INT32, and INT32_ARRAY Parameters\nprovided that they use a constraint of type CHOICE or EXTENDED_CHOICE. There are some\nrestrictions for certain hints (checkboxes and toggle buttons are only valid for 2-choice constraints,\nbuttons with and without prompts are only valid for single-choice and 2-choice constraints). If a\nwidget hint is used incorrectly, the combo box will be substituted in place of the chosen widget.\nDisplay examples are provided below.\nWidget Name Value Description\nWIDGET_COMBO_BOX 7 Displays a dropdown list of selectable options. This is\nthe default widget used for any choice parameter\nwith more than 1 choice provided.\nWIDGET_CHECKBOX 8 Displays a checkbox. Checkboxes only apply to\nparameters with exactly 2 choices. The first choice is\nconsidered false or unchecked; the second choice is\nconsidered true or checked.\nWIDGET_RADIO_HORIZONTAL 9 Displays a radio button for each integer value option.\nThe radio buttons are placed beside each other\nhorizontally on the page.\nWIDGET_RADIO_VERTICAL 10 Displays a radio button for each integer value option.\nThe radio buttons are placed in a vertical column.\nWIDGET_BUTTON_PROMPT 11 Provides a button with confirmation prompt.\nWhenever the button is pressed and confirmed, the\nparameter value is sent to the device.\nWIDGET_BUTTON_NO_PROMPT 12 Provides a button without confirmation prompt.\nWhenever the button is pressed, the parameter value\nis sent to the device.\nWIDGET_BUTTON_TOGGLE 13 Displays a toggle buttons. This hint applies only to\nparameters with exactly 2 choices. The first choice is\n28 \xe2\x80\xa2 DashBoard Data Model DashBoard CustomPanel Development GuideWidget Name Value Description\nshown when the button is up (not pressed);\nthe second choice is shown when the button is down\n(pressed).\nWIDGET_FILE_DOWNLOAD 18 Displays a file download widget. This hint requires an\nexternal object with an OID matching the value of the\nparameter.\nWIDGET_MENU_POPUP 20 Each value in the parameter must refer to the menu\nID of an OGP Menu. The choice corresponding to the\nparameter value has its name used as the value\ndisplayed on a button. When the button is pressed,\nthe menu with an OID corresponding to the\nparameter value is displayed in a popup menu.\nWIDGET_RADIO_TOGGLE_BUTTONS 22 Displays a toggle button for each integer value\noption. The toggle buttons are placed beside each\nother horizontally on the page.\nWIDGET_TREE 31 Displays a tree control. Tree elements are defined by\nthe elements of the choice constraint. The tree\nhierarchy is defined by \xe2\x80\x9c-\xe2\x80\x9d characters at the\nbeginning of the choice. See detailed description\nbelow for more information.\nWIDGET_TREE_POPUP 32 Displays the tree (same definition as\nWIDGET_TREE) in a combo box control. See\ndetailed description below for more information.\nWIDGET_COMBO_BOX (7)\nDisplay a dropdown list of selectable options. This is the default widget used for any choice\nparameter with more than 1 choice provided.\nFigure 15 - WIDGET_COMBO hint\nWIDGET_CHECKBOX (8)\nDisplays a checkbox. Checkboxes only apply to integer choice constraints with exactly 2\nchoices. The first choice is considered false or unchecked; the second choice is considered true or\nchecked.\nFigure 16 - WIDGET_CHECKBOX hint.\nDashBoard CustomPanel Development Guide DashBoard Data Model \xe2\x80\xa2 29WIDGET_RADIO_HORIZONTAL (9)\nDisplays a radio button for each element in the choice constraint. The radio buttons are placed\nbeside each other horizontally on the page.\nFigure 17 - WIDGET_RADIO_HORIZONTAL hint\nWIDGET_RADIO_VERTICAL (10)\nDisplays a radio button for each element in the choice constraint. The radio buttons are placed in a\ncolumn vertically on the page.\nFigure 18 - WIDGET_RADIO_VERTICAL hint\nWIDGET_BUTTON_NO_PROMPT (12)\nThis hint can only be used for a parameter having a choice constraint with one or two choices. It\ndisplays a button with the name of the first choice as the button label. When the button is pressed,\na parameter set request is sent to the device immediately (without user confirmation). If the\nparameter has only one choice, the value of that choice is sent to the device. If the parameter has\ntwo choices, the value of the second choice is sent. The device should normally reset the\nparameter value to the first choice when it acknowledges the set request.\nFigure 19 shows a single-choice parameter named "Factory Defaults" with a hint of\nWIDGET_BUTTON_NO_PROMPT and a value of "Reset". There will be no confirmation\ndialog.\nFigure 19 - WIDGET_BUTTON_NO_PROMPT hint.\nWIDGET_BUTTON_PROMPT (11)\nThis hint can only be used for a parameter having a choice constraint with one or two choices. It is\nthe default widget used when only one choice is available. It displays a button with the name of\nthe first choice as the button label. When the button is pressed, a confirmation dialog is displayed\nbefore sending anything to the device. The dialog uses the format: \xe2\x80\x9c[Button Label] [Parameter\nName]?\xe2\x80\x9d So a choice called \xe2\x80\x9cReset\xe2\x80\x9d with a parameter named \xe2\x80\x9cParameter Values\xe2\x80\x9d would display\n\xe2\x80\x9cReset Parameter Values?\xe2\x80\x9d as the prompt. When the button is pressed and confirmed, a parameter\nset request is sent to the device. If the parameter has only one choice, the value of that choice is\nsent to the device. If the parameter has two choices, the value of the second choice is sent. The\ndevice should normally reset the parameter value to the first choice when it acknowledges the set\nrequest. If a two-state button is desired, see WIDGET_BUTTON_TOGGLE (13) on page 31.\n30 \xe2\x80\xa2 DashBoard Data Model DashBoard CustomPanel Development GuideFigure 20 shows single-choice parameter named "Factory Defaults" with a hint of\nWIDGET_BUTTON_PROMPT and a value of "Reset".\nFigure 20 - WIDGET_BUTTON_PROMPT hint\nNote Two choices are necessary for using WIDGET_BUTTON_PROMPT and\nWIDGET_BUTTON_NO_PROMPT with array parameters.\nWIDGET_BUTTON_TOGGLE (13)\nToggle buttons work exactly the same was a checkbox. The toggle button applies only to integer\nconstraints with exactly two choices. The name of the first choice is shown when the button is\nup (not pressed) and the name of the second choice is shown when the button is down (pressed).\nFigure 21 shows a two-choice integer parameter named "Bold Toggler" with choice 1 set to "First\nValue" and choice 2 set to "Second value" The figure shows the button\xe2\x80\x99s display for both before\nand after a button toggle.\nFigure 21 - WIDGET_BUTTON_TOGGLE hint\nWIDGET_FILE_DOWNLOAD (18)\nThis hint requires that an external object with an OID matching the value of the parameter be\navailable. For each choice in the parameter\xe2\x80\x99s choice constraint, the choice value represents an\nexternal object\xe2\x80\x99s OID and the value represents the filename to display. When the \xe2\x80\x98save\xe2\x80\x99 button is\npressed, DashBoard requests the external object with the given OID and save the external object\xe2\x80\x99s\nbytes to the filename/location defined by the user (default filename is defined in the choice\nconstraint).\nDashBoard CustomPanel Development Guide DashBoard Data Model \xe2\x80\xa2 31Figure 22 - WIDGET_FILE_DOWNLOAD hint\nWIDGET_MENU_POPUP (20)\nThis hint requires that an OID Menu with a menu ID matching the value of the parameter be\navailable. For each choice in the parameter\xe2\x80\x99s choice constraint, the choice value represents a\nmenu\xe2\x80\x99s ID and the choice name represents the label to display on the button. When the button is\npressed, DashBoard displays the menu with the given ID as a popup menu.\nFigure 23 - WIDGET_MENU_POPUP hint\n32 \xe2\x80\xa2 DashBoard Data Model DashBoard CustomPanel Development GuideWIDGET_RADIO_TOGGLE_BUTTONS (22)\nDisplays a radio toggle button for each integer value option. The radio toggle buttons are placed\nbeside each other horizontally on the page.\nFigure 24 - WIDGET_RADIO_TOGGLE_BUTTONS hint\nWIDGET_TREE (31)\nDisplays a tree control. Tree elements are defined by the elements of the choice constraint. The\ntree hierarchy is defined by \xe2\x80\x9c-\xe2\x80\x9d characters at the beginning of the choice. When an element in the\ntree is selected, the parameter value is set to the value of the selected choice. All other\nexpand/collapse changes are local only to the DashBoard on which the change occurred.\n\xe2\x80\x9c+\xe2\x80\x9d indicates that an element should be expanded by default.\nFigure 25 - WIDGET_TREE hint\nThe tree pictured above is defined by the following list of choices:\n1. Element 1<i:>\n2. +Element 1 - 1<i-u:http://127.0.0.1/icons/small/sound2.png>\n3. +Element 1 - 2<i:>\n4. +-Element 1 - 2 - 1<i:>\n5. +-Element 1 - 2 - 2<i:>\n6. +-Element 1 - 2 - 3<i:>\n7. Element 2\n8. +-Element 2 - 1\n9. +-Element 2 - 2\n10. +-Element 2 - 2 - 1\n11. +-Element 2 - 2 - 2\n12. +-Element 2 - 2 - 3\n13. +--Bob!\n14. Element 3\n15. Element 4\nDashBoard CustomPanel Development Guide DashBoard Data Model \xe2\x80\xa2 33WIDGET_TREE_POPUP (32)\nDisplays the tree (same definition as WIDGET_TREE) in a combo box control. This functions the\nsame as WIDGET_TREE, with the difference that only the currently selected item shows by\ndefault. When the user clicks on the value, a popup appears, allowing selection to be made.\nFigure 26 - WIDGET_TREE_POPUP hint\nHints for Numeric Parameters with Other Constraints\nThe following hints are for INT16, INT16_ARRAY, INT32, INT32_ARRAY, FLOAT, and\nFLOAT_ARRAY parameters and arrays with constraints other than choices. Most hints have\nspecific restrictions. Details for each hint are provided below.\nWidget Name Value Description\nWIDGET_SLIDER_HORIZONTAL 3 Displays a horizontal slider control. This is the\ndefault control for range-bounded integer and\nfloating point parameters when they are not\nused in an array\nWIDGET_SLIDER_VERTICAL 4 Displays a vertical slider control. This is the\ndefault control for range-bounded integer and\nfloating point array parameters\nWIDGET_SPINNER 5 Displays a spinner (entry field plus up/down\narrows). This is the default for unbounded INT16\nparameters. This cannot be used for unbounded\nFLOAT or INT32 parameters.\nWIDGET_TEXTBOX 6 Displays a numeric entry field. This is the default\nfor unbounded FLOAT and INT32 parameters.\nWIDGET_IP_ADDRESS 14 Displays an IP Address entry field.\nOnly works with unconstrained INT32\nparameters.\nWIDGET_PROGRESS_BAR 17 Displays a read-only progress bar control.\nWIDGET_AUDIO_METER 19 Displays a read-only audio level meter control\nwith green, yellow, and red markers.\nWIDGET_TIMER 21 Displays a label that counts down from the\nparameter value to 0 when double-clicked.\nWIDGET_COLOR_CHOOSER 23 Put a colour chooser as an element in the UI.\nChanges made to the colour chooser are\ninstantly sent to the device.\nColor values are INT32 values in ARGB format.\nWIDGET_SLIDER_HORIZONTAL_NO_LABEL 24 Displays a horizontal slider control with no label\nWIDGET_SLIDER_VERTICAL_NO_LABEL 25 Displays a vertical slider control with no label\nWIDGET_VERTICAL_FADER 26 Displays a vertical slider that looks like a fader\nbar\n34 \xe2\x80\xa2 DashBoard Data Model DashBoard CustomPanel Development GuideWidget Name Value Description\nWIDGET_TOUCH_WHEEL 27 Displays a touch wheel control\nWIDGET_HEX_SPINNER 28 Displays a spinner (entry field plus up/down\narrows). Display the value in Base 16.\nWIDGET_ABSOLUTE_POSITIONER 29 Provides a 2-axis absolute positioning element.\nWhen used as an INT16, the 8 LSBs represent\nthe X coordinate and the 8 MSBs represent the\nY coordinate. When used as an INT32, the 16\nLSBs represent the X coordinate and the 16\nMSBs represent the Y coordinate.\nA crosshair in a box can be dragged to the\nabsolute position of the value in 2-D space.\nWIDGET_ABSOLUTE_CROSSHAIR 30 Position a value in 2-D space. When used as an\nINT16, the 8 LSBs represent the X coordinate\nand the 8 MSBs represent the Y coordinate.\nWhen used as an INT32, the 16 LSBs represent\nthe X coordinate and the 16 MSBs represent the\nY coordinate.\nA crosshair that snaps to the center when\nreleased makes changes in +/- X, +/- Y relative\nto the offset from the center.\nWIDGET_JOY_STICK 34 Position a value in 2-D space. When used as an\nINT16, the 8 LSBs represent the X coordinate\nand the 8 MSBs represent the Y coordinate.\nWhen used as an INT32, the 16 LSBs represent\nthe X coordinate and the 16 MSBs represent the\nY coordinate.\nDisplays a joystick and modifies the X, Y values\nas the joystick is dragged north, south, east, and\nwest of the center.\nWIDGET_COLOR_CHOOSER_POPUP 33 Display a combo box control showing the\n\xe2\x80\x98current\xe2\x80\x99 colour. On click, show the colour\nchooser. If \xe2\x80\x9cLive\xe2\x80\x9d is togged on, update the\nparameter value immediately. If \xe2\x80\x9cLive\xe2\x80\x9d is toggled\noff, update the parameter value when the popup\nis closed.\nColor values are INT32 values in ARGB format.\nWIDGET_GRAPH 256 Displays a plot graph of a parameter\xe2\x80\x99s value\nover time.\nWIDGET_EQ_GRAPH 46 Displays an EQ Graph that provides a visual\nrepresentation of how bands effect frequencies\nacross a given range.\nWIDGET_SLIDER_HORIZONTAL (3)\nHorizontal sliders are the default widgets used for range-bounded integer and floating point\nnumbers when they are not used in an array. Sliders are not available for unbounded (null\nconstraint) parameters.\nFigure 27 shows an integer parameter with a range constraint bounded by (0, 200) and a\nWIDGET_SLIDER_HORIZONTAL hint.\nFigure 27 - WIDGET_SLIDER_HORIZONTAL hint\nDashBoard CustomPanel Development Guide DashBoard Data Model \xe2\x80\xa2 35WIDGET_SLIDER_VERTICAL (4)\nVertical sliders are the default widgets used for range-bounded integer and floating point numbers\nwhen they are used in an array. Sliders are not available for unbounded (null constraint)\nparameters.\nThe following is an integer parameter with a range constraint bounded by (0, 994) and a\nWIDGET_SLIDER_VERTICAL hint.\nFigure 28 - WIDGET_SLIDER_VERTICAL hint\nWIDGET_SLIDER_HORIZONTAL_NO_LABEL (24)\nFigure 29 - WIDGET_SLIDER_HORIZONTAL_NO_LABEL hint\nWIDGET_SLIDER_VERTICAL_NO_LABEL (25)\nFigure 30 - WIDGET_SLIDER_HORIZONTAL_NO_LABEL hint\nWIDGET_VERTICAL_FADER (26)\nThis hint specifies that the number shall be displayed as a vertical fader bar. The user can adjust\nthe level by dragging the handle of the fader up or down.\n36 \xe2\x80\xa2 DashBoard Data Model DashBoard CustomPanel Development GuideFigure 31 - WIDGET_VERTICAL_FADER hint\nWIDGET_TOUCH_WHEEL (27)\nThis hint specifies that the number shall be displayed as a touch wheel (or circular slider). The\nuser grabs the dot on the circle and drags clockwise to increment the value and counter clockwise\nto decrement it. The touch wheel can be configured to take a specified number of revolutions to go\nfrom the minimum value to the maximum value and can also be configured to roll over to the\nminimum or maximum when the limits of the range are reached.\nFigure 32 - WIDGET_TOUCH_WHEEL hint\nWIDGET_PROGRESS_BAR (17)\nThis hint specifies that the number shall be displayed as a horizontal progress bar. For a range-\nbounded parameter, the progress bar displays the specified range (similar to a slider). For an\nunbounded parameter, the progress bar displays from 0 to 100%.\nFigure 33 - WIDGET_PROGRESS_BAR hint\nWIDGET_SPINNER (5)\nSpinner widgets provide a compact way to navigate a bounded integer or float parameter. Spinner\nwidgets are the default widgets used for unbounded int16 parameters. The spinner widget cannot\nbe used with an unbounded floating point or int32 parameter.\nFigure 34 - WIDGET_SPINNER hint\nNotes The range of the parameter: abs(max \xe2\x80\x93 min) x precision cannot exceed the\nmaximum size of a signed integer for sliders and spinners.\nTo aid in touch screen environments, clicking and dragging a spinner up/down will\nincrease/decrease its value.\nProperties\nProperty Type Default Description\nw.keyboard Integer \xe2\x80\x93 Disables the soft keyboard or\ndisabled\nnumber pad to enter characters when\nusing a touchscreen.\nDashBoard CustomPanel Development Guide DashBoard Data Model \xe2\x80\xa2 37WIDGET_TEXTBOX (6)\nThis hint specifies that a simple text entry field should be used for a number. The information\nentered into the text field is forced to conform to the constraints provided by the parameter. This is\nthe default widget used for unbounded floating point parameters.\nFigure 35 - WIDGET_TEXTBOX hint\nWIDGET_IP_ADDRESS (14)\nDisplays an IPv4 Address format for a 32-bit integer. Only works with unbounded INT32\nparameters.\nFigure 36 - WIDGET_IP_ADDRESS hint\nWIDGET_AUDIO_METER (19)\nThis hint specifies that the number shall be displayed as a vertical audio meter. The number of\nred/yellow/green segments is fixed.\nFigure 37 - WIDGET_AUDIO_METER hint\nWIDGET_TIMER (21)\nThis hint applies only to integer parameters with RANGE_STEP_CONSTRAINT constraints. The\nparameter is displayed as a label and counts down if minVal < 0 or up if minVal >= 0. Negative\nnumbers are not displayed. The step size is used to specify the number of ticks-per-second to use\nand must be a number between 1 and 1000.\nWhen the maximum or minimum values are reached, the timer will stop counting.\nTo initialize the counter to a specific value but not have it start counting:\n\xe2\x80\xa2 If the minimum value is negative and the parameter value is positive, the timer will display\nabsolute(min) \xe2\x80\x93value but will not count.\n\xe2\x80\xa2 If the minimum value is positive and the parameter value is negative, the timer will display\nabsolute(value) but will not count.\n38 \xe2\x80\xa2 DashBoard Data Model DashBoard CustomPanel Development GuideThe timer can be reset or synchronized by sending a REPORT_PARAM message with the new\nparameter value (typically \xe2\x80\x9c1\xe2\x80\x9d).\nExamples:\n\xe2\x80\xa2 min=-600, max=0, step=1 (count from 10:00 to 0:00 showing each second).\n\xe2\x80\xa2 min=0, max=600, step=1 (count from 0:00 to 10:00 showing each second)\n\xe2\x80\xa2 min=0, max=1000,step=1000 (count from 0:00:000 to 0:01:000 showing each millisecond)\nFigure 29 shows an INT_32 parameter with a WIDGET_TIMER hint, a precision of 1000, and a\nvalue of 13794088.\nFigure 38 - WIDGET_TIMER hint\nWIDGET_HEX_SPINNER (28)\nDisplays a spinner (entry field plus up/down arrows). Display the value in Base 16.\nFigure 39 - WIDGET_HEX_SPINNER hint\nNotes Due to the lack of unsigned data types in OGP, hex spinners do not function\nproperly in the following circumstances:\n- An INT16 parameter with any values in the range of 0x8000 \xe2\x80\x93 0xFFFF\n- An INT32 parameter with any values in the range of 0x80000000 \xe2\x80\x93 0xFFFFFFFF\n- To allow a spinner to function in the range from 0x0000 \xe2\x80\x93 0xFFFF, it is\nrecommended that an INT32 parameter be used.\nWIDGET_ABSOLUTE_POSITIONER (29)\nPosition a value in 2-D space.\n\xe2\x80\xa2 When used as an INT16, the 8 LSBs represent the X coordinate and the 8 MSBs represent the\nY coordinate.\n\xe2\x80\xa2 When used as an INT32, the 16 LSBs represent the X coordinate and the 16 MSBs represent\nthe Y coordinate.\nA crosshair in a box is dragged to the absolute position of the value in 2-D space. The ratio of\nwidth to height is the ratio of xmax-xmin to ymax-ymin with the assumption that the screen pixels\nare square. Values are updated and sent to the device as the crosshair is dragged.\nFigure 40 - WIDGET_ABSOLUTE_POSITIONER hint\nWIDGET_CROSSHAIR (30)\nPosition a value in 2-D space.\nDashBoard CustomPanel Development Guide DashBoard Data Model \xe2\x80\xa2 39\xe2\x80\xa2 When used as an INT16, the 8 LSBs represent the X coordinate and the 8 MSBs represent the\nY coordinate.\n\xe2\x80\xa2 When used as an INT32, the 16 LSBs represent the X coordinate and the 16 MSBs represent\nthe Y coordinate.\nA crosshair that snaps to the center when released makes changes in +/- X, +/- Y relative to the\noffset from the center. The ratio of width to height is the ratio of xmax-xmin to ymax-ymin.\nValues are updated and sent to the device as the crosshair is dragged.\nFigure 41 - WIDGET_CROSSHAIR hint\nWIDGET_JOY_STICK(34)\nPosition a value in 2-D space.\n\xe2\x80\xa2 When used as an INT16, the 8 LSBs represent the X coordinate and the 8 MSBs represent the\nY coordinate.\n\xe2\x80\xa2 When used as an INT32, the 16 LSBs represent the X coordinate and the 16 MSBs represent\nthe Y coordinate.\nDisplays a joystick and modifies the X,Y values as the joystick is dragged north, south, east, and\nwest of the center.\nFigure 42 - WIDGET_JOY_STICK hint\nWIDGET_COLOR_CHOOSER(23)\nDisplay a color chooser as an element in the UI. Changes made to the color chooser are\nimmediately sent to the device. Note that the color chooser provides control for Hue, Saturation,\nLightness, but color values are INT32 values in ARGB format.\n40 \xe2\x80\xa2 DashBoard Data Model DashBoard CustomPanel Development GuideFigure 43 - WIDGET_COLOR_CHOOSER hint\nWIDGET_COLOR_CHOOSER_POPUP(33)\nDisplay a combo box control showing the \xe2\x80\x98current\xe2\x80\x99 color. On click, show the color chooser.\n\xe2\x80\xa2 If \xe2\x80\x9cLive\xe2\x80\x9d is togged on, update the parameter value immediately.\n\xe2\x80\xa2 If \xe2\x80\x9cLive\xe2\x80\x9d is toggled off, update the parameter value when the popup is closed.\nColor values are INT32 values in ARGB format.\nFigure 44 - WIDGET_COLOR_CHOOSER hint\nDashBoard CustomPanel Development Guide DashBoard Data Model \xe2\x80\xa2 41WIDGET_GRAPH (256)\nThe graph widget provides a plot graph which tracks the value of a numeric parameter over time.\nFigure 45 - WIDGET_GRAPH hint\nA parameter utilizing a WIDGET_GRAPH widget may also specify additional configuration\nparameters in the config object of the parameter.\nProperties\nProperty Type Default Description\nw.time Integer Sets the timescale of the plot. If set to 0,\nthe timescale will adapt to display entire\nchange history.\nw.grid String Sets the color of the gridlines\nw.plotfg String Sets the color of the plot foreground\nw.plotbg String Sets the color of the plot background\nw.hidelegend Boolean \xe2\x80\x93 Legend is not shown\ntrue\n\xe2\x80\x93 Legend is shown\nfalse\nw.hidex Boolean \xe2\x80\x93 X-axis scale is not shown\ntrue\n\xe2\x80\x93 X-axis scale is shown\nfalse\nw.hidey Boolean \xe2\x80\x93 Y-axis scale is not shown\ntrue\n\xe2\x80\x93 Y-axis scale is shown\nfalse\nw.autoadvance Booelan\ntrue\n\xe2\x80\x93 graph will auto-update every 1\nsecond\n\xe2\x80\x93 graph will only update upon\nfalse\nparameter change.\n42 \xe2\x80\xa2 DashBoard Data Model DashBoard CustomPanel Development GuideWIDGET_EQ_GRAPH (46)\nThe EQ graph widget provides a a visual representation of how bands effect frequencies across a\ngiven range. This advanced widget allows you to make an EQ graph, using parameters from any\ndevice that talks to DashBoard. The EQ graph creates a graphical representation of parametric\nequalization. For example, you can add a Ross Video Carbonite switcher to DashBoard as a\ndevice, and then measure bands from the Carbonite\xe2\x80\x99s parameters. The graphic below shows an EQ\ngraph that is pulling parameters from a Carbonite switcher, and the equalizer settings have been\nmapped to slider controls to make adjustments from the DashBoard CustomPanel.\nEach band has an associated frequency, range, and Q value, if required.\nThe filter that each band is applying can be specified in the configuration overrides. If the filter is\nnot defined, then it will default to a peak filter.\nFigure 46 - WIDGET_EQ_GRAPH hint\nA parameter utilizing a WIDGET_EQ_GRAPH widget must also specify additional configuration\nparameters in the config object of the parameter. For more details see the DashBoard User\nGuide.\nProperties\nProperty Type Default Description\nw.linecolor #[RGB Value] Sets the color of the graph point to point\nline.\nw.filters [ String Array] Sets the filter for each band, where the\npossible values are lowshelf, peak or\nhighshelf. One filter per point.\nw. pointnames [String Array] Sets the name on each graph point, for\nexample:\nw.colorselected #[RGB Value 1, 2, 3, 4\nArray]\nw.colorunselected #[RGB Value Sets the color for each point when it\xe2\x80\x99s\nArray] selected. For example:\nw.linethickness [Integer] #ffd966,#c27ba0,#6d9eeb,#93c47d\nw.graphfontsize [Integer] Sets the color for each point when it\xe2\x80\x99s not\nselected. For example:\nDashBoard CustomPanel Development Guide DashBoard Data Model \xe2\x80\xa2 43Property Type Default Description\nw.pointfontsize [Integer] #ffd966,#c27ba0,#6d9eeb,#93c47d\nw.pointwidth [Integer] Sets the thickness of the graph point to\npoint line.\nw.pointheight [Integer] Sets the font size of the text used on the\ngraph title, axis labels and axis entries.\nw.xaxis [String] Sets the font size for the point names.\nw.yaxis [String] Sets the width of the points.\nw.xaxisentries [String Array] Sets the height of the points.\nw.yaxisentries [String Array] Sets the x axis label.\nw.pointamount [Integer] Sets the y axis label.\nw.frequencyshift [Integer] Sets the line marks on the x axis. For\nexample:\n20,50,100,200,500,1000,2000,5000,10000\nw.title [String] Sets the line marks on the y axis. For\nexample:\nHints for String Parameters\nThe following widget hints may be used for String parameters (in addition to the separators and\nlayout hints defined above). The last two hints apply only to a String parameter using the reserved\nobjectID 0xFF01.\nWidget Name Value Description\nWIDGET_TEXT_ENTRY 3 Displays a normal text entry field. This is the\ndefault for editable String parameters.\nWIDGET_PASSWORD 4 Displays an entry field for passwords (text\nentered in this field is obscured).\nWIDGET_COMBO_ENTRY 11 Displays an entry field together with a\ndropdown list of selectable items. This is\napplicable only with the STRING_CHOICE\nconstraint.\nWIDGET_COLORED_DOT 12 Displays a colored icon. The icon color is\nspecified using a tag in the text string.\nWIDGET_RICH_LABEL 13 Displays a read-only multi-line text field with\nHTML formatting.\nWIDGET_MULTILINE_TEXT_ENTRY 14 Displays a multi-line text editor.\nWIDGET_NAME_OVERRIDE_APPEND 0 Special hint only for objectID 0xFF01 \xe2\x80\x93\ncauses this string to be appended to the\ndisplayed product name\nWIDGET_NAME_OVERRIDE_REPLACE 1 Special hint only for objectID 0xFF01 \xe2\x80\x93\ncauses this string to replace the product\nname to be displayed\n44 \xe2\x80\xa2 DashBoard Data Model DashBoard CustomPanel Development GuideWIDGET_TEXT_ENTRY (3)\nThis is a text entry field used to enter String values. This is the default widget used with editable\nString parameters. It is very important to correctly set the length of the String with this widget as\nthe length affects the width of the text field. In DashBoard the value is sent to the device when the\nuser hits \xe2\x80\x98Enter\xe2\x80\x99 or changes focus to a different control on the screen.\nFigure 47 - WIDGET_TEXT_ENTRY hint\nProperties\nProperty Type Default Description\nw.keyboard Integer \xe2\x80\x93 Disables the soft keyboard or\ndisabled\nnumber pad to enter characters when\nusing a touchscreen.\nWIDGET_PASSWORD (4)\nThis is a text entry field used to enter passwords. When the device receives a set message for a\nparameter using this hint, a device could send an empty string back to the device to clear the\npassword field. Text in the password field is sent when it has changed from the value reported\nfrom the device and the user hits \xe2\x80\x9cEnter\xe2\x80\x9d or moves focus to another control.\nFigure 48 - WIDGET_PASSWORD hint\nDashBoard CustomPanel Development Guide DashBoard Data Model \xe2\x80\xa2 45WIDGET_COMBO_ENTRY (11)\nThis displays a text entry field along with a dropdown list. This option is available only for String\nparameters having a STRING_CHOICE constraint. The user may select an option from the\ndropdown list, or can type any value in the entry field. The text is sent to the device when a\ndropdown item is selected, when the user presses \xe2\x80\x9cEnter\xe2\x80\x9d or moves the focus after typing a value.\nFigure 49 - WIDGET_COMBO_ENTRY hint, selecting from the dropdown list\nWIDGET_COLORED_DOT (12)\nThis displays a colored icon. This should not be confused with Alarm parameters which have a\nsimilar appearance. The tag specifies the 24-bit RGB color index of the icon in hex, in the format\n<#RRGGBB>. If the string does not contain a valid color tag, the icon is drawn but not filled (i.e.\nbackground shows through).\nFigure 50 - WIDGET_ICON_DISPLAY hint, and value \xe2\x80\x9c<#3F3FFF>\xe2\x80\x9d\nWIDGET_RICH_LABEL (13)\nThis displays a read-only multi-line text field, and formats the text according to the HTML\nformatting tags embedded in the text. Total string length including tags is limited to 250 bytes.\nThe display uses html support within the java display object, so the exact appearance of the label\nmay vary depending on operating system and java version.\nFigure 51 - WIDGET_RICH_LABEL hint\nWIDGET_MULTILINE_TEXT_ENTRY (14)\nThis displays a multi-line text entry field. The amount of data a user can input into the field is\nlimited by the maximum length specified by the parameter. The size of the field is the same\nregardless of the maximum number of bytes the user is allowed to enter. If the parameter\xe2\x80\x99s value\nspans more lines than the number of rows represented by the text field, a vertical scrollbar is\nshown to allow the user to scroll. Text will be wrapped to avoid horizontal scrollbars.\n46 \xe2\x80\xa2 DashBoard Data Model DashBoard CustomPanel Development GuideFigure 52 - WIDGET_MULTILINE_TEXT_ENTRY hint\nWIDGET_NAME_OVERRIDE_APPEND (0)\nThis is a special hint ONLY FOR OID 255.1 (0xFF01). This causes the value of the String\nparameter with OID 255.1 to be appended to the end of the device name in DashBoard.\nFigure 53 shows the result of setting parameter 255.1 to " (XPF)" with a\nWIDGET_NAME_OVERRIDE_APPEND hint.\nFigure 53 - WIDGET_NAME_OVERRIDE_APPEND hint\nWIDGET_NAME_OVERRIDE_REPLACE (1)\nThis is a special hint ONLY FOR OID 255.1 (0xFF01). This causes the value of the String\nparameter with OID 255.1 to be displayed as the device name instead of the product name (OID\n0x0105) in DashBoard. This is the only supported method for changing a product name\ndynamically. Devices should never modify their base product name (OID 0x0105); DashBoard,\nDataSafe, and User Rights all depend on the base product name remaining fixed. Change of the\nproduct name is assumed to mean that the user has physically removed a card, and has replaced it\nwith a different type of card.\nFigure 54 shows the result of setting parameter 255.1 to "My Device Name" with a\nWIDGET_NAME_OVERRIDE_REPLACE hint.\nDashBoard CustomPanel Development Guide DashBoard Data Model \xe2\x80\xa2 47Figure 54 - WIDGET_NAME_OVERRIDE_REPLACE hint\nHints for STRUCT Types\nStruct parameters may utilize the following widget types:\nWIDGET_TABLE (36)\nThe table widget displays a line for each element in a STRUCT_ARRAY. Column headings are\nspecified by the name property of each struct element. Each element of the struct is given a\ncolumn in the table.\nFigure 55 - WIDGET_TABLE hint\nA parameter using a WIDGET_TABLE widget may also specify additional configuration\nparameters in the config object of the parameter.\n48 \xe2\x80\xa2 DashBoard Data Model DashBoard CustomPanel Development GuideProperties\nProperty Type Default Description\nw.localselection Boolean false true \xe2\x80\x93 edits in the table row do not\nupdate backing parameter; changes in the\nbacking parameter do not update the\nselected row(s).\n\xe2\x80\x93 backing parameter and table row\nfalse\nchanges track with each other.\nw.scrollselection Boolean true true \xe2\x80\x93 auto scroll to the selected row\n\xe2\x80\x93 do not scroll to the selected row\nfalse\nw.reorder Boolean false true \xe2\x80\x93 allow drag to reorder values\n\xe2\x80\x93 do not allow drag to reorder\nfalse\nvalues\nw.rowstyleparam String none OID of string array parameter providing\nstyle information (background, foreground,\nfont, font size, etc.) for each row.\nw.selectionparam String none OID of integer parameter that will be\npopulated with the index of a selected row.\nw.rowaccessparam String none OID of integer array parameter which\ndetermines read-only access for each row.\n(0 = read-only, 1 = read-write). If not\nspecified, all rows are read-write.\nw.rowheight Number automatic Sets the row height. Specified in pixels\nw.colwidth.n Number automatic Sets the width of the nth column. First column\nindex is 0.\nw.colminwidth.n Number automatic Sets the minimum width of the nth column.\nFirst column index is 0.\nw.hscroll Boolean false true \xe2\x80\x93 show horizontal scrollbar\n\xe2\x80\x93 do not show horizontal scrollbar\nfalse\nw.alwaysscroll Boolean false true \xe2\x80\x93 vertical scrollbar always shown\n\xe2\x80\x93 vertical scrollbar only shown only\nfalse\nwhen required\nw.hgrid Boolean true true \xe2\x80\x93 display horizontal grid lines\n\xe2\x80\x93 do not display horizontal grid\nfalse\nlines\nw.vgrid Boolean true true \xe2\x80\x93 display vertical grid lines\n\xe2\x80\x93 do not display vertical grid lines\nfalse\nDashBoard CustomPanel Development Guide DashBoard Data Model \xe2\x80\xa2 49Data Types\nOGP supports a number of parameter data types as summarized in the table below. For OGP\nmessaging, the OGP Type value is a numerical index to indicate the parameter\xe2\x80\x99s data type. For\nJSON messaging, the Data Type Name is used to indicate the parameter type.\nData Type Name OGP Data Size Description\ntype (bytes)\nINT16 2 2 16-bit signed integer (INT16)\nINT32 4 4 32-bit signed integer (INT32)\nFLOAT32 6 4 32-bit IEEE single-precision floating point\nnumber\nSTRING 7 variable null-terminated UTF-8 string\ndata_size = maximum permitted number of\ncharacter data bytes\nINT16_ARRAY 12 2 * len array of 16-bit integers\ndata_size = 2 * number of elements\n(total length of the array in bytes)\nINT32_ARRAY 14 4 * len array of 32-bit integers\ndata_size = 4 * number of elements\n(total length of the array in bytes)\nFLOAT32_ARRAY 16 4 * len array of 32-bit floats\ndata_size = 4 * number of elements\n(total length of the array in bytes)\nSTRING_ARRAY 17 variable null-terminated UTF-8 strings\nprecision = maximum string length for any\nelement in the array\ndata_size = maximum number of character\ndata bytes\nSTRUCT n/a variable User-defined data structure. (DashBoard\n7.0+)\nSTRUCT_ARRAY n/a variable Array of User-defined data structures.\n(DashBoard 7.0+)\nBINARY_PARAM 18 variable array of binary data of type unknown to\nDashBoard.\nEndianness\nAll numeric data encoding within OGP is in Big Endian format. Therefore, highest order bytes of\nmulti-byte numeric values are transmitted first.\nNumber Encoding\nSigned integer data types are binary encoded 2\xe2\x80\x99s complement numbers. Valid ranges for integer\ntypes are:\nResponse Min Max\nUINT8 0 255\nUINT16 0 65535\nINT16 -32,768 32,767\nINT32 -2,147,483,648 2,147,483,647\n50 \xe2\x80\xa2 DashBoard Data Model DashBoard CustomPanel Development GuideFloating point data types are encoded as 32-bit IEEE (single-precision) floating point numbers.\nThis encoding is broken down as:\n\xe2\x80\xa2 Sign: 1 bit\n\xe2\x80\xa2 Exponent: 8 bits; Range -126 to +127\n\xe2\x80\xa2 Base: 23 bits\n\xe2\x80\xa2 Data size is the number of bytes occupied by the value.\nString Encoding\nAll string data encoding within OGP is in UTF-8 format. Strings are preceded by a length count\nbyte, and are followed by a null terminating byte.\nExternal Data Objects\nTo support more complex interaction with the device than is possible with parameters, DashBoard\nincludes a set of general data objects called External Objects. Each object is identified by a 2-byte\nobjectID (like parameters), and contains a type identifier and object-specific data. External object\nOIDs can overlap with parameter OIDs. The range of OIDs from 0xFE00 to 0xFFFF is reserved\nfor future use.\nExternal objects include an object type to indicate the type of data they encapsulate. The supported\nobject types are:\nobjtype Description\n1 Constraint\n2 File\n3 Image\n4 OGLML or XML document\nConstraint\nParameter constraint information can be taken outside of the parameter descriptor and moved into\nan external object. This is useful, for example if there is a choice constraint with a large number of\noptions, or a common constraint is to be applied to multiple parameters. The constraint field in the\nparameter descriptor simply refers to an external object ID.\nAny constraint type can be externalized except the external constraint type itself. An external\nconstraint object can be shared by multiple parameters (the external object will be requested only\nonce for all parameters which share the constraint). The object type of the external constraint must\nbe 1, and the object data must be encoded in the same format as used for an embedded constraint.\nAn external object that is not object type 0x0001 will be treated as a NULL constraint\n(unconstrained). Just like constraints declared in the parameter descriptor, external constraints\nmust have the same data type as the referring parameter.\nArbitrary File\nArbitrary binary data can be sent from the device to DashBoard as a file download. These files are\nrequested by supplying an integer parameter with a WIDGET_FILE_DOWNLOAD widget hint\nand a choice constraint. The numeric value of the parameter must match the OID of an external\nobject containing the file data to download. The string value of the choice constraint is used to\nDashBoard CustomPanel Development Guide DashBoard Data Model \xe2\x80\xa2 51supply a file name for the download. To upload the file data back to the device, the data must use\nthe standard openGear file header information defined in the section\nImage\nImages may be encapsulated within an External Object to be displayed in the device editor (via\nOGLML) or to be used to override its icon in DashBoard. The icon may include a status indicator\nor DashBoard can overlay a status indicator over the provided icon. Icons can be provided either\nby a URL or embedded directly in the external object.\nImages must be formatted as JPEG, GIF, or PNG. Icons must be 16x16.\nOGLML Descriptor or Index XML\nDashBoard includes powerful feature for defining the on-screen layout of a device\xe2\x80\x99s configuration\npage in DashBoard. These configurations are defined in an OGLML Document. These documents\ncan be retrieved from a web server or sent to DashBoard in an external object.\nOGLML Documents\nThis section includes the following topics:\n\xe2\x80\xa2 Containers\n\xe2\x80\xa2 Contexts\n\xe2\x80\xa2 OGLML Document Structure\n\xe2\x80\xa2 OGLML URLs\n\xe2\x80\xa2 OGLML Descriptor Format\nContainers\nAll UI elements must be placed within a container. The container dictates how UI components are\nlaid out within the DashBoard UI. There are several container types which provide different\noptions on component layout. Layout containers may be nested.\nBy default, PanelBuilder will create a top-level abs container, and all elements (including nested\ncontainers) are placed within this top-level container.\nContexts\nContexts define scope within an OGLML document. PanelBuilder creates OGLML documents\nwith a default context named \xe2\x80\x9c \xe2\x80\x9d. If multiple devices are linked to an OGLML\nopengear\ndocument, each device has its own separate context. Therefore, elements defined within the\ncontext of one device are not visible within another device\xe2\x80\x99s context.\nOGLML Document Structure\nThe basic structure of the OGLML document is as follows:\n<?xml version="1.0" encoding="UTF-8"?>\n<abs contexttype="opengear">\n52 \xe2\x80\xa2 DashBoard Data Model DashBoard CustomPanel Development Guide<api>\nGlobal code\n</api>\n<meta>\nNon-UI Tags here\n<api>\nGlobal ogScript code\n</api>\n<params>\nParameter declarations\n</params>\n<menus>\nMenu declarations\n</menus>\n<widgets>\nWidget descriptors\n</widgets>\n</meta>\n<ui container>\n<ui elements/>\nui element\n< >\nLocal scope ogScript code\nui element\n</ >\nnested ui container\n< >\nui element/>\n<\n. . .\n</nested ui containter>\n. . .\n</ui container>\n. . .\n</abs>\nDetails about the individual tags are documented in the section OGLML Reference.\nOGLML URLs\nAn OGLML URL can be a standard URL or an external object reference. The fragment\n(\xe2\x80\x9c#name\xe2\x80\x9d) of the URL can optionally provide the ID of a child element inside of the OGLML\ndocument to reference. An external object reference URL has the form \xe2\x80\x9ceo://0x1234\xe2\x80\x9d where\n0x1234 is the external object ID of the external object containing the OGLML descriptor.\nOGLML URL examples:\n\xe2\x80\xa2 http://myhost/mydocument.xml\n(include the entire document at the given URL)\n\xe2\x80\xa2 https://10.0.100.1/document.xml#myid\n(include the element with id=\xe2\x80\x9dmyid\xe2\x80\x9d from the given URL)\n\xe2\x80\xa2 eo://0xAB12\n(load the OGLML descriptor from the external object with ID 0xAB12)\nDashBoard CustomPanel Development Guide DashBoard Data Model \xe2\x80\xa2 53\xe2\x80\xa2 eo://0xAB12#my-other-id\n(load the OGLML descriptor from the external object with ID 0xAB12 and select sub-element\nwith id=\xe2\x80\x9dmy-other-id\xe2\x80\x9d)\nOGLML Descriptor Format\nThe first byte of an OGLML Descriptor defines the type of information to follow.\nNo OGLML Descriptor (0x00)\nThis is used when there is no OGLML document referenced by this descriptor.\nField length Description\ndesctype 1 (uint8) 0x00\ncontent 0 No content is provided in this case\nDescriptor provided by external object (0x01)\nThis is used when the descriptor is contained in an external object.\nField length Description\ndesctype 1 (uint8) 0x01\ncontent 2 The external object ID of the object containing the OGLML Descriptor\n(uint16)\nOGLML Document provided by URL (0x02)\nThe OGLML document is hosted on a web server. The descriptor provides the URL of the\nOGLML Document.\nField length Description\ndesctype 1 (uint8) 0x02\nurllen 1 (uint8) The length of the URL to follow including the null terminator\nurl urllen The null-terminated URL of the external object. This must begin with\n\xe2\x80\x9chttp://\xe2\x80\x9d or \xe2\x80\x9chttps://\xe2\x80\x9d. The content on the webserver can be\nuncompressed or follow web conventions for zip or deflate compression.\nfile:// URLs may also be used but this should generally only be for\ndevelopment purposes and not actually on a released device.\nDescriptor provides the OGLML Document in-line (0x03)\nThe OGLML File document immediately follows the descriptor type field.\nField length Description\ndesctype 1 (uint8) 0x03\ncontent * OGLML XML File Content\nDescriptor provides a GZipped OGLML Document in-line (0x04)\nThe OGLML document is provided immediately following the descriptor type field (document is\ncompressed in GZip format).\nField length Description\ndesctype 1 (uint8) 0x04\ncontent * GZipped OGLML XML File Content\n54 \xe2\x80\xa2 DashBoard Data Model DashBoard CustomPanel Development GuideDescriptor provides a Deflate OGLML Document in-line (0x05)\nThe OGLML document is provided immediately following the descriptor type field (document is\ncompressed in Deflate format).\nField length Description\ndesctype 1 (uint8) 0x05\ncontent * Deflate OGLML XML File Content\nCustom Widgets\nCustom widgets are user-defined controls within a DashBoard editor. These allow device\ndesigners and CustomPanel developers to reuse repeated elements within an OGLML document.\nComplex UI behaviour can be coded into the widget, which is hidden from the UI developer.\nCustom Widgets allow the designer to design an element consisting of multiple controls, OGLML\nmarkup tags and ogScript. This element can then be instantiated multiple times within an OGLML\ndocument. Widgets may be defined within an OGLML document or made globally available in\nDashBoard.\nWidgets allow configuration parameters exposed to tailor the look, feel and behaviour. These\nconfiguration parameters are also available through the PanelBuilder GUI, allowing simple\ncustomization of the widget.\nWidgets are defined by creating a Widget Descriptor, which consists of a section\nOGLML/ogScript code that defines the controls. Additionally, a configuration block may be\ndefined which creates a configuration page for the widget within PanelBuilder.\nCreating Widgets\nWidget Descriptor Structure\nThe widget descriptor has a structure as outlined below:\n<widgetdescriptor id="widget-id">\n<config>\n<params>\nConfiguration parameters here\n</params>\n<oglml>\nOptional OGLML markup for configuration editor\n</oglml>\n</config>\n<oglml>\n<meta>\n<params>\nPrivate parameter declarations\n</params>\n<api>\nPrivate ogScript functions\n</api>\nDashBoard CustomPanel Development Guide DashBoard Data Model \xe2\x80\xa2 55<meta>\nlayout-container\n< >\nUI elements\nlayout-container\n</ >\n</oglml>\n</widgetdescriptor>\nOGLML Block\nThe OGLML section (encapsulated within an tag) contains the OGLML document to\n<oglml>\ncreate the widget. It may contain and layout container tags in the\n<meta>,<ogscript>,<api>\nsame manner as a standard OGLML document. Note that all declarations within the\n<oglml>\nsection are private to the widget.\nConfig Block\nThe config section (encapsulated within a tag) contains OGLML document that creates\n<config>\na configuration page for the widget. The configuration page is displayed within the Edit\nComponent dialog in PanelBuilder. By default, the default openGear layout will be used to present\nany parameters declared within a tag in the config block:\n<params>\n<widgetdescriptor id="alarmgrid">\n<config>\n<params>\n<param access="1" name="String 1" oid="str1" type="STRING"\nvalue="First"/>\n<param access="1" name="String 2" oid="str2" type="STRING"\nvalue="Second"/>\n<param access="1" name="String 3" oid="str3" type="STRING"\nvalue="Third"/>\n<param access="1" name="String 4" oid="str4" type="STRING"\nvalue="Fourth"/>\n<param access="1" name="String 5" oid="str5" type="STRING"\nvalue="Fifth"/>\n<param access="1" name="String 6" oid="str6" type="STRING"\nvalue="Sixth"/>\n</params>\n</config>\n<oglml>\n<simplegrid cols="3" rows="2">\n<param height="40" oid="str1" widget="12" width="200"/>\n<param height="40" oid="str2" widget="12" width="200"/>\n<param height="40" oid="str3" widget="12" width="200"/>\n<param height="40" oid="str4" widget="12" width="200"/>\n<param height="40" oid="str5" widget="12" width="200"/>\n<param height="40" oid="str6" widget="12" width="200"/>\n</simplegrid>\n</oglml>\n</widgetdescriptor>\n56 \xe2\x80\xa2 DashBoard Data Model DashBoard CustomPanel Development GuideFigure 56 \xe2\x80\x93 Widget Configuration (Default Layout)\nHowever, OGLML markup may be added by specifying it within an block within the\n<oglml>\nconfig block.\nNote If an <oglml> block is specified within the <config> section, only parameters\nincluded in the <oglml> block will be displayed in the PanelBuilder \xe2\x80\x9cEdit\nComponent\xe2\x80\x9d dialog.\nThe following is an example of a widget descriptor incorporating an OGLML configuration\nmarkup. In the example, a container is used to arrange configuration parameters\n<simplegrid>\ninto a 3x2 grid.\n<widgetdescriptor id="alarmgrid-oglml">\n<config>\n<params>\n<param access="1" name="String 1" oid="str1" type="STRING"\nvalue="First"/>\n<param access="1" name="String 2" oid="str2" type="STRING"\nvalue="Second"/>\n<param access="1" name="String 3" oid="str3" type="STRING"\nvalue="Third"/>\n<param access="1" name="String 4" oid="str4" type="STRING"\nvalue="Fourth"/>\n<param access="1" name="String 5" oid="str5" type="STRING"\nvalue="Fifth"/>\n<param access="1" name="String 6" oid="str6" type="STRING"\nvalue="Sixth"/>\n</params>\n<oglml>\n<simplegrid cols="3" rows="2">\n<param height="40" oid="str1" widget="12" width="200"/>\n<param height="40" oid="str2" widget="12" width="200"/>\n<param height="40" oid="str3" widget="12" width="200"/>\n<param height="40" oid="str4" widget="12" width="200"/>\n<param height="40" oid="str5" widget="12" width="200"/>\n<param height="40" oid="str6" widget="12" width="200"/>\n</simplegrid>\n</oglml>\nDashBoard CustomPanel Development Guide DashBoard Data Model \xe2\x80\xa2 57</widgetdescriptor>\nFigure 57 \xe2\x80\x93 Widget Configuration (OGLML layout)\nIf the widget descriptor includes a structtype attribute, PanelBuilder will use this as a filter to\nonly offer the widget for insertion if a struct parameter exists with matching structtype attribute.\nWidget Samples\nNumeric Keypad\nThis example creates a reusable control which presents a numeric keypad. The keypad accepts\nparameters to map it to a specific OID to update, as well as name and a default value.\nFigure 58 - Keypad Custom Widget\nThe widget also defines a custom configuration panel, which is presented within PanelBuilder\xe2\x80\x99s\n\xe2\x80\x9cEdit Component\xe2\x80\x9d dialog.\nFigure 59 - Keypad Config Dialog\n58 \xe2\x80\xa2 DashBoard Data Model DashBoard CustomPanel Development GuideThe widget descriptor to generate this widget is shown below. Comments have been added before\nvarious sections of the code to identify their functionality.\nThe block defines four parameters:\nconfig\n\xe2\x80\xa2 \xe2\x80\x93 OID whose value the punchpad will manipulate\nExt.Punch.Name\n\xe2\x80\xa2 \xe2\x80\x93 Name to display in the title bar of the widget\nExt.Punch.DisplayName\n\xe2\x80\xa2 \xe2\x80\x93 Value to set if the DFLT button is pressed\nExt.Punch.Default\n\xe2\x80\xa2 \xe2\x80\x93 Enables/Disables the DFLT button\nExt.Punch.DefaultEnabled\nThere is an block within the section to specify the layout of the configuration\noglml config\nparameters in the Edit Component dialog.\nThis widget implements an ogScript function, to update the param value as the user\naddDigit(),\ntypes in the keypad.\nThe section lays out the keypad using a table container, and hooks the\noglml addDigit()\nfunction to the buttonpress handler for each digit button.\n<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>\n<widgets>\n<widgetdescriptor id="com.rossvideo.widget.punchpad v3"\nicon="com.rossvideo.punchpad.png" inheritsrc="true" name="Punchpad\nv3">\n<!--Configuration section starts here-->\n<config>\n<!-- Variables that appear in the edit mode for the grid file\nand that are part of the declaration for the widget -->\n<!\xe2\x80\x94Config parameter declarations start here-->\n<params>\n<param access="1" maxlength="0" name="OID To use"\noid="Ext.Punch.Name"\ntype="STRING" value="OID not specified" widget="0"/>\n<param access="1" maxlength="0" name="OID To use"\noid="Ext.Punch.DisplayName" type="STRING"\nvalue="name not specified" widget="0"/>\n<param access="1" constrainttype="INT_NULL"\nname="Ext.Punch.Default"\noid="Ext.Punch.Default" precision="0" strvalue="0"\ntype="INT16"\nvalue="0" widget="0"/>\n<param access="1" constrainttype="INT_CHOICE" name="Default\nEnabled"\noid="Ext.Punch.DefaultEnabled" precision="0"\nstrvalue="On"\ntype="INT16" value="1" widget="8">\n<constraint key="0">Off</constraint>\n<constraint key="1">On</constraint>\n</param>\n</params>\n<!-- Definition for the UI that appears in edit mode -->\nDashBoard CustomPanel Development Guide DashBoard Data Model \xe2\x80\xa2 59<!\xe2\x80\x94Config parameter layout starts here-->\n<oglml>\n<abs height="500" left="0" top="272" width="334">\n<table height="150" left="0" top="0" width="800">\n<tr>\n<label anchor="east" fill="none" insets="0,0,0,5"\nname="OID To Use" weightx="0.0"/>\n<param anchor="west" element="0" fill="both"\noid="Ext.Punch.Name" showlabel="false"\nweightx="1.0" weighty="1.0"/>\n</tr>\n<tr>\n<label anchor="east" fill="none" insets="0,0,0,5"\nname="Title" weightx="0.0"/>\n<param anchor="west" element="0" fill="both"\noid="Ext.Punch.DisplayName" showlabel="false"\nweightx="1.0" weighty="1.0"/>\n</tr>\n<tr>\n<label anchor="east" fill="none" insets="0,0,0,5"\nname="Default Value" weightx="0.0"/>\n<param anchor="west" element="0" fill="both"\noid="Ext.Punch.Default" showlabel="false"\nweightx="1.0"\nweighty="1.0"/>\n</tr>\n<tr>\n<label anchor="east" fill="none" insets="0,0,0,5"\nname="Default Value Enabled" weightx="0.0"/>\n<param anchor="west" element="0" fill="both"\noid="Ext.Punch.DefaultEnabled"\nshowlabel="false"\nweightx="1.0" weighty="1.0"/>\n</tr>\n</table>\n</abs>\n</oglml>\n</config>\n<!-- Definition for the widget UI itself -->\n<oglml>\n<!-- Temporary internal variables to the widget -->\n<!\xe2\x80\x94Local parameter declarations start here-->\n<params>\n<param access="1" maxlength="0" name="Punch.Temp.Number"\noid="Punch.Temp.Number" type="STRING" value=""\nwidget="0"/>\n</params>\n60 \xe2\x80\xa2 DashBoard Data Model DashBoard CustomPanel Development Guide<!-- Global functions for the widget to use -->\n<api id="addDigit" name="addDigit">\nfunction addDigit(digit)\n{\nvar value=params.getValue(\'Punch.Temp.Number\',0);\nvar i;\nif (digit==\'-\')\n{\nif (value[0] != \'-\')\nvalue = \'-\' + value;\nelse\nvalue = value.substring(1);\n}\nelse if (digit == \'.\')\n{\n// is there a \'.\' already?\nfor (i=0;i&lt;value.length;i++)\n{\nif (value[i]==\'.\')\nreturn;\n}\nvalue +=\'.\';\n}\nelse if (value[0] != \'0\')\nvalue += digit;\nelse // first digit is a 0\nvalue = digit;\nparams.setValue(\'Punch.Temp.Number\',0,value);\n}\n</api>\n<style id="TextStyle" name="TextStyle"\nvalue="size:20;font:bold;bg#000000;fg#FFFFFF;"/>\n<abs height="317" left="641" style="bdr:etched;" top="355"\nvirtualheight="317" virtualwidth="371" width="371">\n<abs left="147" top="174"/>\n<!\xe2\x80\x94Title bar begins here-->\n<label height="23" id="Var.Name" left="25"\nname="%value[\'Ext.Punch.DisplayName\'][0]%"\nstyle="size:16;font:bold;txt-align:west;" top="14"\nwidth="105"/>\n<param expand="true" height="32" oid="Punch.Temp.Number"\nright="20"\nshowlabel="false" top="10" width="200"/>\n<!\xe2\x80\x94Table starts here-->\n<table bottom="10" left="20" right="20" top="49">\nDashBoard CustomPanel Development Guide DashBoard Data Model \xe2\x80\xa2 61<!\xe2\x80\x94Table row showing buttons 7, 8, 9, DFLT-->\n<tr>\n<button buttontype="push" colspan="1" fill="both"\nheight="43"\nname="7" rowspan="1" style="style:TextStyle;"\nweightx="1.0" weighty="1.0" width="58">\n<task tasktype="ogscript">addDigit(\'7\');</task>\n</button>\n<button buttontype="push" colspan="1" fill="both"\nheight="43"\nname="8" rowspan="1" style="style:TextStyle;"\nweightx="1.0" weighty="1.0" width="58">\n<task tasktype="ogscript">addDigit(\'8\');</task>\n</button>\n<button buttontype="push" colspan="1" fill="both"\nheight="43"\nname="9" rowspan="1" style="style:TextStyle;"\nweightx="1.0" weighty="1.0" width="58">\n<task tasktype="ogscript">addDigit(\'9\');</task>\n</button>\n<button buttontype="push" colspan="1" fill="both"\nheight="43"\nname="DFLT" rowspan="1" style="style:TextStyle;"\nweightx="1.0" weighty="1.0" width="58">\n<task tasktype="ogscript">\nvar enabled =\nparams.getValue(\'Ext.Punch.DefaultEnabled\',\n0);\nvar value =\nparams.getValue(\'Ext.Punch.Default\',0);\nif (enabled == 0)\nreturn;\nparams.setValue(\'Punch.Temp.Number\', 0,\nvalue.toString());\n</task>\n</button>\n</tr>\n<!\xe2\x80\x94Table row showing buttons 4, 5, 6, CLR-->\n<tr>\n<button buttontype="push" colspan="1" fill="both"\nheight="43"\nname="4" rowspan="1" style="style:TextStyle;"\nweightx="1.0" weighty="1.0" width="58">\n<task tasktype="ogscript">addDigit(\'4\');</task>\n</button>\n<button buttontype="push" colspan="1" fill="both"\nheight="43"\nname="5" rowspan="1" style="style:TextStyle;"\nweightx="1.0" weighty="1.0" width="58">\n<task tasktype="ogscript">addDigit(\'5\');</task>\n62 \xe2\x80\xa2 DashBoard Data Model DashBoard CustomPanel Development Guide</button>\n<button buttontype="push" colspan="1" fill="both"\nheight="43"\nname="6" rowspan="1" style="style:TextStyle;"\nweightx="1.0" weighty="1.0" width="58">\n<task tasktype="ogscript">addDigit(\'6\');</task>\n</button>\n<button buttontype="push" colspan="1" fill="both"\nheight="43"\nname="CLR" rowspan="1" style="style:TextStyle;"\nweightx="1.0" weighty="1.0" width="58">\n<task asktype="ogscript">\nparams.setValue(\'Punch.Temp.Number\', 0, \'0\');\n</task>\n</button>\n</tr>\n<!\xe2\x80\x94Table row showing buttons 1, 2, 3, Enter-->\n<tr>\n<button buttontype="push" colspan="1" fill="both"\nheight="43"\nname="1" rowspan="1" style="style:TextStyle;"\nweightx="1.0" weighty="1.0" width="58">\n<task tasktype="ogscript">addDigit(\'1\');</task>\n</button>\n<button buttontype="push" colspan="1" fill="both"\nheight="43"\nname="2" rowspan="1" style="style:TextStyle;"\nweightx="1.0" weighty="1.0" width="58">\n<task tasktype="ogscript">addDigit(\'2\');</task>\n</button>\n<button buttontype="push" colspan="1" fill="both"\nheight="43"\nname="3" rowspan="1" style="style:TextStyle;"\nweightx="1.0" weighty="1.0" width="58">\n<task tasktype="ogscript">addDigit(\'3\');;</task>\n</button>\n<button buttontype="push" colspan="1" fill="both"\nheight="43"\nname="ENTR" rowspan="2" style="style:TextStyle;"\nweightx="1.0" weighty="1.0" width="58">\n<task tasktype="ogscript">\nparams.setValue(\'%value[\'Ext.Punch.Name\'][0]%\'\n,0,\nparams.getValue(\'Punch.Temp.Numbe\nr\',0));\nparams.setValue(\'Punch.Temp.Number\', 0, \'0\');\n</task>\n</button>\n</tr>\nDashBoard CustomPanel Development Guide DashBoard Data Model \xe2\x80\xa2 63<!\xe2\x80\x94Table row showing buttons +/- 0-->\n<tr>\n<button buttontype="push" colspan="1" fill="both"\nheight="43"\nname="+/-" rowspan="1" style="style:TextStyle;"\nweightx="1.0" weighty="1.0" width="58">\n<task tasktype="ogscript">addDigit(\'-\');</task>\n</button>\n<button buttontype="push" colspan="1" fill="both"\nheight="43"\nname="0" rowspan="1" style="style:TextStyle;"\nweightx="1.0" weighty="1.0" width="58">\n<task tasktype="ogscript">addDigit(\'0\');;</task>\n</button>\n<button buttontype="push" colspan="1" fill="both"\nheight="43"\nname="." rowspan="1" style="style:TextStyle;"\nweightx="1.0" weighty="1.0" width="58">\n<task tasktype="ogscript">addDigit(\'.\');</task>\n</button>\n</tr>\n</table>\n</abs>\n</oglml>\n</widgetdescriptor>\n</widgets>\nDescriptor Location\nDescriptors may be defined within an OGLML document, stored in an external file, or retrieved\ndirectly from a device.\nInline Widget Descriptors\nDescriptors are defined within the block of an OGLML document. Descriptors may not\n<meta>\nbe nested within other widget descriptors. All widget descriptors must be placed within a\nblock within the block.\n<widgets> <meta>\nExternal Widget Descriptor Files\nThe widget descriptor may be stored in an external file. External widget descriptor files have the\nextension .\n.widgetdescriptor\nDashBoard searches for widget descriptors in the following locations:\n\xe2\x80\xa2 Within a subfolder within the folder containing the OGLML document.\nwidgets\n\xe2\x80\xa2 Within the folder inside the DashBoard installation directory.\nwidgets\n\xe2\x80\xa2 A file specified by use of the attribute of a tag.\nbaseurl widgetdescriptor\nDevice-served Widget Descriptors\nA device may specify a URL to retrieve widgets using reserved OID . This mechanism\n0xFF14\n64 \xe2\x80\xa2 DashBoard Data Model DashBoard CustomPanel Development Guidewill retrieve a single file from the specified URL. This is the recommended approach for openGear\ndevice developers.\nParameter Mapping\nParameters declared within the config block are visible to the configuration editor and the widget\nitself. External ogScript functions may access these parameters via the getConfigParams function\nof the widget object.\nParameters declared within the oglml block are private to the widget, and not visible to the config\nblock.\nGlobal parameters are visible within the widget when referenced explicitly.\nWidgets also support relative parameters. When a relative parameter is referenced, its name is\nconcatenated to the string specified in the baseOID attribute of the widget instance.\nParameters within a widget are interpreted as relative if one of the following conditions is met:\n\xe2\x80\xa2 the OID begins with a\n"."\n\xe2\x80\xa2 the parameter has the attribute set to\nrelative true.\n\xe2\x80\xa2 the parameter reference explicitly specifies the baseOID by explicitly prefixing\n%baseoid%\nto the OID of the parameter.\nA parameter may force reference to a local parameter by prepending to the OID of the\n%widget%\nreferenced parameter.\nExample\nThe widgetdescriptor references the parameters and . Global parameters are\nkeyer .clip .gain\ncreated called , , and . The widgets\nkeyer1.clip keyer1.gain keyer2.clip keyer2.gain\nthen may be instantiated as:\n<widget id="key1" widgetid="keyer" baseoid="keyer1"/>\n<widget id="key2" widgetid="keyer" baseoid="keyer2"/>\nThe key1 widget\xe2\x80\x99s parameters and are concatenated with the baseoid thus\n.clip .gain keyer1\nmapping them to the global parameters , and . In a similar manner,\nkeyer1.clip keyer1.gain\nkey2 widget\xe2\x80\x99s parameters map to the global parameters , and .\nkeyer2.clip keyer2.gain\nThe baseoid attribute may be queried and modified dynamically through the ogScript\ngetBaseOID and setBaseOID member functions of the widget object.\nUsing DashBoard Prebuilt Custom Widgets\nDashBoard provides several prebuilt custom widgets that can be customized for use in your\nCustomPanel. You can access these custom widgets from the Widget button on PanelBuilder Edit\nMode toolbar. Check if you can leverage one of the existing widgets, by referring to the list of\nwidgets below:\n\xe2\x80\xa2 ogScript Macro Group \xe2\x80\x94 This widget allows you to create scripts in the Visual Logic\neditor and presents as either a list of buttons or a playlist.\n\xe2\x80\xa2 XPression Desktop Preview 1.0 \xe2\x80\x94 This widget allows you to preview XPression\nplaylists from a DashBoard CustomPanel.\n\xe2\x80\xa2 XPression CountDown 1.0 \xe2\x80\x94 This widget allows you to create an XPression\nCountdown timer.\nDashBoard CustomPanel Development Guide DashBoard Data Model \xe2\x80\xa2 65Simply follow the instructions below to add a custom widget to your DashBoard CustomPanel,\nand then refer to the additional implementation steps for the widget of your choice.\nTo Add a Custom Widget in DashBoard\n1. Open DashBoard and select PanelBuilder Edit Mode.\nThe Edit Mode toolbar appears.\n2. Click the Widget button and click and drag your mouse on the canvas to determine the area\nthat your widget will appear.\n3. Select the widget of your choice from the list of widgets.\n4. Click Ok and then refer to the additional instructions for that widget.\nogScript Macro Group Widget\nThis widget allows you to create scripts using the Visual Logic editor and can be displayed as\neither a list, a playlist, or buttons. The display types are shown below:\nList (Default) Playlist Buttons\n66 \xe2\x80\xa2 DashBoard Data Model DashBoard CustomPanel Development GuideFigure 60: Display Types\nImportant: Unalike most DashBoard components and Device UIs, you can only add scripts to\nthis widget when the panel is live. This is useful if you need to make live changes to scripts\nwithout switching to PanelBuilder Edit Mode. When the panel is live, you can edit this widget\ndirectly by right-clicking and selecting Edit.\nThe figure below illustrates the two areas that you must edit the widget:\nLive Panel: Edit Mode:\nThis opens the Script/Trigger Editor. This opens the Component Editor.\nFigure 61: The live panel\xe2\x80\x99s edit button is shown on the left and the panel in PanelBuilder\nEdit Mode is shown on the right.\nAdditional resources can be found about Visual Logic in the DashBoard User Guide.\nTo Configure the ogScript Macro Group Widget\nThese instructions assume you have already added this widget to your DashBoard CustomPanel\nfrom the Edit Mode toolbar under Widgets and are ready to configure it.\n\xe2\x80\xa2 For more details see, To Add a Custom Widget in DashBoard.\n1. To change the display type, double-click on the widget to open the Component Editor.\nDashBoard CustomPanel Development Guide DashBoard Data Model \xe2\x80\xa2 67From the Widget Attributes tab under Display Type, select Buttons, List (default), or\nPlaylist as your preferred display type and apply your changes.\n2. To navigate to the live panel editor, on the top toolbar click PanelBuilder Edit Mode to\nexit Edit Mode.\nTip: You can also press the keyboard shortkey to switch modes (CTRL + G).\nIf your canvas does not have grid marks, then you are in live mode.\nTo edit the live panel, right-click on the widget and click Edit.\nThe Script/Trigger Information Editor opens.\nWarning: Any changes you apply in this editor will occur immediately since the panel is\nlive.\n3. Once the Script/Trigger Information tab opens, enter the following:\n\xe2\x80\xa2 Name \xe2\x80\x94 Enter the script name.\n\xe2\x80\xa2 Trigger \xe2\x80\x94 Enter the trigger ID.\n\xe2\x80\xa2 Image \xe2\x80\x94 Select an image from the file browser. (optional)\n\xe2\x80\xa2 Background \xe2\x80\x94 Select a background color. (optional)\n4. Open the ogScript Editor tab from the top menu, and create a script using the Visual\nLogic blocks or ogScript palette.\n68 \xe2\x80\xa2 DashBoard Data Model DashBoard CustomPanel Development Guide5. Go back to the Script/Trigger Information tab and click Add Script to add the script\nyou created to the list on the right side.\n6. Click Apply to apply your changes and then close the editor.\n7. To verify that your script works as intended click Run.\nDashBoard CustomPanel Development Guide DashBoard Data Model \xe2\x80\xa2 69XPression Desktop Preview 1.0\nSetting up the XPression Desktop Preview in DashBoard\nBefore you begin, you must have already created your first DashBoard channel and completed the\ninitial configuration to allow streaming through a global style.\nNote: XPression Version 10.0 or later is required.\nTo Configure the XPression Desktop Preview in DashBoard\nThese instructions assume you have already added this widget to your DashBoard CustomPanel\nfrom the Edit Mode toolbar under Widgets and are ready to configure it.\n\xe2\x80\xa2 For more details see, To Add a Custom Widget in DashBoard.\n1. To configure your XPression Desktop Preview Client, open XPression studio v.10.0 or\nlater.\n2. Click Edit from the top menu, select Hardware Setup.\nThe hardware Setup Dialog box opens.\n3. To add a new desktop preview, select the Inputs/Outputs tab and click Add.\n4. Select a new XPression Desktop Preview Client from the Add New FrameBuffer\nBoard and click OK. See the example below:\n5. Set the Host Address to localhost, ensuring both DashBoard and XPression running on\nthe same system.\n70 \xe2\x80\xa2 DashBoard Data Model DashBoard CustomPanel Development Guide6. Select Channel 1 (the channel of the Desktop Preview Client) and click OK to ensure\nthat the channel option does not correlate with the Output Monitors channel. See the\nexample below:\n7. To assign the Desktop Preview Client to a Preview Output Monitor, open the Preview\nMonitors tab and select the Desktop Preview Client as the Up Next Preview Output.\nNote: In the Sequencer Playlist left column, select Output Monitors to view the status the\nstatus of the Desktop Preview Client. The status should show the status is not connected\nbefore the widget is added to the DashBoard panel.\nNow that you have successfully generated a preview for the focused items in XPression,\nyou can proceed to add the XPression Desktop Preview widget to your DashBoard\nCustomPanel.\nDashBoard CustomPanel Development Guide DashBoard Data Model \xe2\x80\xa2 71XPression CountDown 1.0\nThe XPression Countdown widget allows you to monitor a specific framebuffer and layer of\nXPression to determine what take item is currently on that layer, and the amount of time left for\nthat take item.\nTo Configure the XPression CountDown Widget\nBefore you begin, you must set up the CountDown Timer Broadcast on the XPression. Then you\ncan add the widget to your DashBoard CustomPanel.\nNote: XPression Version 10.0 or later is required.\nSet up the CountDown Timer Broadcast on the XPression\n1. To configure your XPression to broadcast the countdown data, open XPression Studio v.10.0\nor later.\n2. Click Edit from the top menu, select Hardware Setup.\nThe hardware Setup Dialog box opens.\n3. To add a countdown timer broadcast, select the Timecode I/O tab and click Add.\n4. Select the Countdown Timer Broadcast and fill in the appropriate Network Settings and\nOptions. Take note of the UDP Port because you need to enter the same port information in\nDashBoard later.\n72 \xe2\x80\xa2 DashBoard Data Model DashBoard CustomPanel Development GuideClick OK.\n5. Verify that the state is Active.\nNow that you have successfully broadcast the Countdown Timer from XPression, you can proceed\nto add the XPression CountDown Timer widget to your DashBoard CustomPanel.\nAdd the Widget to the DashBoard CustomPanel\n1. Open DashBoard and either create a CustomPanel or open an existing one. Select\nPanelBuilder Edit Mode.\nThe Edit Mode toolbar appears.\n2. Click the Widget button and click and drag your mouse on the CustomPanel canvas to\ndetermine the area that your widget will appear.\nDashBoard CustomPanel Development Guide DashBoard Data Model \xe2\x80\xa2 733. Select the XPression Countdown widget.\nClick Ok.\n4. After you have added the XPression CountDown 1.0 widget, double-click to open the\nComponent Editor. The Widget Attributes tab should display the options shown below:\nSelect from the following options:\n\xe2\x80\xa2 UDP Port \xe2\x80\x94 Enter the number of the port that XPression sends the take information\nto.\n\xe2\x80\xa2 Framebuffer \xe2\x80\x94 Enter the number of the framebuffer that you want to listen for.\n\xe2\x80\xa2 Layer \xe2\x80\x94 Enter the layer ID that you want to listen for.\n\xe2\x80\xa2 Show \xe2\x80\x94Select Default Widget to display information for all fields or select an\nindividual field to display a single field.\n74 \xe2\x80\xa2 DashBoard Data Model DashBoard CustomPanel Development Guide\xe2\x80\xa2 Individual Data Style \xe2\x80\x94 If you selected an individual field to be shown in the\nprevious option, then click Edit to select a style for that field. This config option\ndoes not apply to the Default Widget option.\nApply your changes.\n5. Verify that your widget displays the appropriate fields. If you decided to show only one\nindividual data field, then only a label will appear.\nThe example below displays the default widget (showing all available fields):\nTip: If the countdown timer data is not displayed, as shown below, go back to troubleshoot\nthe XPression CountDown Timer Broadcast and ensure that the XPression broadcast and the\nDashBoard widget are set to use the same UDP port.\nDashBoard CustomPanel Development Guide DashBoard Data Model \xe2\x80\xa2 75Custom APIs Within CustomPanels\nYou can use OGLML\xe2\x80\x99s tag to create a library of reusable ogScript code segments (APIs)\n<api>\nwithin a CustomPanel.\nYou can also save ogScript code segments as JavaScript files (.js), and reference them from within\ntags. This allows you to maintain an ogScript library that can be used by any of your\n<api>\nCustomPanels.\nThe tag provides a location for global ogScript code. Contents of the tag are\n<api> <api>\nprocessed by the ogScript compiler directly. Elements within an tag are scoped where they\n<api>\nare declared in the XML; siblings and children of siblings have visibility to elements declared\nwithin the tag.\n<api>\nThe tag should generally be placed within a tag for global ogScript code\n<api> <meta>\nencapsulation. However, ogScript code intended to dynamically generate and modify the XML\nshould be placed in a top-level tag.\n<api>\nSyntax\n<api>\nglobal-scope elements\n</api>\nAttributes\nNone.\nThis section includes information about about how to use the tag effectively. It contains the\n<api>\nfollowing topics:\n\xe2\x80\xa2 Lexical Order and Loading Order\n\xe2\x80\xa2 Enabling Reuse by Keeping APIs in Separate Files\n\xe2\x80\xa2 Managing Scope\nLexical Order and Loading Order\n<api> tags load in lexical order (the order in which they appear in the .grid file) unless the\nattribute is set to . When multiple tags are set to load immediately, they\nimmediate true <api>\nload in lexical order relative to each other, but before any non-immediate tags.\n<api>\nInteraction with On Load Handlers\nDashBoard provides change handlers that are triggered by certain events. The loading of the panel\nis one such event. These are also triggered in lexical order, so, if an handler needs to use\nonload\ncode that is defined in an tag, one of these conditions must be met:\n<api>\n\xe2\x80\xa2 The tag being used by the handler must appear before the handler in the .grid\n<api> onload\nfile.\n\xe2\x80\xa2 The attribute of the tag must be set, to load the API\nimmediate="true" <api>\nimmediately.\nExample to Demonstrate the Effects of Lexical Order and Loading Order\nThis section consists of a five-part example that illustrates the effects of lexical order and loading\norder.\n76 \xe2\x80\xa2 DashBoard Data Model DashBoard CustomPanel Development GuideExample \xe2\x80\x93 Part 1: Simple API Plus an onload Handler\nThe first part of the example has an tag that defines a pretty printer function and prints the\n<api>\nglobal namespace to the debug pane.\nThe tag is followed by an ogscript element that handles the onload event for the enclosing\n<api>\ntop-level canvas.\nHere is the code:\n<abs contexttype="opengear" id="main-abs">\n<meta>\n<api id="api-pretty" name="Pretty Printer">\n// pretty printer\nfunction pretty (obj) {\nreturn JSON.stringify(obj, null, 2);\n}\n// print global namespace to debug pane\nogscript.debug (\'first api:\\r\\n\' + pretty(this));\n</api>\n<ogscript handles="onload" id="main-abs-onload"\nname="Main onload handler" targetid="main-abs">\nogscript.debug (\'First onload handler\');\n</ogscript>\n</meta>\n</abs>\nWhen the panel is loaded, the output appears as follows:\n13:05:10:759: first api:\n{}\n13:05:10:759: First onload handler\nNote that the global name space is reported as an empty object {}\nbecause, although we defined the function pretty(), we didn\'t assign it\nto a var.\nAlso note that the onload prints out after the API. In the next example, the lexical order of the\nonload handler and the tag are reversed.\n<api>\nExample \xe2\x80\x93 Part 2: .grid File with <api/> Defined After <ogscript/> Element\nIn the second part of the example, the tag appears after the ogScript onload handler:\n<api>\n<abs contexttype="opengear" id="main-abs">\n<meta>\n<ogscript handles="onload" id="main-abs-onload"\nname="Main onload handler" targetid="main-abs">\nogscript.debug (\'First onload handler\');\n</ogscript>\nDashBoard CustomPanel Development Guide DashBoard Data Model \xe2\x80\xa2 77<api id="api-pretty" name="Pretty Printer">\n// pretty printer\nfunction pretty (obj) {\nreturn JSON.stringify(obj, null, 2);\n}\n// print global namespace to debug pane\nogscript.debug (\'first api:\\r\\n\' + pretty(this));\n</api>\n</meta>\n</abs>\nWhen the panel is loaded, the output appears as follows:\n13:11:35:480: First onload handler\n13:11:35:491: first api:\n{}\nThe output shows that the lexical order of onload handlers and APIs is significant.\nThe next part of the example adds another tag to the CustomPanel, to put an object into the\n<api>\nglobal namespace.\nExample \xe2\x80\x93 Part 3: Putting an Object in the Global Namespace\nThe third part of the example is the same as the second part, except that it has an additional\n<api>\ntag that puts an object into the global namespace.\n<abs contexttype="opengear" id="main-abs">\n<meta>\n// Code from Example Part 2: onload handler and first API\n<ogscript handles="onload" id="main-abs-onload"\nname="Main onload handler" targetid="main-abs">\nogscript.debug (\'First onload handler\');\n</ogscript>\n<api id="api-pretty" name="Pretty Printer">\n// pretty printer\nfunction pretty (obj) {\nreturn JSON.stringify(obj, null, 2);\n}\n// print global namespace to debug pane\nogscript.debug (\'first api:\\r\\n\' + pretty(this));\n</api>\n// Additional second API for Example Part 3:\n<api id="api-second" name="Second API">\n// define object in global namespace\nvar animal = {\ntype: \'tortoise\'\n78 \xe2\x80\xa2 DashBoard Data Model DashBoard CustomPanel Development Guide}\n// print global namespace to debug pane\nogscript.debug (\'second api:\\r\\n\' + pretty(this));\n</api>\n</meta>\n</abs>\nWhen the panel is loaded, the output appears as follows:\n13:20:56:437: First onload handler\n13:20:56:447: first api:\n{}\n13:20:56:447: second api:\n{\n"animal": {\n"type": "tortoise"\n}\n}\nThe output shows that the handler and the APIs have loaded in their lexical order, and\nonload\nwe\'ve now added the object named to the global namespace.\nvar animal\nThe next part of the example adds one more tag that purposely conflicts with the animal\n<api>\ndefscription we just defined.\nExample \xe2\x80\x93 Part 4: Adding an <api> Tag that Conflicts with a Previous <api> Tag\nThe third part of the example introduced an tag that defined a named , with a\n<api> var animal\nvalue of . This exists in the global namespace.\ntype tortoise var\nThe fourth part of this example contains an additional tag that also defines a named\n<api> var\n, in conflict with the previous API.\nanimal\nThe code for this part of the example is the same as before, except that a third tag is added:\n<api>\n// The following API will conflict with a previous API\n// Insert it after the second API.\n<api id="api-third" name="Third API">\n// define object in global namespace\nvar animal = {\ntype: \'hare\'\n}\n// write out global namespace.\n// Note that this uses pretty() from in another api\nogscript.debug (\'third api:\\r\\n\' + pretty(this));\n</api>\nWhen the panel is loaded, the output appears as follows:\n13:33:24:091: First onload handler\nDashBoard CustomPanel Development Guide DashBoard Data Model \xe2\x80\xa2 7913:33:24:098: first api:\n{}\n13:33:24:098: second api:\n{\n"animal": {\n"type": "tortoise"\n}\n}\n13:33:24:099: third api:\n{\n"animal": {\n"type": "hare"\n}\n}\nThe output shows that the animal\xe2\x80\x99s has been redefined as a instead of a .\ntype hare tortoise\nThe next part of the example sets the attribute for the third ( ) API.\nimmediate=true hare\nExample \xe2\x80\x93 Part 5: API Definition with immediate="true"\nThe fifth part of the example demonstrates the importance of order. The third API has the attribute\n, which means it is to be loaded before others that do not have their\nimmediate = \xe2\x80\x98true\xe2\x80\x99\nattributes set to , regardless of the order they appear in the code.\nimmediate true\nThe third API uses the function. Because the third tag is processed before\npretty() <api>\nis defined, an error results.\npretty()\nThe code is the same as before, except the following line:\n<api id="api-third" name="Third API">\nIs replaced with this:\n<api id="api-third" immediate="true" name="Third API">\nBecause the tag that appears last in the code has its attributes set to , it is\n<api> immediate true\nloaded before all others, and before the handler.\nonload\nWhen the panel is loaded, the output appears as follows:\nEXCEPTION:\nReferenceError: "pretty" is not defined. (Element API: api-third#7)\nBecause this tag was invoked before all the other ones, the function it uses from\n<api> pretty()\nanother API isn\'t yet defined, so we get an error.\nYou can fix this problem in one of two ways:\n1. Removing the attribute, unless it is required. Removing it and ensuring\nimmediate="true"\nthe API was loaded after APIs upon which it depends would fix the problem.\n2. Set the attribute for the tag that provides . As long as\nimmediate="true" <api> pretty()\nit\'s lexically in front of the third API, we\'ll get the behaviour we want or expect, as shown here:\n80 \xe2\x80\xa2 DashBoard Data Model DashBoard CustomPanel Development Guide13:47:33:833: first api:\n{}\n13:47:33:834: third api:\n{\n"animal": {\n"type": "hare"\n}\n}\n13:47:33:864: First onload handler\n13:47:33:865: second api:\n{\n"animal": {\n"type": "tortoise"\n}\n}\nThe final output shows:\n\xe2\x80\xa2 those tags set to load immediately did so before both the handler, and the\n<api> onload\nsecond tag that didn\'t have set.\n<api> immediate="true"\n\xe2\x80\xa2 the immediately loaded tags loaded in their relative lexical order, so the third\n<api> <api>\ntag could use the function defined in the first.\npretty()\n\xe2\x80\xa2 the beat the because two tags defined the same global variable, and\ntortoise hare <api>\nthe last one to do so "won" the race.\nThe final .grid file for this example is as follows:\n< abs contexttype="opengear" id="main-abs">\n<meta>\n<ogscript handles="onload" id="main-abs-onload"\nname="Main onload handler" targetid="main-abs">\nogscript.debug (\'First onload handler\');\n</ogscript>\n<api id="api-pretty" immediate="true" name="Pretty Printer">\n// pretty printer for objects\nfunction pretty (obj) {\nreturn JSON.stringify(obj, null, 2);\n}\n// print global namespace to debug pane\nogscript.debug (\'first api:\\r\\n\' + pretty(this));\n</api>\n<api id="api-second" name="Second API">\n// define object in global namespace\nvar animal = {\ntype: \'tortoise\'\nDashBoard CustomPanel Development Guide DashBoard Data Model \xe2\x80\xa2 81}\n// print global namespace\nogscript.debug(\'second api:\\r\\n\' + pretty(this));\n</api>\n<api id="api-third" immediate="true" name="Third API">\n// overwrite the existing definition of animal\nvar animal = {\ntype: \'hare\'\n}\n// write out global namespace\nogscript.debug(\'third api:\\r\\n\' + pretty(this));\n</api>\n</meta>\n</abs>\nLoading order with Minimal Mode and Subscriptions Protocols\nIf a device developer has implemented support for Minimal Mode and Subscriptions\nprotocols on an openGear protocol (OGP) device and the DashBoard CustomPanel that\ninteracts with it also supports these protocols, then when the panel loads it will only\nload parameters from the device\'s indicated minimal set of parameters and its\xe2\x80\x99\nsubscriptions list of OIDs. This also applies to Ross products that support these\nprotocols, like Ultrix and Ultritouch.\nTip: You can check whether a DashBoard CustomPanel supports subscription by double-\nclicking on the empty canvas to open the Component Editor, and navigating to the\ntopmost level of the panel\xe2\x80\x99s source code to verify whether a tag\nsubscription="true"\nis present in the top level attributes. Alternatively, if multiple device contexts are used,\nthe subscription tag may only appear in the <context/> tag. In the DashBoard user\ninterface, you may also notice additional options are available for devices that support\nsubscriptions, and these selection choices remain inactive if they do not apply to a\nselected device.\nEnabling Reuse by Keeping APIs in Separate Files\nAlthough all the examples in this section show the API code inline with the OGLML, it\'s good\npractice to keep them in separate JavasScript files.\nThis allows you to reference the API code from any CustomPanel, and to effectively update all\nuses of the API code by editing a single JavaScript file.\nWe recommend using a naming convention such as the following:\n82 \xe2\x80\xa2 DashBoard Data Model DashBoard CustomPanel Development Guide\xe2\x80\xa2 myfile.js for \'pure\' javascript files that do not contain ogScript or params objects specific to\nogScript, and therefore could be used in DashBoard or anywhere else.\n\xe2\x80\xa2 myfile.grid.js for APIs that rely on using and/or objects.\nogscript params\nDashBoard\'s GUI provides a convenient way to navigate to JavaScript files you wish to include.\nThe impact on the OGLML is to set the attribute like this:\nsrc\nTo reference a JavaScript file from within the tag, set the src attribute to the filepath, as in the\nfollowing example:\npath to file myfile\n<api src="file:/ / / / .grid.js"/>\nBenefits of using separate files for APIs include the following:\n\xe2\x80\xa2 You can easily share APIs between different custom panels.\n\xe2\x80\xa2 For \xe2\x80\x98pure\xe2\x80\x99 JavaScript files, you can quality assurance tools such as JSHint to weed out\nprogramming.\nDashBoard CustomPanel Development Guide DashBoard Data Model \xe2\x80\xa2 83Managing Scope\nEverything defined within an tag has global scope. This means that naming clashes are\n<api>\nlikely to occur if you include tags from multiple authors.\n<api>\nConsider the following two APIs, each of which contains a function named :\ninitialize()\n// Transcendental Vector Engine API\nfunction initialize (arg1, arg2) {\n// do stuff in <api/> 1\n}\n// Pressurized Water Reactor API\nfunction initialize (arg1) {\n// do stuff in <api/> 2\nreturn someValue;\n}\nWhichever of these two APIs appears later in the .grid file overwrites the previous API\xe2\x80\x99s\nfunction, almost certainly producing undesirable results.\ninitialize()\nTo minimize and ideally eliminate such problems, we strongly recommend the use of JavaScript\'s\nmodule pattern because it minimizes use of the global namespace.\nAn Internet search for \'Javascript Module Pattern\' provides plenty of educational material at some\ndepth. The following section provides a concise summary.\nThe Module Pattern\nThe main idea of the module pattern is to keep almost everything private to the module, which is\nimplemented as an immediately invoked function expression, as demonstrated in the following\nexample:\nvar myModuleName = (function() {\n// every object I define here is kept private and cannot be\n// accessed from outside the module because they are contained\n// by a \'closure\' which is the space between the outermost\n// curly brackets {\xe2\x80\xa6} in this example.\nfunction initialize () {\n// do stuff\n}\n// The objects I wish to publish are referenced in this JSON object\n// that allows precise control over what is revealed to client apps\nreturn {\ninitialize: initialize\n}\n}());\n84 \xe2\x80\xa2 DashBoard Data Model DashBoard CustomPanel Development GuideUsage from elsewhere in the CustomPanel is simple, and which particular initialize function you\nyou use is clear:\nTVE.initialize(5, 7); // initialize transcendental vectors\nvar isSafe = PWR.initialize(\'Reactor B\'); // initializes PWR reactor B\nThe code inside the included JavaScript files might look like this:\nTranscendental Vectors Engine <api/>\n// Code in the file, transcendentalVectorsEngine.grid.js:\n// This puts an object called \'TVE\' in the global namespace\nvar TVE = (function() {\nfunction initialize (arg1, arg2) {\n// do stuff\n}\n// publish API\nreturn {\ninitialize: initialize\n}\n}());\nPressurized Water Reactor <api/>\n// Code in the file, pressurizedWaterReactor.grid.js:\n// This puts an object called \'PWR\' in the global namespace\nvar PWR = (function () {\n// private attribute - cannot be accessed from within the Custom Panel\nvar temp;\nfunction initialize (arg1) {\n// do stuff\nreturn temp < 200;\n}\n}());\nDashBoard CustomPanel Development Guide DashBoard Data Model \xe2\x80\xa2 85OGLML Reference\nIn This Section\nThis section describes the OGLML tags.\nThe following topics are discussed:\n\xe2\x80\xa2 General Attributes\n\xe2\x80\xa2 Style Hints\n\xe2\x80\xa2 Layout/Container Tags\n\xe2\x80\xa2 Widget Tags\n\xe2\x80\xa2 Non-UI Tags\n\xe2\x80\xa2 Device Resource Declarations\n\xe2\x80\xa2 Device Resource Tags\n\xe2\x80\xa2 Macro Expansion\nGeneral Attributes\nAn OGLML document consists of a series of (nested) tags, described in detail in the following\nsections. Each tag can take optional attributes. The following chart lists attributes that can be\nused with all tags.\nNote that there are also tag-specific attributes; these are discussed in the Tags section.\nYou can also find more information about\n\xe2\x80\xa2 Using OGP Devices that Support Subscriptions Protocol\nsubscriptions\no\nExamples\no\nSyntax\nattribute value attribute value\n<component =" " =" " ... >\nGeneral Attributes\nAttribute Values Restrictions Description\ncontainertype bottom Adjust the border and shading of the\n86 \xe2\x80\xa2 OGLML Reference DashBoard CustomPanel Development GuideAttribute Values Restrictions Description\ninset component. See the examples below.\netched\nraised\nlowered\ntabpage\nscroll Should not be Indicates that the component created by\nused with the tag should be enclosed in a\n\xe2\x80\x9cbrowser\xe2\x80\x9d tag. scrollable container. If the display is too\nNesting within small to display the component,\nanother \xe2\x80\x9cscrolls\xe2\x80\x9d horizontal or vertical scrollbars are\nelement is not added.\nrecommended\ntrue Provides both horizontal and vertical\nScrolling for the scrollbars\n\xe2\x80\x9cmenu\xe2\x80\x9d tag will\nfalse always be true. Provides no scrollbars\nhorizontal Provides only horizontal scrolling\nvertical Provides only vertical scrolling\nalways Forces horizontal and vertical scrollbars\nto always be visible.\ncontexttype opengear A device context is a data structure that\n\xe2\x80\xa6 contains information about the attributes\nof a device. The contexttype indicates\nthe type of device or data source in the\nvalues.\nobjectid node-id of the source of parameters\nwithin container. The objectid is passed\nonto child elements and containers.\nobjecttype Type of device when communicating\nwith an openGear or DashBoard\nConnect device.\nid String Must be unique Used to uniquely identify/reference an\nwithin all OGLML element in the OGLML file.\nfiles displayed by\na device.\nIDs must only\nuse A-Z, a-z, 0-9,\n\xe2\x80\x9c-\xe2\x80\x9c, and \xe2\x80\x9c_\xe2\x80\x9d\ncharacters.\nsubscriptions Boolean Required for When set to , this flag indicates\ntrue\ndevices that support for openGear Protocol (OGP)\nsupport JSON devices that support the\nsubscriptions Subscriptions Protocol. These protocols\nprotocol. significantly improve the handling of\nOGP JSON device communication by\nThis attribute can eliminating unnecessary parameter\nonly be added to updates.\nLayout/Container\ntags.\nIf you are using\nmore than one\nDashBoard CustomPanel Development Guide OGLML Reference \xe2\x80\xa2 87Attribute Values Restrictions Description\nOGP device with\nsubscriptions\nsupport as a data\nsource for your\nCustomPanel,\nyou can use\ncontext (or device\ncontext) tags.\nwidth Positive integer Required for Specifies the preferred with (in pixels) for\nbrowser tags a component. May be ignored by\nDashBoard depending on the\ncomponent.\nheight Positive integer Required for Specifies the preferred height (in pixels)\nbrowser tags for a component. May be ignored by\nDashBoard depending on the\ncomponent.\nstyle style hints If a parameter openGear Style Hints are used to specify\nalready provides the background color, foreground color,\nstyle hints as part icon, and border for certain components.\nof its constraint, Refer to Style Hints.\nstyle hints should\nnot be overridden\nwith this style tag\n\xe2\x80\x93 results are\nunpredictable.\n88 \xe2\x80\xa2 OGLML Reference DashBoard CustomPanel Development GuideUsing OGP Devices that Support Subscriptions Protocol\nUsing OGP JSON devices that support subscriptions is recommended to:\n\xe2\x80\xa2 Optimize memory usage and communication\n\xe2\x80\xa2 Increase panel efficiency\n\xe2\x80\xa2 Load device panels faster\nOverview of Requirements to Support Subscriptions on the CustomPanel Side\nDashBoard CustomPanels that have a data source where the OGP device supports the subscription\nprotocol will require the following components to take advantage of subscriptions:\n1. The attribute must be added to either context (device context)\nsubscriptions="true"\ntags or a Layout/Container Tags. The following other General Attributes are required:\n, ,\ncontexttype="opengear" objectid="my ID Here" objecttype="my\n.\nDeviceType Here"\nTip: It is recommended that you use the DashBoard Component Editor to add the data\nsource, and when you add the device that supports subscriptions you can select the auto-\nsubscribe checkbox to add this automatically.\n2. The list must be specified in the panel.\nsubscription oids="oid1,oid2,oid3*"\nThis comma separated list supports wildcards and must be added to indicate which device\nOID updates the DashBoard CustomPanel will always receive. See subscription\nNote: If you followed the tip in step 1 and added a device context, you will still need to\nadd the oids manually to the template provided.\n3. Optional: You can make use of the new subscribe and unsubscribe functions to modify\nparams Objects.\nTip: You can use the ogScript Editor > Script Palette to add these functions.\nFor related resources, see: context (device context), subscriptions, meta, subscription\nsubscriptions\nWhen set to in a Container or Layout Tag, this attribute indicates support for openGear\ntrue\nProtocol (OGP) JSON devices that support the Subscriptions Protocol. These protocols\nsignificantly improve the handling of OGP JSON device communication by eliminating\nunnecessary parameter updates. Panels must also indicate a list of subscription OIDs to receive in\naddition to the minimal set.\nNote: When you drag and drop components from a DashBoard Connect or OGP device panel into\nanother DashBoard panel, you will see a prompt that allows you to automatically enable\nsubscriptions for the device (which adds the tag to your panel),\nsubscriptions="true"\nand/or auto-subscribe to parameters (which adds the list of subscription OIDs).\nDashBoard CustomPanel Development Guide OGLML Reference \xe2\x80\xa2 89Tip: If the DashBoard Connect or OGP device does not support subscriptions, then the Parameter\nSubscription Options will be grayed out throughout the DashBoard UI.\nHow device communication with the DashBoard Client has changed:\nInstead of always receiving a full set of all the parameter updates from an OGP device, now panels\ncan get a minimal set of parameter updates that is sent by OGP devices. With subscriptions,\npanels can indicate a list of subscription OIDs to receive in addition to the minimal set.\nNote: It is necessary to indicate a list of subscription oids that the panel will always receive\nparameter updates for from the OGP JSON device. See, subscription and add the list using the\noids attribute.\nYou can see an example of the syntax below for a top level openGear context. In this case an\n<abs/> absolute container is used, but any layout/container tag is valid.\nSyntax of a Subscriptions Panel with Multiple Elements from a Device\n<abs contexttype="opengear" id="_top" keepalive="false"\nobjectid="MyUltritouch..." subscriptions="true">\n<meta>\n<subscription oids="oid1, oid2, oid3*"/>\n</meta>\n</abs>\nExample of a Subscriptions Panel with Multiple Elements from a Device\n<abs contexttype="opengear" id="_top" keepalive="false"\nobjectid="MyUltritouch..." subscriptions="true">\n<meta>\n<subscription oids="db.touch*,deviceoptions.speakervolume"/>\n</meta>\n</abs>\nNote: To add multiple device sources for the panel, add the attribute to\nsubscriptions="true"\neach device context tag, see: context (device context)\nSyntax of a Subscriptions Panel with a Device Context Tag\n<context contexttype="opengear" objectid="DeviceID..."\n90 \xe2\x80\xa2 OGLML Reference DashBoard CustomPanel Development Guidesubscriptions="true">\n<meta>\n<subscription oids="oid1, oid2, oid3*"/>\n</meta>\n</context>\nExample of a Subscriptions Panel with Two Device Contexts\n<abs contexttype="opengear" id="_top" keepalive="false"\nobjectid="MyUltritouch..." objecttype="Ultritouch Device">\n<context contexttype="opengear" objectid="Kyles_Ultritouch..."\nsubscriptions="true">\n<meta>\n<subscription oids="db.touch*,deviceoptions.speakervolume"/>\n</meta>\n</context>\n<context contexttype="opengear" objectid="Daves_Ultritouch..."\nsubscriptions="true">\n<meta>\n<subscription oids ="devices*, deviceoptions.lcdbrightness"/>\n</meta>\n</context>\n</abs>\nFor related resources, see: context (device context), subscriptions, meta, subscription , Using OGP\nDevices that Support Subscriptions Protocol\nDashBoard CustomPanel Development Guide OGLML Reference \xe2\x80\xa2 91Examples\nThe following image illustrates the available containertype values:\nFigure 62 \xe2\x80\x93 containertype examples\n92 \xe2\x80\xa2 OGLML Reference DashBoard CustomPanel Development GuideopenGear Style Hints\nopenGear Style Hints provide something similar to an inline style CSS attribute in HTML. For\ncertain components, they can be used to specify a background color, foreground color, border, and\nicon. The hints can be provided inside OGLML tags or via parameter choice constraint values.\nSyntax\nTo specify a style hint inside an OGLML tag, the style attribute is used:\n<component style="style-hint;style-hint;...;" component attributes>\nTo specify a style hint within a parameter choice constraint, the style tag is inserted at the end of\nthe constraint value, enclosed in angle brackets (< >). In order to represent the angle brackets in\nthe OGLML document, they must use standard XML escape sequences ( ). Specifying\n&lt; &gt;\nhints within the constraint value allows different styles to be applied to each choice.\n<constraint key="key">value&lt;style-tag;style-tag;... &gt;</constraint>\nNote Style hints may be specified in either the OGLML style attribute or within the\nconstraint value, but not both.\nFor clarity, this document will provide examples using the OGLML style attribute only, however\nthe style hints may be utilized within constraints unless specifically mentioned.\nStyle Hint Reference\nThe following style hints are supported:\nTag Description\n#color-value Sets the component background color.\nbdr:border-style Sets the component border style.\nbdr#color-value Sets the component border color.\nbg#color-value Sets the component background color.\nbg-align:value Sets the alignment of a background image.\nbg-fill:value Controls how a background image is sized.\nb-u:image-url Sets a container background to image located at a specified URL.\ndi:none Removes a component drag icon.\ndi-eo:external-oid Sets a component drag icon to image encapsulated in an external OID.\ndi-u:image-URL Sets a component drag icon to image located at a specified URL.\nf:style-hint Style modifier when button value is false.\nfg#color-value Sets the component foreground color.\nfont:font-type Sets the font type.\ngrid#color-value Sets the table gridline color.\nhi:none Removes a component hover icon.\nhi-eo:external-oid Sets a component hover icon to image encapsulated in an external OID.\nhi-u: image-URL Sets a component hover icon to image located at a specified URL.\ni:none Removes a component icon.\ni-eo:external-oid Sets a component icon to image encapsulated in an external OID.\nDashBoard CustomPanel Development Guide OGLML Reference \xe2\x80\xa2 93Tag Description\ni-u: image-URL Sets a component icon to image located at a specified URL.\nm:t,l,b,r Sets insets around the label of a button.\no#color-value Sets the text outline color.\nsize:font-size Sets the text font size.\nstyle:style-id Applies style hints defined within a style tag.\nt:style-hint Style modifier when button value is true.\ntt:tool-tip-string Sets a tooltip for a label or button.\ntxt-align:alignment Sets the alignment of text.\nstyle Style Hint\nUser styles may be created within an OGLML document to allow standardized formatting to be\napplied to multiple components. Styles are defined using the tag. A predefined style may\nstyle\nbe referenced by a component as part of its attribute. Additional style hints may be\nstyle\nincluded in the same style attribute string. If the style string explicitly specifies a hint which\ncontradicts a hint in the predfined style, the explicitly added hint shall supersede.\nStyle Hint Values Restrictions Description\nstyle:style-id String The style with the Apply the style hints of the style defined\nprovided ID must in a different set of style hints. See style\nbe defined in an tag documentation for more information.\nOGLML\ndocument at a\nhigher scope than\nwhere it is\nreferenced.\n94 \xe2\x80\xa2 OGLML Reference DashBoard CustomPanel Development GuideExamples\nThe following example applies button style hints as defined in the predefined style\n. Note that the \xe2\x80\x9cStop\xe2\x80\x9d button has an additional hint applied ( ),\nCommandButtonStyle size:big\nand overrides the background color ( ).\nbg#ff0000\n<style id="ButtonStyle" value="bg#808000;bdr:etched;"/>\n<button name="Start" style="style:ButtonStyle;"/>\n<button name="Stop" style="style:ButtonStyle;size:big;bg#ff0000;"/>\n<button name="Reset" style="style:ButtonStyle;"/>\nFigure 63 - Style Tag Example\nComponent Color\nThe foreground, background and border colors of components may be specified. It is often a good\nidea to override the background and foreground as a pair to avoid the possibility of the background\nand foreground being the same (or similar) colors in the UI.\nStyle Hint Values Restrictions Description\n#color-value #RRGGBB Set the background color of the\nor or component.\nbg#color-value #color-constant Colors may be specified as RGB, RGBA\nor one of the pre-defined color\nor\nconstants. R, G, B and A are specified\n#RRGGBBAA\nas 2-digit hex values.\nfg#color-value #RRGGBB Set the foreground color of the\nor component.\n#color-constant Colors may be specified as RGB, RGBA\nor one of the pre-defined color\nor\nconstants. R, G, B and A are specified\n#RRGGBBAA\nas 2-digit hex values.\nbdr#color-value #RRGGBB Create a line border around the\nor component with the specified color.\n#color-constant Colors may be specified as RGB, RGBA\nor one of the pre-defined color\nor\nconstants. R, G, B and A are specified\n#RRGGBBAA\nas 2-digit hex values.\no#color-value #RRGGBB Create an outline around the text within\nor a component with the specified color.\n#color-constant Colors may be specified as RGB, RGBA\nor one of the pre-defined color\nor\nconstants. R, G, B and A are specified\n#RRGGBBAA\nas 2-digit hex values.\ngrid#color-value #RRGGBB Applies to table Specifies the color of the gridlines for a\nor container only. table container.\n#color-constant Colors may be specified as RGB, RGBA\nor one of the pre-defined color\nor\nconstants. R, G, B and A are specified\n#RRGGBBAA\nas 2-digit hex values.\nDashBoard CustomPanel Development Guide OGLML Reference \xe2\x80\xa2 95Example\nThe following style tag creates a label using the predefined background and the\n#panelbg\nforeground (text) in orange.\n<label name="Label" style="bg#panelbg;fg#FFC000;"/>\nPredefined Colors\nDashBoard defines color constants, which make up the standard color scheme. Color constants are\nthe default colors that are used when you build CustomPanels in DashBoard. These colors are\nused in the standard controls within DashBoard, but may be applied to the background, foreground\nor border color style tag of any component. Custom color constants may be defined within an\nOGLML document using the color tag.\nColor constants can be used anywhere in your code in the place of actual values. You can add\nthem in the GUI using the drop-down color palettes available in the Style tab of the Component\nEditor.\nThe following image illustrates the pre-defined color constants in the color palette:\nFigure 64 - Predefined color constants\nSimply hover your mouse over a color palette color to see the intended standard control usage for\nthe color constant. In the following image you can see the selectedmuted color constant identified\nbelow:\nUsing the recommended DashBoard color scheme ensures that\n\xe2\x80\xa2 You are applying colors consistently throughout your UI.\n\xe2\x80\xa2 You are saving time, because you won\xe2\x80\x99t need to customize the style of each standard\ncontrol that you add.\n\xe2\x80\xa2 Your panels will stay current with any new DashBoard color constant changes.\nDashBoard defines the following color constants:\n96 \xe2\x80\xa2 OGLML Reference DashBoard CustomPanel Development GuideColor Constant Color Sample Description\n#panelbg Panel background color.\n#panelfg Panel foreground color for a basic control or button.\n#selectbg Background color for a toggle button that is selected.\n#selectedmuted Color for a mute button that is selected.\n#buttonbg Background color for a button.\n#tableheader Color for a table header.\n#tablezebra Secondary color for table rows.\n#readonlyborder Color for a read-only border.\n#listbg Background color for a list.\n#tabbg Background color for a selected tab.\n#textbg Color for background for text.\n#lightdivider Color of a light divider.\n#darkdivider Color of a dark divider.\n#modaloverlay Color for a modal overlay.\n#timerfg Foreground color for a timer.\n#red Red.\n#orange Orange.\n#yellow Yellow.\n#green Green.\n#teal Teal.\n#blue Blue.\n#purple Purple.\nDashBoard CustomPanel Development Guide OGLML Reference \xe2\x80\xa2 97Color Constant Color Sample Description\n#pink Pink.\n#transparent No fill; the element will be transparent.\n#user-defined-color Color defined by the user using the color tag.\nBorder Styles\nThe style of a component border may be specified with the bdr hint. If the border hint is not\nspecified, a simple line will be drawn for the control border.\nNote: The containertype attribute, if specified for a component, will override the bdr style\nhint.\nStyle Hint Values Restrictions Description\nbdr:border-style none Removes the border from the\ncomponent.\netched Create an etched border around the\ncomponent.\nshadow Creates a drop shadow under the\ncomponent.\nbdr#color-value Sets border color; see Component Color Section.\ngrid#color-value Sets grid color in a table; see Component Color Section.\nExamples\nThe following image illustrates the border style hint:\nFigure 65 - Border style\nText/Font Styles\nThe following style hints modify the rendering of text in a component.\nStyle Hint Values Restrictions Description\nsize:font-size Integer size Set the font size for the component.\nsmaller Number specifies a font size in points\n(1/72\xe2\x80\x9d).\nsmall\nsmaller corresponds to 2/3 normal size.\nnormal\nbiggest corresponds to 4x normal size.\nbig\nSee examples below.\nbigger\nbiggest\n98 \xe2\x80\xa2 OGLML Reference DashBoard CustomPanel Development GuideStyle Hint Values Restrictions Description\nfont:font-type default Set the control font to the default font, a\nbold bold font, or a mono-spaced font.\nmono\ntxt-align:alignment center Controls the position of text within a\nnorth button or label control.\nnortheast\neast\nsoutheast\nsouth\nsouthwest\nwest\nnorthwest\nfg#color-value Sets text foreground color; see Component Color Section.\no#color-value Sets text outline color; see Component Color Section.\nExamples\nThe following image illustrates the size style\nFigure 66 - size style attribute\nThe following image illustrates the font style:\nFigure 67 - font style attribute\nIcon Styles\nIcon styles may be applied to label and button components. DashBoard allows separate icons to be\ndefined for the default icon, the icon when a mouse hovers over the control, and the icon when the\ncontrol is dragged (if dragging is enabled on the component).\nNote Icon Styles have no effect on buttons with the flat attribute.\nStyle Hint Values Restrictions Description\ni-eo:external-oid External OID External OID Set the icon for the component (applies\nspecified must be to labels and buttons).\ntype 0x03.\ni-u: image-URL URL String Full qualified URL Set the icon for the component. (applies\nto PNG, GIF or to labels and buttons)\nJPG image.\ni:none Remove the icon for the component.\ndi-eo:external-oid External OID External OID Set the drag icon for the component\nspecified must be (only applies if \xe2\x80\x9cdragvalue\xe2\x80\x9d attribute is\ntype 0x03. used).\nDashBoard CustomPanel Development Guide OGLML Reference \xe2\x80\xa2 99Style Hint Values Restrictions Description\ndi-u:image-URL URL String Full qualified URL Set the drag icon for the component\nto PNG, GIF or (only applies if \xe2\x80\x9cdragvalue\xe2\x80\x9d attribute is\nJPG image. used)\ndi:none Remove the drag icon for the\ncomponent.\nhi-eo:external-oid External OID External OID Set the hover icon for the component\nspecified must be (applies to buttons)\ntype 0x03.\nhi-u: image-URL URL String Full qualified URL Set the hover icon for the component\nto PNG, GIF or (applies to buttons)\nJPG image.\nhi:none Remove the hover icon for the\ncomponent.\nExample\n<button buttontype="push" style="i-u:http://my-server/RossLogo.jpg;hi-\nu:http://my-server/DashBoardLogo.jpg;" />\nFigure 68 \xe2\x80\x93 Background and Hover Icon\nTooltip Style\nTooltip may be added to components. Balloon help text will be displayed when the mouse hovers\nover the component.\nStyle Hint Values Restrictions Description\ntt:tool-tip-string String May only be Set the tooltip of the component to the\napplied to label specified String. A \xe2\x80\x9c \xe2\x80\x9d can be inserted\n;\nand buttons. into the string by inserting the escape\nsequence \xe2\x80\x9c \xe2\x80\x9d.\n\\;\nExample\n<button name="Tooltip" style="tt:This is the tooltip text" />\nFigure 69 \xe2\x80\x93 Tooltip Style\nInset Style\nInsets provide a margin from the edge of a component to the text or icon content.\n100 \xe2\x80\xa2 OGLML Reference DashBoard CustomPanel Development GuideStyle Hint Values Restrictions Description\nm:top,left,bottom, 4 Integers This hint can only Sets the margins around the label of the\nright be applied to button. The margins are specified in\nbutton widgets. pixels.\nBackground Styles\nBackground styles allow images to be placed in the background of container components.\nStyle Hint Values Restrictions Description\nb-u:image-url URL String Must be a fully Set the background image of the\nqualified URL. component.\nbg-fill:value none Do not scale the image.\nboth Stretch the image to the width/height of\nthe control.\nhorizontal Scale the image to the width of the\ncontrol (maintain aspect ratio).\nvertical Scale the image to the height of the\ncontrol (maintain aspect ratio).\nfit Scale the image to the largest size that\nwill fit inside of the control (maintain\naspect ratio).\ncrop Scale the image to fill the control\nmaintaining the aspect ratio. Crop the\nimage to remove the parts that don\xe2\x80\x99t fit.\ntile Tile the image (starting at the upper left)\nto fill the background of the control.\npaint9 Divide the image into 9 areas (defined\nwith Background Insets) to define fixed\ncorners, vertically or horizontally\nstretched sides, and a stretched center.\nbg-align:value center If the fill is set to anything other than\nnorth \xe2\x80\x9cboth\xe2\x80\x9d or \xe2\x80\x9ctile\xe2\x80\x9d, this controls where the\nbackground is positioned in the\nnortheast\ncomponent.\neast\nsoutheast\nsouth\nsouthwest\nwest\nnorthwest\nButton Style Modifiers\nAll style options can be overridden for toggle and radio buttons, such that the style of the widget is\ndetermined by the value of the backing parameter. For toggle buttons, the style can be specified\nfor the true state (button toggled down) and false state (button toggled up). For radio buttons, the\nstyle can be specified for each choice for the true state (choice selected) and false state (choice not\nselected).\nDashBoard CustomPanel Development Guide OGLML Reference \xe2\x80\xa2 101Syntax\ntrue-style-hint false-style-hint\n<component style="t: ;f: ;...;" >\nHint Modifier Values Restrictions Description\nt:true-style-hint Valid style hint Applies the style hint only when the\nchoice is true.\nf:false-style-hint Valid style hint Applies the style hint only when the\nchoice is false.\nExamples\nThe following example creates a toggle button whose color is green when true (toggled down) and\nred when false (toggled up):\n<param oid="0x7" style="t:bg#00ff00;f:bg#ff0000;" widget="13"/>\nFigure 70 - Toggle Button Style Modifier\nThe following example changes the font size to for the selected radio button:\nbig\n<param oid="0x6" style="t:size:big;f:size:normal;" widget="9"/>\nFigure 71 \xe2\x80\x93 Radio Button Style Modifier\nLayout/Container Tags\nContainer tags define regions of the layout which contain other elements. Containers control how\nthe child elements are presented within DashBoard. Container tags accept attributes which impact\nthe container as a whole, and may also specify additional attributes which may be applied to child\nelements; these define how the elements are displayed within the container. Containers may be\nnested.\nThe following containers are supported:\nTag Description\nabs Allows elements to be placed in absolute positions\nborderlayout Creates a border layout that maintains proportions of components\nanchored to the border edges or center when resized, and offers the\noption to set one component to grow in relation to the other components\nflow Aligns elements in a horizontal row\npager Creates a pager control component that is customizable using script\npopup Presents child elements in a popup window\nsimplegrid Creates a grid of fixed-size rows and columns\n102 \xe2\x80\xa2 OGLML Reference DashBoard CustomPanel Development GuideTag Description\nsplit Creates a draggable split screen with 2 components\ntab Creates a tabbed page\ntable Creates a grid of rows and columns\nabs\nUse absolute positioning and sizing for components inside of the abs tag. The sizing and\npositioning of child components must be specified as attributes of those child components.\nSyntax\ncontainer attributes\n<abs >\ncomponent child component attributes component\n< > </ >\ncomponent child component attributes component\n< > </ >\n. . .\n</abs>\nContainer Attributes\nIn addition to General Attributes, the following attributes may be specified to the < tag:\nabs>\nAttribute Values Restrictions Description\nvirtualwidth Integer Defines a virtual width and height to use\nfor all coordinates inside of the\nvirtualheight Integer\ncontainer. All offsets and dimensions\ninside of the container are scaled based\non current width/height vs.\nvirtualwidth/virtualheight.\nWhen these attributes are used, the UI\nwill scale as the container ize changes.\nsubscriptions String When set to subscriptions="true", this\nflag indicates support for openGear\nProtocol (OGP) JSON devices that have\nimplemented both minimal mode and\nsubscription protocol. The minimal mode\nprotocol provides the foundation for the\nsubscription protocol.\nSee the subscriptions entry for more\ndetails.\nChild Component Attributes\nIn addition to General Attributes, the following attributes may be specified to child components:\nAttribute Values Restrictions Description\nleft Integer Defines the distance between the left\nedge of the abs and the component.\nWhen combined with right it will force\nthe component to fill the available area.\nDashBoard CustomPanel Development Guide OGLML Reference \xe2\x80\xa2 103Attribute Values Restrictions Description\nright Integer Defines the distance between the right\nedge of the abs and the control.\nWhen combined with left, it will force the\ncomponent to fill the available area.\ntop Integer Defines the distance between the top\nedge of the abs and the control.\nWhen combined with bottom, it will force\nthe component to fill the available area.\nbottom Integer Defines the distance between the bottom\nedge of the abs and the control.\nWhen combined with top, it will force the\ncomponent to fill the available area.\nwidth Integer Ignored if both Defines the width of the control. If\nleft and right are undefined, the control\xe2\x80\x99s calculated\nspecified. preferred size will be used.\nheight Integer Ignored if both Defines the height of the control. If\ntop and bottom undefined, the control\xe2\x80\x99s calculated\nare specified. preferred size will be used.\nvirtualwidth and virtualheight\nIf the virtualheight and virtualwidth attributes are not set, components within the abs container\nwill be displayed in their specified size. Resizing the abs container will not scale the child\ncomponents. If the abs area does not encompass the area required for the specified components,\nthe components will be cropped.\nIf virtualheight and virtualwidth attributes are set, component size and position within the abs\ncontainer are scaled according to:\n\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x8e\xf0\x9d\x91\x8e\xf0\x9d\x91\x91\xf0\x9d\x91\x91 \xf0\x9d\x91\xa4\xf0\x9d\x91\xa4\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x90\xf0\x9d\x91\x90\xe2\x84\x8e\n\xf0\x9d\x91\x90\xf0\x9d\x91\x90\xf0\x9d\x91\x90\xf0\x9d\x91\x90\xf0\x9d\x91\x9a\xf0\x9d\x91\x9a\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x90\xf0\x9d\x91\x90\xf0\x9d\x91\x9a\xf0\x9d\x91\x9a\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x9a\xf0\x9d\x91\x9a\xf0\x9d\x91\x90\xf0\x9d\x91\x90 \xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91 \xf0\x9d\x91\xa4\xf0\x9d\x91\xa4\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x90\xf0\x9d\x91\x90\xe2\x84\x8e=\xf0\x9d\x91\x90\xf0\x9d\x91\x90\xf0\x9d\x91\x90\xf0\x9d\x91\x90\xf0\x9d\x91\x9a\xf0\x9d\x91\x9a\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x90\xf0\x9d\x91\x90\xf0\x9d\x91\x9a\xf0\x9d\x91\x9a\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x9a\xf0\x9d\x91\x9a\xf0\x9d\x91\x90\xf0\x9d\x91\x90 \xf0\x9d\x91\xa4\xf0\x9d\x91\xa4\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x90\xf0\x9d\x91\x90\xe2\x84\x8e \xc3\x97\xef\xbf\xbd \xef\xbf\xbd\n\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x8e\xf0\x9d\x91\x8e\xf0\x9d\x91\x91\xf0\x9d\x91\x91 \xf0\x9d\x91\xa3\xf0\x9d\x91\xa3\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\xa3\xf0\x9d\x91\xa3\xf0\x9d\x91\x90\xf0\x9d\x91\x90\xf0\x9d\x91\xa3\xf0\x9d\x91\xa3\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\xa4\xf0\x9d\x91\xa4\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x90\xf0\x9d\x91\x90\xe2\x84\x8e\n\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x8e\xf0\x9d\x91\x8e\xf0\x9d\x91\x91\xf0\x9d\x91\x91 \xe2\x84\x8e\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x92\xf0\x9d\x91\x92\xe2\x84\x8e\xf0\x9d\x91\x90\xf0\x9d\x91\x90\n\xf0\x9d\x91\x90\xf0\x9d\x91\x90\xf0\x9d\x91\x90\xf0\x9d\x91\x90\xf0\x9d\x91\x9a\xf0\x9d\x91\x9a\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x90\xf0\x9d\x91\x90\xf0\x9d\x91\x9a\xf0\x9d\x91\x9a\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x9a\xf0\x9d\x91\x9a\xf0\x9d\x91\x90\xf0\x9d\x91\x90 \xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91 \xe2\x84\x8e\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x92\xf0\x9d\x91\x92\xe2\x84\x8e\xf0\x9d\x91\x90\xf0\x9d\x91\x90=\xf0\x9d\x91\x90\xf0\x9d\x91\x90\xf0\x9d\x91\x90\xf0\x9d\x91\x90\xf0\x9d\x91\x9a\xf0\x9d\x91\x9a\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x90\xf0\x9d\x91\x90\xf0\x9d\x91\x9a\xf0\x9d\x91\x9a\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x9a\xf0\x9d\x91\x9a\xf0\x9d\x91\x90\xf0\x9d\x91\x90 \xe2\x84\x8e\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x92\xf0\x9d\x91\x92\xe2\x84\x8e\xf0\x9d\x91\x90\xf0\x9d\x91\x90 \xc3\x97\xef\xbf\xbd \xef\xbf\xbd\nExamples \xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x8e\xf0\x9d\x91\x8e\xf0\x9d\x91\x91\xf0\x9d\x91\x91 \xf0\x9d\x91\xa3\xf0\x9d\x91\xa3\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\xa3\xf0\x9d\x91\xa3\xf0\x9d\x91\x90\xf0\x9d\x91\x90\xf0\x9d\x91\xa3\xf0\x9d\x91\xa3\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xe2\x84\x8e\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x91\xf0\x9d\x91\x92\xf0\x9d\x91\x92\xe2\x84\x8e\xf0\x9d\x91\x90\xf0\x9d\x91\x90\nThe following example creates an abs container with 4 buttons placed in a 2x2 grid. The buttons\nwill not scale if the abs is resized (they will be cropped):\n<abs left="16" top="16" width="250" height="250">\n<button left="5" top="5" width="100" height="100" name="1"/>\n<button left="110" top="5" width="100" height="100" name="2"/>\n<button left="5" top="110" width="100" height="100" name="3"/>\n<button left="110" top="110" width="100" height="100" name="4"/>\n</abs>\nThe following example creates an abs container with 4 buttons placed in a 2x2 grid. The buttons\nwill scale if the abs is resized:\n<abs left="16" top="16" width="250" height="250" virtualwidth="250"\nvirtualheight="250">\n<button left="5" top="5" width="100" height="100" name="1"/>\n<button left="110" top="5" width="100" height="100" name="2"/>\n104 \xe2\x80\xa2 OGLML Reference DashBoard CustomPanel Development Guide<button left="5" top="110" width="100" height="100" name="3"/>\n<button left="110" top="110" width="100" height="100" name="4"/>\n</abs>\nIn the following example, the 2x2 grid will be scaled to half its original size. All buttons will\nappear 50x50 pixels in size:\n<abs left="16" top="16" width="125" height="125" virtualwidth="250"\nvirtualheight="250">\n<button left="5" top="5" width="100" height="100" name="1"/>\n<button left="110" top="5" width="100" height="100" name="2"/>\n<button left="5" top="110" width="100" height="100" name="3"/>\n<button left="110" top="110" width="100" height="100" name="4"/>\n</abs>\nborderlayout\nYou can use the border layout tool to create an area on a CustomPanel that you can anchor\ncomponents to and later resize to maintain your intended layout. You can use a border layout to\nanchor components against any of the four borders of the container and in the center. It is useful\nfor adding menus along the border edge of a CustomPanel, or to group components within a\nCustomPanel. A border layout must have more than one component, because it is designed to\nresponsively resize multiple objects contained within its borders. Typically, you can have a\ncomponent anchored to each side, and then a fifth central component. Any component could also\nbe a basic canvas containing other components.\nIf you want one of the anchored components to grow when the container is resized, you can set the\nborder layout\'s Growth Quadrant to match the component area you\'d like to grow (top, right,\nbottom, left, or center). You can only set a single growth quadrant. The areas that aren\'t in the\ngrowth quadrant will be adjusted when you resize the border layout container. The components\nanchored to the top or bottom will keep the same height, while the width expands or minimizes to\nmatch the container size. The components anchored to the right or left will keep the same width,\nwhile the height expands or minimizes to match the container size.\nIf a Growth Quadrant is not specified in the GUI, the [default] border layout will maintain certain\nproportions of the side components, and the central component will grow when resized. For the\ntop and bottom sides, the height is maintained, and the width will fill the container as it is resized.\nFor the left or right sides, the width is maintained, and the height will fill the container as it is\nresized.\nUse absolute positioning and sizing for components inside of the borderlayout tag. The sizing\nand positioning of child components must be specified as attributes of those child components.\nChild components are resized based on the specified growth quadrant.\nNote: In the child component attributes you must include an anchor that is set to Top, Bottom,\nRight, Left or Center to specify the side that the component is anchored to. In the source code the\nanchors are north, south, east, west or center.\nFor more details, see the DashBoard User Guide.\nYou can see an example of a border layout with labels used as the anchored components below:\nDashBoard CustomPanel Development Guide OGLML Reference \xe2\x80\xa2 105Syntax\ncontainer attributes\n<borderlayout >\ncomponent child component attributes component\n< > </ >\ncomponent child component attributes component\n< > </ >\n. . .\n</abs>\nContainer Attributes\nIn addition to General Attributes, the following attributes may be specified to the\n< tag:\nborderlayout>\nAttribute Values Restrictions Description\ngrow String In the GUI, the This attribute determines which of the\ngrowth quadrant anchored components will grow when\nmust be set to the border layout is resized responsively.\nValue must be set\nto [default],\nThis attribute impacts how the width and\nCenter, Top,\nheight of the child components will\nBottom, Left or\nbehave when the border layout is\nRight.\nresized responsively.\nIn the source code,\nNote: If this attribute is not defined, then\nthe value must be\nby default the center component is the\nset to north,\nonly one that will grow when resized.\nsouth, east,\nAny components on the border will\nwest or center.\nresponsively resize as follows:\n\xe2\x80\xa2 north or south - For the top\nand bottom sides, the height is\nmaintained, and the width will\nfill the container as it is resized.\n\xe2\x80\xa2 east or west - For the left or\nright sides, the width is\nmaintained, and the height will\nfill the container as it is resized.\nNote: If set to [default] in the GUI, then\nthe grow attribute will not appear in the\nsource code, but by default the behavior\nis the same as grow="center".\n106 \xe2\x80\xa2 OGLML Reference DashBoard CustomPanel Development GuideChild Component Attributes\nIn addition to General Attributes, the following attributes may be specified to child components:\nAttribute Values Restrictions Description\nanchor String In the GUI, the Defines the border side which the\nvalue must be set component will be anchored to.\nto Top, Bottom,\nLeft and Right.\nIn the source\ncode, the values\nare shown as\nnorth, south,\neast, west or\ncenter.\nwidth Integer Note: For certain Defines the width of the component. This\ncomponents, you is impacted by the growth attribute.\nmust include this\nattribute for the\ncomponent to\nappear.\nWith labels or\nbuttons, you don\'t\nneed to include a\ndefined width as\nthe text will\ndetermine the\nwidth. With\n<abs/> containers\nthe width is\nrequired for the\ncomponent to\nappear on the\ncanvas.\nheight Integer Note: For certain Defines the height of the component.\ncomponents, you This is impacted by the growth attribute.\nmust include this\nattribute for the\ncomponent to\nappear.\nWith labels or\nbuttons, you don\'t\nneed to include a\ndefined height as\nthe text will\ndetermine the\nheight. With\n<abs/> containers\nthe height is\nrequired for the\ncomponent to\nappear on the\ncanvas.\nExample\nDashBoard CustomPanel Development Guide OGLML Reference \xe2\x80\xa2 107The following example creates a border layout that is set to grow=\'north\', the label image is set to\nanchor=\'north\', and the table is set to anchor=\'center\'. The figure below shows the border layout\nbefore and after being resized. You can see that when the border layout is resized, the label image\ngrows north, and that the table remains centered, and became shorter to accommodate the label\nimage\'s growth.\n<borderlayout grow="north" height="480" style="bdr:etched;" width="220">\n<label anchor="north" height="40" style="bg#dark;bg-u:cd-3.jpg;bg-\nfill:fit;" width="6"/>\n<param anchor="center" expand="true" height="70" oid="params.table"\nshowlabel="false" width="250"/>\n</borderlayout>\nFor more information and an expanded example, see the DashBoard User Guide.\nflow\nArrange controls horizontally across the page. Wrap the controls vertically if there is not enough\nspace to show all controls on a single row.\nSyntax\ncontainer attributes\n<flow >\ncomponent component attributes component\n< > </ >\ncomponent component attributes component\n< > </ >\ncomponent component attributes component\n< > </ >\n. . .\n</flow>\nContainer Attributes\nIn addition to General Attributes, the following attributes may be specified:\n108 \xe2\x80\xa2 OGLML Reference DashBoard CustomPanel Development GuideAttribute Values Restrictions Description\nanchor center Defines the alignment of the controls\neast\nwest\nDefault values shown in bold.\nChild Component Attributes\nSee General Attributes. There are no additional attributes for child components.\nExample\nThe following example places 6 buttons in a horizontal row, aligned to the left edge of the flow\ncontainer.\n<flow height="200" left="16" top="16" width="1000">\n<button buttontype="push" height="126" name="1" width="126"/>\n<button buttontype="push" height="126" name="2" width="126"/>\n<button buttontype="push" height="126" name="3" width="126"/>\n<button buttontype="push" height="126" name="4" width="126"/>\n<button buttontype="push" height="126" name="5" width="126"/>\n<button buttontype="push" height="126" name="6" width="126"/>\n</flow>\npopup\nCreates a button that, when clicked, displays a balloon dialog containing the component. Popup\ngroups may be defined. Only one popup from each group is displayed at a time, however popups\nfrom different groups may be displayed simultaneously.\nNote: It is an error to put more than 1 component tag under a popup tag.\nSyntax\ncontainer attributes\n<popup >\ncomponent child component attributes component\n< > </ >\n</popup>\nContainer Attributes\nIn addition to General Attributes, the following attributes may be specified to the < tag:\npopup>\nAttribute Values Restrictions Description\nname String The name to display on the button to\ntrigger the popup.\ngroup String The group attribute is used to define\ndifferent groups that can be open at the\nsame time. If this attribute is not\ndefined, the popup is not a part of any\ngroup.\nChild Component Attributes\nDashBoard CustomPanel Development Guide OGLML Reference \xe2\x80\xa2 109In addition to General Attributes, the following attributes must be specified to child components:\nAttribute Values Restrictions Description\nwidth Integer Required Width of the container inside the popup\nheight Integer Required Height of the container inside the popup\nExample\nThe following example creates a popup triggered by a button labelled \xe2\x80\x9cSelector\xe2\x80\x9d. The popup\ncontains an abs container with 4 buttons placed in a 2x2 grid.\n<popup name="Selector">\n<abs height="100" width="100">\n<button left="0" top="0" width="50" height="50" name="1"/>\n<button left="50" top="0" width="50" height="50" name="2"/>\n<button left="0" top="50" width="50" height="50" name="3"/>\n<button left="50" top="50" width="50" height="50" name="4"/>\n</abs>\n</popup>\nFigure 72 \xe2\x80\x93 Popup\npager\nCreates a pager control component that is customizable using script. It is not currently available in\nthe GUI. The pager control is built into an <abs> absolute container, and the abs container\nattributes can be used.\nSyntax\nFor more information on creating a pager control using scripting, see the DashBoard User Guide.\nContainer Attributes\nIn addition to General Attributes, the following attributes may be specified to the\n< tag:\npagercontrol>\n110 \xe2\x80\xa2 OGLML Reference DashBoard CustomPanel Development GuideAttribute Values Restrictions Description\nvirtualwidth Integer Defines a virtual width and height to use\nfor all coordinates inside of the\ncontainer. All offsets and dimensions\ninside of the container are scaled based\nvirtualheight Integer on current width/height vs.\nvirtualwidth/virtualheight.\nWhen these attributes are used, the UI\nwill scale as the container size changes.\nExample\nThe following example creates a horizontal pager control.\n<abs contexttype="opengear" id="_top" keepalive="true">\n<pager height="224" left="13"\nstyle="look:round;bg#923030;bdr:thick;bdr#000000;" top="13" width="567">\n<config key="w.orientation">horizontal</config>\n<config key="w.model">var model = {\ncurrentPage: 1,\ngetNumPages: function()\n{\nreturn 5;\n},\ngetCurrentPage: function()\n{\nreturn this.currentPage;\n},\nscrollToPage: function(pageNum)\n{\nthis.currentPage = pageNum;\nogscript.reveal(\'page-\' + pageNum);\n}\n}\n;\nmodel</config>\n<tab tabposition="none">\n<abs id="page-0"/>\n<abs id="page-1">\n<label height="58" left="143" name="asdasdfasdf" style="txt-\nalign:west" top="58" width="161"/>\n</abs>\n<abs id="page-2">\n<button buttontype="push" height="65" left="185"\nname="asdfasdfas" top="50" width="182"/>\n</abs>\n<abs id="page-3"/>\n<abs id="page-4"/>\n<abs id="page-5"/>\n</tab>\nDashBoard CustomPanel Development Guide OGLML Reference \xe2\x80\xa2 111</pager>\n</abs>\nsimplegrid\nCreates a grid of fixed-sized cells. All cells in a simplegrid control are of the same size. Child\ncomponents are laid out left-to-right, top-down and are sized to fill the cell. If more control over\nlayout is required, the table container should be used instead.\nSyntax\ncontainer attributes\n<simplegrid >\ncomponent component attributes component\n< > </ >\ncomponent component attributes component\n< > </ >\ncomponent component attributes component\n< > </ >\n. . .\n</simplegrid>\nContainer Attributes\nIn addition to General Attributes, the following attributes may be specified:\nAttribute Values Restrictions Description\nrows Integer Specifies the number of rows in the grid\ncols Integer Specified the number of columns in the grid\nChild Component Attributes\nSee General Attributes. There are no additional attributes for child components.\nExample\nThe following example creates a 2 row x 3 column grid, with buttons 1, 2, 3 on the top row and\nbuttons 4, 5, 6 on the bottom row. Each cell is 100x100 pixels.\n<simplegrid left="16" top="16" height="200" width="300" rows="2"\ncols="3">\n<button buttontype="push" name="1"/>\n<button buttontype="push" name="2"/>\n<button buttontype="push" name="3"/>\n<button buttontype="push" name="4"/>\n<button buttontype="push" name="5"/>\n<button buttontype="push" name="6"/>\n</simplegrid>\nsplit\nCreates a split screen with exactly two components. The split is either horizontal (with a left\ncomponent and a right component, separated by a vertical split bar) or vertical (with a top\ncomponent and a bottom component separated by a horizontal split bar). If only one component\nis defined under the split tag, the split is removed and the single component is returned.\nNote: It is an error to put more than 2 component tags under a split tag.\nSyntax\n112 \xe2\x80\xa2 OGLML Reference DashBoard CustomPanel Development Guide<split container attributes>\ncomponent child component attributes component\n< > </ >\ncomponent child component attributes component\n< > </ >\n</split>\nDashBoard CustomPanel Development Guide OGLML Reference \xe2\x80\xa2 113Container Attributes\nIn addition to General Attributes, the following attributes may be specified to the < tag:\nsplit>\nAttribute Values Restrictions Description\norientation horizontal The first component will be on the left and\nthe second component will be on the right.\nvertical The first component will be on the top and\nthe second component will be on the bottom.\nDefault values shown in bold.\nChild Component Attributes\nIn addition to General Attributes, the following attributes may be specified to child components:\nAttribute Values Restrictions Description\nweight Double value Specifies how much of the screen should\nbetween +0.0 be devoted to each side of the split.\nand 1.0 If the weight is defined for both\ncomponents, the split is determined by\nweight / total weight.\nminw Positive integer The minimum width of the component in\npixels. This is considered a hint and may\nor may not be honored by DashBoard.\nminh Positive integer The minimum height of the component in\npixels. This is considered a hint and may\nor may not be honored by DashBoard.\nmaxw Positive integer The maximum width of the component in\npixels. This is considered a hint and may\nor may not be honored by DashBoard.\nmaxh Positive integer The maximum height of the component in\npixels. This is considered a hint and may\nor may not be honored by DashBoard.\nExample\nThe following example creates a split container with a horizontal split:\n\xe2\x80\xa2 Left side contains an abs container with 4 buttons placed in a 2x2 grid.\n\xe2\x80\xa2 Right side contains an abs container with 4 buttons placed in a 2x2 grid.\n<split height="150" width="300" orientation="horizontal">\n<abs weight="0.5" height="100" width="100">\n<button left="5" top="5" width="25" height="25" name="1"/>\n<button left="30" top="5" width="25" height="25" name="2"/>\n<button left="5" top="30" width="25" height="25" name="3"/>\n<button left="30" top="30" width="25" height="25" name="4"/>\n</abs>\n<abs weight="0.5" height="100" width="100">\n<button left="5" top="5" width="25" height="25" name="5"/>\n<button left="30" top="5" width="25" height="25" name="6"/>\n<button left="5" top="30" width="25" height="25" name="7"/>\n<button left="30" top="30" width="25" height="25" name="8"/>\n114 \xe2\x80\xa2 OGLML Reference DashBoard CustomPanel Development Guide</abs>\n</split>\ntab\nCreates a tab component where each child component within the tab tag represents a separate tab\npage inside of the tab component. Note that the height and width attributes of a tab component\ninclude the space occupied by the tab labels, not just the size of child components.\nSyntax\ncontainer attributes\n<tab >\ncomponent for tab 1 child component attributes component\n< > </ >\ncomponent for tab 2 child component attributes component\n< > </ >\n. . .\n</tab>\nContainer Attributes\nIn addition to General Attributes, the following attributes may be specified to the < tag:\ntab>\nAttribute Values Restrictions Description\ntabposition north How the tabs are Specifies the placement of the tabs.\neast rendered within\ntheir quadrant is\nsouth\ndetermined by\nwest\nthe look and feel.\nnone\nnone Tabs will be hidden and the visible\ncomponent must be controlled through\nthe \xe2\x80\x9creveal\xe2\x80\x9d tag or the OGP\nREVEAL_ELEMENT trap.\ntablayout scroll If there are more tabs than can fit in the\nstack horizontal space available, this controls\nwhether there are multiple rows of tabs\n(\xe2\x80\x9cstack\xe2\x80\x9d) or if additional tabs are on the\nsame row and accessible via scrolling\n(\xe2\x80\x9cscroll\xe2\x80\x9d).\ntabheight Integer Tab will not Specifies the height of the tab label, in\nresize below pixels. Note that the width of the tab is\nminimum size to determined by the length of the tab label\nrender tab label names.\ntext\nonchange ogScript String The provided snippet of ogScript is\ntriggered when the selected tab\nchanges.\nCurrent tab index is:\nthis.getSelectedIndex()\nCurrent tab name is:\nthis.getTitleAt(this.getSelectedIndex()\n)\nDefault values shown in bold.\nDashBoard CustomPanel Development Guide OGLML Reference \xe2\x80\xa2 115Child Component Attributes\nIn addition to General Attributes, the following attributes may be specified to child components:\nAttribute Values Restrictions Description\nname String This attribute is Specifies (or overrides) the name to\nused in elements display in the tab for a component. If the\ncontained within component provides its own name (e.g.\na tab tag. an OGP Menu), that name will be used\nin the absence of this attribute.\nselected default This attribute is default = this tab will be selected by\nforced used in elements default when the UI is loaded.\nnone contained within forced = this tab will be selected by\na tab tag. default when the UI is loaded and, if the\nUI is refreshed, this tab will be selected\nagain.\nnone = when the UI is loaded, the first\ntab in the tab group is selected. If the UI\nis refreshed, DashBoard should attempt\nto maintain the current tab selection.\nDefault values shown in bold.\nExample\nThe following example creates a tab container with three tabs:\n\xe2\x80\xa2 First tab contains an abs container with 4 buttons placed in a 2x2 grid.\n\xe2\x80\xa2 Second tab contains an abs container with 4 buttons placed in a 2x2 grid.\n\xe2\x80\xa2 Third tab contains a single button\n<tab width="250" height="300" left="1" tabposition="north" top="1">\n<abs height="300" width="250" name="First Tab">\n<button left="5" top="5" width="25" height="25" name="1"/>\n<button left="30" top="5" width="25" height="25" name="2"/>\n<button left="5" top="30" width="25" height="25" name="3"/>\n<button left="30" top="30" width="25" height="25" name="4"/>\n</abs>\n<abs height="250" width="250" name="Second Tab">\n<button left="5" top="5" width="25" height="25" name="5"/>\n<button left="30" top="5" width="25" height="25" name="6"/>\n<button left="5" top="30" width="25" height="25" name="7"/>\n<button left="30" top="30" width="25" height="25" name="8"/>\n</abs>\n<button name="Go"/>\n</tab>\ntable\nA table is a grid of rows and columns. A cell in the table can span any number of rows or\ncolumns. Each cell in a table contains a component defined in a child tag. Similar to HTML, each\nrow of cells in a table must be encapsulated in a tag. Each element inside of a tag defines a\ntr tr\ncomponent to be placed inside a cell. For simple grids with fixed-sized cells, the simplegrid\ncontainer may be used instead.\n116 \xe2\x80\xa2 OGLML Reference DashBoard CustomPanel Development GuideSyntax\ncontainer attributes\n<table >\n<tr>\ncomponent child component attributes component\n< > </ >\ncomponent child component attributes component\n< > </ >\n. . .\n</tr>\n<tr>\ncomponent child component attributes component\n< > </ >\ncomponent child component attributes component\n< > </ >\n. . .\n</tr>\n. . .\n</table>\nChild Tags\nTag Values Restrictions Description\n<tr> Encapsulates a row.\n<component> Any valid Defines the component for a table cell.\ncomponent tag Must be a child of a tr tag.\nContainer Attributes\nSee General Attributes.\nChild Component Attributes\nThe following set of attributes controls the layout of cells and components. To control the\nappearance of the table contents, these additional attributes should be defined in the child tags that\ndefine the content of the table cells.\nAttribute Values Restrictions Description\nfill Controls how the component inside of a\ntable cell fills the cell itself.\nnone Uses the component\xe2\x80\x99s natural width and\nheight and floats it inside of the cell.\nHorizontal Uses the component\xe2\x80\x99s natural height but\nfills the horizontal space.\nVertical Uses the component\xe2\x80\x99s natural width but\nfills the vertical space.\nboth Ignores the component\xe2\x80\x99s natural width\nand fills the entire cell.\nDashBoard CustomPanel Development Guide OGLML Reference \xe2\x80\xa2 117Attribute Values Restrictions Description\nanchor center If the fill is set to anything other than\nnorth both, this controls where the component\nis attached to the cell.\nnortheast\neast\nsoutheast\nsouth\nsouthwest\nwest\nnorthwest\nrowspan Positive integer Cells must not The number of rows spanned by a cell.\ncollide\ncolspan Positive integer Cells must not The number of columns spanned by a\ncollide cell.\ninsets 4 positive Specifies padding around the\nintegers component. The 4 numbers represent\nseparated by the top, left, bottom, and right padding.\ncommas. The insets are specified in pixels.\ne.g. \xe2\x80\x9c5,5,5,5\xe2\x80\x9d\nweightx Double value Specifies how to distribute extra\nbetween +0.0 horizontal space.\nand 1.0\nThe table calculates the weight of a\ncolumn to be the maximum weightx of\nall the components in a column. If the\nresulting layout is smaller horizontally\nthan the area it needs to fill, the extra\nspace is distributed to each column in\nproportion to its weight. A column that\nhas a weight of zero receives no extra\nspace.\nIf all the weights are zero, all the extra\nspace appears between the grids of the\ncell and the left and right edges.\nweighty Double value Specifies how to distribute extra vertical\nbetween +0.0 space.\nand 1.0\nThe table calculates the weight of a row\nto be the maximum weighty of all the\ncomponents in a row. If the resulting\nlayout is smaller vertically than the area\nit needs to fill, the extra space is\ndistributed to each row in proportion to\nits weight. A row that has a weight of\nzero receives no extra space.\nIf all the weights are zero, all the extra\nspace appears between the grids of the\ncell and the top and bottom edges.\n118 \xe2\x80\xa2 OGLML Reference DashBoard CustomPanel Development GuideAttribute Values Restrictions Description\norientation horizontal Only applies to If a tag returns multiple components (e.g.\nvertical element tags that a param tag for an array parameter), this\nreturn multiple specifies whether the returned\ncomponents. components should be in the same row\n(horizontal) or in the same column\n(vertical).\nminw Positive integer The minimum width of the component in\npixels. This is considered a hint and\nmay or may not be honored by\nDashBoard.\nminh Positive integer The minimum height of the component in\npixels. This is considered a hint and\nmay or may not be honored by\nDashBoard.\nmaxw Positive integer The maximum width of the component in\npixels. This is considered a hint and\nmay or may not be honored by\nDashBoard.\nmaxh Positive integer The maximum height of the component\nin pixels. This is considered a hint and\nmay or may not be honored by\nDashBoard.\nplaceholders Positive integer This tag specifies the minimum number\nDefault 0 of elements which are expected to be\nreturned by a tag. If a tag returns fewer\nthan the specified number of elements,\nplaceholder elements are created and\nadded to the layout in their place.\nA value of means that the tag is\n0\nignored if no elements were returned (or\nthe tag is undefined).\nmaxperrow Positive integer A value > 0 defines the maximum\nDefault -1 number of elements in a row. Additional\nelements will be placed on the next row.\nDefault values shown in bold.\nNote: DashBoard uses a Java Swing GridBagLayout internally. For more information\nabout GridBagLayout, please see\nhttp://docs.oracle.com/javase/8/docs/api/java/awt/GridBagLayout.html\nExample\nThe following sample utilizes a table to create a numeric keypad.\n<table height="300" left="16" top="16" width="300">\n<tr>\n<button buttontype="push" fill="both" name="1"> </button>\n<button buttontype="push" fill="both" name="2"> </button>\n<button buttontype="push" fill="both" name="3"> </button>\n</tr>\n<tr>\n<button buttontype="push" fill="both" name="4"> </button>\n<button buttontype="push" fill="both" name="5"> </button>\nDashBoard CustomPanel Development Guide OGLML Reference \xe2\x80\xa2 119<button buttontype="push" fill="both" name="6"> </button>\n</tr>\n<tr>\n<button buttontype="push" fill="both" name="7"> </button>\n<button buttontype="push" fill="both" name="8"> </button>\n<button buttontype="push" fill="both" name="9"> </button>\n</tr>\n<tr>\n<button buttontype="push" fill="both" name="*"> </button>\n<button buttontype="push" fill="both" name="0"> </button>\n<button buttontype="push" fill="both" name="#"> </button>\n</tr>\n</table>\nTop Level Attributes\nTop level attributes can be added to any of the container tags listed in the Layout/Container Tags,\nbut only if that container is the uppermost container in the source code. The source code can be\nfound when you enter PanelBuilder Edit Mode, and double-click on an empty spot of the canvas.\nThis opens the Component Editor, with the uppermost container selected in the tree view\n(typically an <abs> container in a new CustomPanel file). You can add the top level attributes in\nthe uppermost container.\nThe following top level attributes are supported:\nAttribute Description\neditlock Allows a panel to be protected with a user-defined defined password.\nWhen a user tries to enter Panel Builder Edit Mode, the password prompt\nwill appear requesting the credentials.\nencrypt Encrypts a panel to protect the source code.\ngridsize Allows you to snap components to the grid backdrop when in\nPanelBuilder Edit Mode. You can organize and automatically line up\ncomponents on the screen along the provided horizontal and vertical grid\nlines.\nkeepalive When set to true, this flag prevents panels from being unloaded by the\nmemory manager. When set to false, if this panel is inactive and\nDashBoard runs low on memory it can be unloaded.\neditlock\nDefines the password that will protect a panel from tampering. The editlock value can be any user-\ndefined string. When editlock is set, a password popup will appear when a user attempts to enter\nPanelBuilder Edit Mode.\n120 \xe2\x80\xa2 OGLML Reference DashBoard CustomPanel Development GuideTo set an editlock password, enter PanelBuilder Edit mode, and double-click on an empty area of\nthe canvas. The Component Editor will open with the uppermost <abs> selected in the tree view.\nClick the Source tab, and edit the top line of code to include editlock = "<password>".\nWarning: Anyone can open the panel .grid file in any text editor and view the password, unless\nyour panel is encrypted. For more details on how to encryp your panel see, encrypt.\nYou can see an example below with the password set to .\nRossVideo12345\nSyntax\n<abs contexttype="opengear" id="_top" editlock="RossVideo12345" style="">\n</abs>\nencrypt\nThis allows you to encrypt a panel so that the source code cannot be viewed. It is recommended to\nencrypt passwords when using the editlock attribute. To encrypt a panel so that the source code\ncannot be viewed, add encrypt= "SimpleEncrypt" to the uppermost <abs>. The editlock tag must\nbe set to "SimpleEncrypt".\nWarning: make sure to use the correct capitalization, as setting encrypt to any other value may\nbreak your panel!\nYou can see an example below using the encrypt tag.\nSyntax\n<abs contexttype="opengear" id="_top" encrypt="SimpleEncrypt" style="">\n</abs>\ngridsize\nThis Snap to Grid feature allows you to snap components to the grid backdrop when in\nPanelBuilder Edit Mode. You can organize and automatically snap components to the nearest\nhorizontal and vertical grid lines. With the CustomPanel open, enter PanelBuilder Edit Mode.\nWhen adding a new component to the canvas, or resizing an existing component, it will auto-fill to\nencompass the closest grid space. To enable Snap to Grid, right-click on the blank canvas and\nselect Snap to grid.\nThe default grid size is set to 20. You can adjust the size of the grid in the source code to make the\ngrid larger or smaller, as shown below:\nDashBoard CustomPanel Development Guide OGLML Reference \xe2\x80\xa2 121You can see an example below using the gridsize tag.\nSyntax\n<abs contexttype="opengear" id="_top" gridsize="10" style="">\n</abs>\nkeepalive\nWhen DashBoard runs low on memory, it may unload panels that are not active, in order to free up\nmemory. If you have a panel that runs tasks in the background (listeners, gpi triggers, timers, etc),\nyou may not want DashBoard to unload your panel. You can use the keepalive flag in the top-\nlevel container>, to indicate that this panel should not be unloaded. For more details, see the\nMemory Manager feature in the Dashboard User Guide.\nNote: Panels without this flag cannot be unloaded.\nTip: From the PanelBuilder Component Editor, in the Abs Attributes tab, you can select the\nKeep Alive checkbox to ensure panel is not unloaded.\nSyntax\n<abs contexttype="opengear" id="_top" keepalive="true" style="">\n</abs>\nWidget Tags\nWidget tags are components that can be added to an OGLML page. In contrast with the Container\ntags described previously, widget tags do not contain other components.\nThe following tags are provided:\nTag Description\nreveal Brings hidden tab pages to the front\ndrawer Creates a container that allows you to add drawer tabs to maximize panel\nspace, by organizing additional content in hidden drawer tabs.\next Opens the editor for a specified node in the DashBoard Tree.\nexit Creates an exit button that, when clicked, causes DashBoard to close the\ncurrent panel, window, or application.\nhelp Creates a help pop-up button which can display a custom help title and\n122 \xe2\x80\xa2 OGLML Reference DashBoard CustomPanel Development GuideTag Description\nmessage when selected.\nimage Displays a static image\nlabel Creates a static text label\nbutton Creates a button\nbrowser Creates a web browser window\nblank Placeholder, used to leave a blank cell in simplegrid, table and flow\ncontainers\nlock Allows DashBoard client screen to be locked\nmemory The memory manager widget allows you to add a memory status\nindicator bar to monitor the current memory usage of the DashBoard\napplication.\nwidget Creates an instance of a custom widget\nwizard You can create a basic wizard, that is also customizable using script.\ndrawer\nIf space is limited on your custom panel, you can now create drawers to make additional space for\ncontent. This is ideal for smaller panels with restricted space, such as the Ultritouch custom panel,\nor any panel that is crowded with too many components. It can help to organize your content,\ncompartmentalize standalone functions, or to minimize certain parts of the custom panel when it is\nnot in use.\nYou can see an example of an Ultritouch Panel with drawers below:\nIt is recommended that you create the drawer using the Tab Split & Drawer button that can be\nfound in Panel Builder Edit Mode toolbar.\nFor more information, see the DashBoard User Guide > Panel Builder > Adding basic\nComponents > Drawers.\nSyntax\ndrawer-name element1 element2\n<drawer name=" ", targetid=" , ,...">\n<abs> name= <abs>\n<drawer height="380" left="163" tabfill="both" top="141" width="538">\n<abs anchor="drawer-tab-name" height="48" id="north1" name="north1"\nwidth="249"/>\n</drawer>\n<drawer height="380" left="163" tabfill="none" top="141" width="538">\n<abs anchor="east" height="48" id="north1" name="north1" width="249"/>\n</drawer>\nDashBoard CustomPanel Development Guide OGLML Reference \xe2\x80\xa2 123wizard\nYou can create wizards that contain a title, a page navigation pane, and a progress bar. The wizard\nallows you to automate complex tasks and break them into a series of steps that walk users\nthrough the process from start to finish.\nIn addition to determining which features you would like to be visible, you can also choose how\nmany pages appear in the wizard. Pages are shown as Page 1, Page 2, and so on. It\'s easy to\nchange the default page name to be more descriptive, since the navigation pane already provides\nautomatic numbering on each tab. For example, "Page 1" could be renamed "Device Options" and\nthat tab will display "1. Device Options" in the navigation pane, as shown below.\nreveal\nCreates a button that, when clicked, causes elements within tab pages to become visible in the UI.\nWhen the button is pressed, DashBoard finds all components with the provided target ID(s) and\nchecks to see if they are contained within a tab component or menugroup. If component is found,\nits tab page is brought to the foreground (made the active tab). If the specified component is buried\ndeep within the UI (e.g. a tab within a tab), the device must supply multiple IDs to \xe2\x80\x98reveal\xe2\x80\x99 the\ndesired component and the component\xe2\x80\x99s parents.\nSyntax\nbutton-name element1 element2\n<reveal name=" ", targetid=" , ,...">\n</reveal>\n124 \xe2\x80\xa2 OGLML Reference DashBoard CustomPanel Development GuideAttributes\nIn addition to General Attributes, the following attributes may be specified to the < tag:\nreveal>\nAttribute Values Restrictions Description\nname String The name to display on the button.\ntargetid list of Strings Each string in the Specifies the element ids to show.\nseparated by value must refer\ncommas or to the id of\nsemicolons. another\ncomponent.\nExamples\nThe following example creates a button that reveals the menu with id \xe2\x80\x9cKey1Panel\xe2\x80\x9d\n<reveal name="Key 1", targetid="Key1Panel"/>\nThe following example creates a button that reveals the menu \xe2\x80\x9cKey1Panel\xe2\x80\x9d and the tab\n\xe2\x80\x9cKey1ChromaTab\xe2\x80\x9d.\n<reveal name="Chroma Key 1", targetid="Key1Panel,Key1ChromaTab"/>\next\nCreates a button that, when clicked, causes DashBoard to open an editor tab for a device in the\nDashBoard tree view. When the button is pressed, DashBoard searches its tree view for a node\nwith the provided ID. If a node is found and the node contains an editor, its editor is opened\nand/or brought to the foreground (made the active tab).\nIf a component is buried deep within the UI (e.g. a tab within a tab), the card can supply multiple\nIDs to \xe2\x80\x98reveal\xe2\x80\x99 not only the desired component, but also the component\xe2\x80\x99s parents.\nSyntax\nbutton-name node-id general\n<ext name=" " objectid=" " buttontype="type"\nattributes\n/>\nbutton-name file-path file-name\n<ext name=" " objectid="FileNavigator, , "\ngeneral attributes\nbuttontype="type" />\nAttributes\nIn addition to General Attributes, the following attributes may be specified to the < tag:\next>\nAttribute Values Restrictions Description\nname String The name to display on the button.\nobjectid String The value must Specifies the id of the components to\nrefer to the node show.\nID an element in DashBoard provides a few shortcuts to\nDashBoard\xe2\x80\x99s tree reference elements under the device\nview. node in the tree or a sibling device in the\nsame frame:\n%frame% will be replaced with the\nframe\xe2\x80\x99s primary identifier.\n%device% will be replaced with the\ndevice\xe2\x80\x99s primary identifier.\n%slot 1 (or 2, or 3, etc.)% will be\nreplaced with the primary identifier of the\ndevice in the referenced slot in the same\nDashBoard CustomPanel Development Guide OGLML Reference \xe2\x80\xa2 125Attribute Values Restrictions Description\nframe.\nIf the String starts with\n\xe2\x80\x9c \xe2\x80\x9d the objectid\nFileNavigator,\nspecifies a path and filename of a\nresource in the DashBoard file navigator,\nrather than the tree view.\nbuttontype button Optional \xe2\x80\x9cbutton\xe2\x80\x9d = display the link as a button\nlabel \xe2\x80\x9clabel\xe2\x80\x9d = display the link as a label\nDefault values shown in bold.\nexit\nCreates an exit button that, when clicked, causes DashBoard to close the current panel, window, or\napplication. If a message prompt is defined, then a Yes or No message prompt pop-up will appear\nwhen the button is pressed. An example of an exit button with a prompt set would be:\nprompt=\xe2\x80\x9cDo you wish to exit this panel?\xe2\x80\x9d.\nIf you set the exit button to close a panel when pressed, additional options are available to set\nDashBoard to jump to another device user interface from the tree view, or Custom Panel file.\nWhen the button is pressed, DashBoard searches its tree view for a node with the provided ID. If\na node is found and the node contains an editor, its editor is opened and/or brought to the\nforeground (made the active tab).\nSyntax\nbutton-name panel|window|application\n<exit name=" " level= " " openobjectid=\nnode-id Exit-prompt-message general attributes\n" " prompt=" " />\nbutton-name panel file-\n<exit name=" " level= " " openobjectid="FileNavigator,\npath file-name Exit-prompt-message general\n, " buttontype="type" prompt=" "\nattributes\n/>\nAttributes\nIn addition to General Attributes, the following attributes may be specified to the < tag:\next>\nAttribute Values Restrictions Description\nname String The name to display on the button.\nlevel String The level can be set to one of the\nfollowing: , or\npanel window\n. Where:\napplication\n\xe2\x80\xa2 closes the current panel.\npanel\n\xe2\x80\xa2 closes the current\nwindow\nwindow.\n\xe2\x80\xa2 closes the\nApplication\nDashBoard application.\nNote: Setting to can also\nlevel window\nresult in exiting the DashBoard\napplication if only one window is open\nwhen the button is pressed.\nobjectid String The value must Specifies the id of the components to\nrefer to the node show.\nID an element in DashBoard provides a few shortcuts to\nDashBoard\xe2\x80\x99s tree reference elements under the device\n126 \xe2\x80\xa2 OGLML Reference DashBoard CustomPanel Development GuideAttribute Values Restrictions Description\nview. node in the tree or a sibling device in the\nsame frame:\n%frame% will be replaced with the\nframe\xe2\x80\x99s primary identifier.\n%device% will be replaced with the\ndevice\xe2\x80\x99s primary identifier.\n%slot 1 (or 2, or 3, etc.)% will be\nreplaced with the primary identifier of the\ndevice in the referenced slot in the same\nframe.\nIf the String starts with\n\xe2\x80\x9c \xe2\x80\x9d the objectid\nFileNavigator,\nspecifies a path and filename of a\nresource in the DashBoard file navigator,\nrather than the tree view.\nprompt If you want a message prompt to appear\nto confirm whether to exit the panel,\napplication or window, add the following:\nprompt=\xe2\x80\x9cyour-message-text\xe2\x80\x9d\nWhen defined, the message you have\nentered appears in a Yes or No pop-up\ndialog.\nbuttontype button Optional \xe2\x80\x9cbutton\xe2\x80\x9d = display as a button\nlabel \xe2\x80\x9clabel\xe2\x80\x9d = display as a clickable label\nDefault values shown in bold.\nhelp\nCreates a help pop-up button which can display a custom help title and message when selected.\nSyntax\ncontrol attributes\n<help >\n![CDATA[ html Html text html\n< < > </ >]]>\n</help>\nControl Attributes\nIn addition to General Attributes, the following attributes may be specified to the < tag:\nhelp>\nAttribute Values Restrictions Description\npopupwidth Integer Specifies the width of the popup content,\nin pixels.\npopupheight Integer Specifies the height of the popup\ncontent, in pixels. This does not include\nthe title.\nTitle String The title to display in the popup.\nMessage String Can be plain text The message to display in the popup.\nor html.\nDefault values shown in bold.\nDashBoard CustomPanel Development Guide OGLML Reference \xe2\x80\xa2 127Examples\nThe example code below creates a 40 by 40 pixel help pop-up, as shown in Figure 70.\n<help height="40" left="25" top="25" width="40" popupheight="200"\npopupwidth="500" style="bg#ff0000;" title="Example Help">\n<![CDATA[<html><left><b><u>Html formatted heading</u></b><br><font\ncolor=#ffffdd>Take me Home</font><br><a\nhref=\xe2\x80\x9dhttps://www.rossvideo.com/\xe2\x80\x9d>Ross Video</a><br>\nThe latest software release for Carbonite Black Solo unlocks a powerful\nUSB Media Player functionality and is available to customers at no\nadditional cost. This new media player provides the functionality of a\nsingle-channel clip player, for playout of compressed MPEG-4 AVC media\ndirectly from a connected USB-media drive. There is no other production\nswitcher in the world with this level of built-in media playback.\n</html>]]>\n</help>\nFigure 73 \xe2\x80\x93 Example Help Dialog\nimage\nFetch an image from the provided URL and display it.\nSyntax\nURL-String\n<image src=" " attributes> </image>\nAttributes\nAttribute Values Restrictions Description\nsrc URL String Required. Must Set the background image of the\nbe a fully component.\nqualified URL.\nheight Integers It top and bottom are both specified, or\ntop height is specified, the image will be\nstretched to the height specified.\nbottom\nOtherwise, the image\xe2\x80\x99s native height is\nused.\n128 \xe2\x80\xa2 OGLML Reference DashBoard CustomPanel Development GuideAttribute Values Restrictions Description\nwidth Integers It left and right are both specified, or\nleft width is specified, the image will be\nstretched to the width specified.\nright\nOtherwise, the image\xe2\x80\x99s native width is\nused.\nExamples\nThe following example places an image at its native size:\n<image src="http://whatever.com/logo.jpg" top="50" left="50"/>\nThe following example places an image and scales it to 200x100 pixels in size.\n<image src=" http://whatever.com/logo.jpg" top="50" left="50"\nheight="100" width="200"/>\nlabel\nDisplay a label. If the name is not defined, the text content of the label is used to provide the\ncontent. One or more ogScript tasks can be attached to a label to be fired when the label is\nclicked.\nSyntax\nlabel-name\n<label name=" " attributes> </label>\nAttributes\nTag Values Restrictions Description\nname String The text to display in the label.\nalign left The horizontal alignment of the text\nright within the label.\ncenter\nheader true Format the label as a header element\nfalse (apply a standard header background,\nforeground, and border).\nhtml true The text is actually a snippet of HTML\nfalse (you do not need to provide the\n<html></html> tags).\nDefault values shown in bold.\nExamples\n<label name="This is a label" />\n<label html="true" name="This is an &lt;i&gt;HTML&lt;/i&gt; label"/>\n<label header="true" name="Label with the header attribute" />\nFigure 74 \xe2\x80\x93 Label Examples\nDashBoard CustomPanel Development Guide OGLML Reference \xe2\x80\xa2 129button\nDisplay a button. One or more ogScript tasks can be attached to a button to be fired when the\nbutton is pressed or toggled.\nSyntax\nlabel-name\n<button name=" " attributes> </button>\nAttributes\nAttribute Values Restrictions Description\nname String Required The text to display in the label.\nbuttontype push The type of button to create. Push\ntoggle buttons are stateless. Toggle, checkbox,\nand radio are all 2-sate \xe2\x80\x9con\xe2\x80\x9d and \xe2\x80\x9coff\xe2\x80\x9d.\ncheckbox\nradio\ntoggled true The initial state of the button.\nfalse\nflat true Only applicable to Request a \xe2\x80\x98flat\xe2\x80\x99 look for the button (or\nfalse push or toggle toggle button) in the UI. Note that icons\nbuttontype styles may not be applied to flat buttons.\nDefault values shown in bold.\nExamples\nThis example displays a series of simple pushbuttons as illustrated in Figure 73:\n<button buttontype="push" name="push" top="25" width="80"/>\n<button buttontype="toggle" name="toggle" toggled="true" top="25"\nwidth="80"/>\n<button buttontype="push" flat="true" left="400" name="flat" top="25"\nwidth="80"/>\n<button buttontype="radio" left="500" name="radio" top="25"/>\n<button buttontype="checkbox" left="600" name="checkbox" top="25"/>\nFigure 75 \xe2\x80\x93 Button Examples\nbrowser\nEmbed a web browser component in the page and point it at the specified URL.\nNote The browser plug-in is a heavy widget, and should therefore be used sparingly.\nSyntax\nURL-String height width\n<browser url=" " height=" " width=" " attributes >\n</browser>\nAttributes\n130 \xe2\x80\xa2 OGLML Reference DashBoard CustomPanel Development GuideAttribute Values Restrictions Description\nurl URL String Required. Must The URL to use for the provided\nbe a fully browser.\nqualified URL.\nwidth Positive integer Required The width (in pixels) of the browser\nheight Positive integer Required The height (in pixels) of the browser\nNotes\nThis is a native browser component provided by the OS.\n\xe2\x80\xa2 On Windows it will generally be Internet Explorer.\n\xe2\x80\xa2 On Linux it will either be WebKit GTK or XUL Runner.\n\xe2\x80\xa2 The browser is currently disabled on OS X pending a bug fix within the Eclipse platform.\nThe web sites pointed to by the browser must NOT contain Java Applets.\nNot all plug-ins will be available on all browsers. It is recommended that developers test their\nweb pages inside of DashBoard on multiple platforms.\nThe browser is a heavyweight component and must not be used inside of a scrolling component.\nThe browser will cause rendering issues if it is clipped by other components.\nExample\n<browser url="http://www.rossvideo.com" height="400" width="1200"/>\nblank\nCreates a blank placeholder component. This can be used to fill space where necessary.\nSyntax\nattributes\n<blank />\nAttributes\nSee General Attributes.\nExample\n<table left="25" top="25" width="400">\n<tr>\n<label name="This" width="100"/>\n<label name="is" width="100"/>\n<label name="a" width="100"/>\n<label name="table" width="100"/>\n</tr>\n<tr>\n<label name="with" width="100"/>\n<blank/>\n<label name="blank" width="100"/>\n<label name="tags" width="100"/>\n</tr>\n</table>\nDashBoard CustomPanel Development Guide OGLML Reference \xe2\x80\xa2 131Figure 76 \xe2\x80\x93 Blank Tag Example\nlock\nCreates a button that, when pressed, will turn on DashBoard\xe2\x80\x99s screen lock. The lock button will\ndisplay a lock icon by default but this icon can be overridden by a card developer.\nSyntax\nattributes\n<lock name="button-name" />\nAttributes\nSee General Attributes.\nAttributes Values Restrictions Description\nname String Text to display on the button. Text will be\nrendered beside the lock icon.\nExample\n<lock name="Lock Screen" left="25" top="25"/>\nFigure 77 \xe2\x80\x93 Lock Button\nWhen locked, the DashBoard UI will be darkened, with an unlock widget.\nFigure 78 \xe2\x80\x93 Lock Screen Widget\nmemory\nThe memory manager widget allows you to add a memory status indicator bar to monitor the\ncurrent memory usage of the DashBoard application. This performs the same function as the\nmemory manager indicator that is available in the top right DashBoard toolbar. The memory\nmanager widget allows you to continue to monitor the memory usage of the status indicator while\na panel is in full screen mode. You can add a memory manager widget directly to your panel and\ncustomize its size and position. By default the <memory/> tag is 60 pixels in width by 20 pixels\nin height, and it is located in the top left corner.\nSyntax\n132 \xe2\x80\xa2 OGLML Reference DashBoard CustomPanel Development Guide<abs contexttype="opengear" id="_top" keepalive="false" style="">\n<memory height="50" left="1500" top="50" width="200"/>\n</abs>\nA memory manager widget appears in the specified area.\nFigure 79 \xe2\x80\x93 Lock Screen Widget\nAttributes Values Restrictions Description\nid String Widget identifier.\nheight String Height of the memory manager widget.\nwidth String Width of the memory manager widget.\nleft String Offsets the memory manager widget a\nselect number of pixels from the left side\nmargins of the panel.\nright String Offsets the memory manager widget a\nselect number of pixels from the right\nside margins of the panel.\ntop String Offsets the memory manager widget a\nselect number of pixels from the top\nmargins of the panel.\nbottom String Offsets the memory manager widget a\nselect number of pixels from the bottom\nmargins of the panel.\nwidget\nCreates an instance of a custom widget. The widget must be defined through a\ntag. Parameters declared within the \xe2\x80\x99s\nwidgetdescriptor widgetdescriptor config\nmay be overridden through tags within a block.\nblock param config\nSyntax\n<widget widgetid="widget-id" baseOID="base-oid">\n<config>\n<params>\n<param/>\n<param/>\n. . .\n<params/>\n</config>\n</widget>\nAttributes\nDashBoard CustomPanel Development Guide OGLML Reference \xe2\x80\xa2 133In addition to General Attributes, the following attributes may be specified to the < tag:\nwidget>\nAttributes Values Restrictions Description\nwidgetid String Must match the Widget identifier.\nid of a declared\nwidgetdescriptor.\nbaseOID String Specifies the base OID string for relative\nparameter access. Relative parameter\naccess within the widget will be prefixed\nwith the value of the baseOID attribute\nstring.\n134 \xe2\x80\xa2 OGLML Reference DashBoard CustomPanel Development GuideSee Also\n\xe2\x80\xa2\nwidgetdescriptor\n\xe2\x80\xa2\nconfig\n\xe2\x80\xa2\nparam\nExamples\nThe following example displays a custom widget with id :\nalarmgrid\n<widget widgetid="alarmgrid" top="100" left="100"/>\nThe following example displays a custom widget with id overriding the value of\nalarmgrid,\nparameter with the value \xe2\x80\x9cNew String Value\xe2\x80\x9d:\nstr2\n<widget left="100" top="300" widgetid="alarmgrid">\n<config>\n<params>\n<param oid="str2" value="New String Value"/>\n</params>\n</config>\n</widget>\nNon-UI Tags\nThe following tags do not provide any UI elements themselves. They contribute new parameters,\nscript snippets, constraints, etc. for use elsewhere in the OGLML document.\nThe following tags are provided.\nTag Description\napi Provides a location for global ogScript code.\ncontext (device context) A device context is a data structure that contains information about the\nattributes of a device data source.\nmeta This is a convenient parent tag for all non-UI tags.\nsubscription This tag indicates the list of subscription oids that the panel wishes to\nreceive parameter updates from the OGP JSON device.\nNote: The device source must support subscriptions protocol.\nwidgets This is a container for user-defined widget descriptors.\nwidgetdesriptor Defines a custom widget.\nlookup A lookup defines constants to be substituted inside of other tag attributes\nor used in ogScript blocks.\nstyle To provide something similar to Cascading Style Sheets (CSS) available\nin HTML, styles can be defined in a tag and referenced in the style\nattribute of widget tags.\ncolor Defines or overrides a color constant for use within style hints.\nogscript Defines an ogScript code snippet to handle an event on a UI element or\nparameter.\nconstraint Defines the constraint of a parameter.\nDashBoard CustomPanel Development Guide OGLML Reference \xe2\x80\xa2 135Tag Description\nparams The parent container for parameters defined within the OGLML\ndocument.\ntimer The timer tag fires events at regular intervals.\nlistener The listener tag allows an OGLML page to process network\ncommunications using protocols not already available.\ntask Defines a block of ogScript to be run when an event happens in the\nsystem.\ntimertask Defines a block of ogScript to be run when a timer goes off.\ninclude This tag allows an OGLML document to be assembled from several\nindividual XML files or fragments.\napi\nProvides a location for global ogScript code. Contents of the tag are processed by the\n<api>\nogScript compiler directly. Elements within an tag are scoped where they are declared in the\napi\nXML; siblings and children of siblings have visibility to elements declared within the tag.\napi\nYou can use the tag to create a library of reusable ogScript code segments. For more\n<api>\ninformation and best practices, see Custom APIs Within CustomPanels.\nThe tag should generally be placed within a tag for global ogScript code\napi <meta>\nencapsulation. However, ogScript code intended to dynamically generate and modify the XML\nshould be placed in a top-level tag.\napi\nSyntax\n<api>\nglobal-scope elements\n</api>\nAttributes\nNone.\ncontext (device context)\nA device context is a data structure that contains information about the attributes of a device. It\nprovides a means to organize the OGLML document structure of the DashBoard CustomPanel.\nTypically this tag is used if a CustomPanel (also called a device panel elsewhere) is used to add\nmore than one data source to the panel.\nBasic Syntax\n<context contexttype="opengear" objectid="Daves_Ultritouch...">\n</context>\nSyntax for Panels that Support Subscriptions\n<context contexttype="opengear" objectid="DeviceID..."\nsubscriptions="true">\n136 \xe2\x80\xa2 OGLML Reference DashBoard CustomPanel Development Guide<meta>\n<subscription oids="oid1, oid2, oid3*"/>\n</meta>\n</context>\nExample of a Subscriptions Panel with Two Device Contexts\n<abs contexttype="opengear" id="_top" keepalive="false" objectid="MyUltritouch..."\nobjecttype="Ultritouch Device">\n<context contexttype="opengear" objectid="Kyles_Ultritouch..."\nsubscriptions="true">\n<meta>\n<subscription oids="db.touch*,deviceoptions.speakervolume"/>\n</meta>\n</context>\n<context contexttype="opengear" objectid="Daves_Ultritouch..."\nsubscriptions="true">\n<meta>\n<subscription oids ="devices*, deviceoptions.lcdbrightness"/>\n</meta>\n</context>\n</abs>\nIn this example, you can see two separate device contexts, which point to two different Ross\nUltritouch devices that support subscriptions protocol. The topmost container for the panel, in this\ncase an <abs/> does not need to be modified to add device contexts.\nAttributes\nAttribute Values Restrictions Description\ncontexttype string Typically set to opengear for openGear\nor DashBoard Connect devices.\nobjectid string Object ID provided by DashBoard.\nsubscriptions String set to *This attribute This flag is required to indicate support\n"true" or "false". must be set to for subscriptions devices that are used\n"true" to support as a data source in this panel.\nOGP devices that\nsupport the Note: The panel must also provide a list\nsubscription of subscription OIDs to determine\nprotocol. which device parameters the panel will\nalways receive updates for.\nsubscription\nThis tag indicates the list of subscription oids that the panel wishes to receive parameter updates\nfrom the OGP JSON device.\nDashBoard CustomPanel Development Guide OGLML Reference \xe2\x80\xa2 137Note: The device source must support subscriptions protocol. This tag only works when used in\nconjunction with the attribute.\nsubscriptions="true"\nSyntax\n<context contexttype="opengear" objectid="DeviceID..."\nsubscriptions="true">\n<meta>\n<subscription oids="oid1, oid2, oid3*"/>\n</meta>\n</context>\nAttributes\nAttribute Values Restrictions Description\noids String of *Required to The list of OID parameters for the\ncomma support OGP openGear device source must be listed\nseparated OIDs devices that here, otherwise the panel will only get\nsupport the updates for the minimal set of OIDs.\nsubscription\nprotocol. Note: This tag can only be added to a\nCustomPanel that indicates support for\nin the\nsubscriptions="true"\ncontext or top level attributes of the\npanel. It is recommended to nest the\nsubscription oid list within a meta tag.\nSee the details below for more\ninformation wildcards.\nNote: You can use wildcard asterisks to include multiple OIDs simultaneously that have the same\nstarting prefix in the name. The wildcard should be added after this prefix. These wildcards are\nuseful when you don\'t want to type out a whole list of similar OIDs manually. Instead you can add\na subset of OIDs by including a wildcard. If wildcards are used, your list of subscriptions are\noptimized by DashBoard to use the wildcard that includes the most items.\nAbout Using Wildcards\nAdding a wildcard asterisk to a list of parameter OIDs in a DashBoard device panel, will allow\nyou to quickly add multiple sets of parameter OIDs that start with the same prefix. You can only\nadd an asterisk to the end of an oid prefix name. The asterisk means that you will subscribe to all\nparameters that start with the prefix you entered.\nFor example, if you wanted to add three OIDs, types.audiomixer, types.audiomixerpartition and\ntypes.audiosound, you could use the following wildcards: ty*, types.audio*, or types.au*. If you\nuse more than one wildcard that applies to the same parameters, DashBoard will choose the most\nefficient wildcard to optimize. In the example above, ty* would be used. You cannot add a\nwildcard before the prefix or have text after the wildcard. For example, *ypes. and ty*p are not\nvalid.\nFor related content, see: context (device context), subscriptions, meta\nmeta\nThis is a convenient parent tag for all non-UI tags. The meta tag does not deepen the scope,\n138 \xe2\x80\xa2 OGLML Reference DashBoard CustomPanel Development Guidetherefore children of the meta are considered at the same scope as the meta tag itself, and therefore\nsiblings of other top-level tags.\nSyntax\n<meta>\nnon-ui-tags\n</meta>\nAttributes\nNone.\nwidgets\nThis is a container for user-defined widget descriptors.\nSyntax\n<widgets>\n<widgetdescriptor/>\n<widgetdescriptor/>\n. . .\n</widgets>\nAttributes\nNone.\nwidgetdescriptor\nDefines a custom widget. The widget descriptor contains two blocks denoted by and\n<config>\ntags. The section includes content to render the widget\xe2\x80\x99s configuration page\n<oglml> config\nwithin PanelBuilder\xe2\x80\x99s Edit Component dialog. The block contains the content to create\noglml\nthe widget itself.\nThe tag may be contained within a widgets block of an oglml document, in\nwidgetdescriptor\nan external file or be served up via URL\nSyntax\n<widgetdescriptor id="widget-id" baseurl="URL-string"\nstructtype="structtype">\n<config/>\n<oglml/>\n</widgetdescriptor>\nDashBoard CustomPanel Development Guide OGLML Reference \xe2\x80\xa2 139Attributes\nAttributes Values Restrictions Description\nid String Must be unique Widget identifier.\nstructtype String Specifies a dependency of the widget\nupon a global struct parameter with\nmatching structtype. Currently this type\nchecking is restricted only to\nPanelBuilder UI; a custom widget will\nonly be available in PanelBuilder if a\nparameter exists with matching\nstructtype.\nbaseurl String Must be a valid, When specified, the widget descriptor\nfully qualified will be fetched from a document\nURL. specified by the URL, rather than inline.\nSee Also\nwidget\nconfig\nparam\nExamples\nThe following creates a custom widget which displays four alarm dots in a 2x2 grid. The strings\nthat sit beside each dot are configurable parameters of the widget.\n<widgetdescriptor id="alarmgrid">\n<config>\n<params>\n<param access="1" type="STRING" oid="str1" name="String 1"/>\n<param access="1" type="STRING" oid="str2" name="String 2"/>\n<param access="1" type="STRING" oid="str3" name="String 3"/>\n<param access="1" type="STRING" oid="str4" name="String 4"/>\n</params>\n</config>\n<oglml>\n<simplegrid cols="2" rows="2">\n<param oid="str1" widget="12" width="200" height="40"/>\n<param oid="str2" widget="12" width="200" height="40"/>\n<param oid="str3" widget="12" width="200" height="40"/>\n<param oid="str4" widget="12" width="200" height="40"/>\n</simplegrid>\n</oglml>\n</widgetdescriptor>\nThe following retrieves a widget descriptor from a web server:\n<widgetdescriptor\nbaseurl="http://mydevice/files/widgets.widgetdescriptor"/>\nThe widget is then displayed with the following:\n<widget widgetid="alarmgrid" top="100" left="100"/>\n140 \xe2\x80\xa2 OGLML Reference DashBoard CustomPanel Development GuideThe following example displays the widget, overriding the value of parameter with the value\nstr2\n\xe2\x80\x9cNew String Value\xe2\x80\x9d:\n<widget left="100" top="300" widgetid="alarmgrid">\n<config>\n<params>\n<param oid="str2" value="New String Value"/>\n</params>\n</config>\n</widget>\nlookup\nA lookup defines constants to be substituted inside of other tag attributes or used in ogScript\nblocks. Lookups contain \xe2\x80\x9centry\xe2\x80\x9d tags to define key/value pairs. Constants defined in a parent\ncontext can be referenced in a child context. If a key from the parent context is re-defined in a\nchild context, the re-defined value will take precedence in the child\xe2\x80\x99s scope.\nGlobal tags should usually be placed within an tag.\nlookup api\nSyntax\nid-string scope\n<lookup id=" " scope=" ">\nkey value\n<entry key=" "> </entry>\nkey value\n<entry key=" "> </entry>\n. . .\n</lookup>\nAttributes\nAttribute Values Restrictions Description\nscope private If \xe2\x80\x9cprivate\xe2\x80\x9d, the By default, all key/value pairs are added\npublic lookup must to a general lookup table. The lookup\ndefine the id table in any context is the concatenation\nwindow\nattribute. of all parent lookup tables and sibling\nlookup tables.\nIf the scope is set to \xe2\x80\x9cprivate\xe2\x80\x9d, the\nkey/value pairs can only be referenced\nusing the lookup table\xe2\x80\x99s ID.\nid string If defined, key/value pairs for this lookup\ncan be referenced in ogScript using\n\xe2\x80\x9cogscript.getPrivateString(\xe2\x80\x98[id]\xe2\x80\x99, \xe2\x80\x98[key]\xe2\x80\x99);\xe2\x80\x9d\nOr substitute inside of other attributes\nwith %const[\xe2\x80\x98id\xe2\x80\x99][\xe2\x80\x98key\xe2\x80\x99]%\ncode true Must be set true if the lookup value\nfalse contains executable script.\nmultiline true Must be set true if lookup value contains\nfalse multi-line strings.\nDefault values shown in bold.\nDashBoard CustomPanel Development Guide OGLML Reference \xe2\x80\xa2 141Example\nThe following tag creates a public lookup\n<lookup>\n<entry key="breakfast">Bacon and Eggs</entry>\n<entry key="lunch">BLT</entry>\n<entry key="dinner">Bacon explosion</entry>\n<entry key="snack">Bacon-maple donut</entry>\n</lookup>\nThe following code returns the string .\nBLT\nvar currentMeal = ogscript.getString(\'lunch\');\nThe following tag creates a private scope lookup\n<lookup id="family" scope="private">\n<entry key="father">Homer Simpson</entry>\n<entry key="son">Bart Simpson</entry>\n<entry key="mother">Marge Bouvier-Simpson</entry>\n<entry key="daughter">Lisa</entry>\n<entry key="baby">Magaggie</entry>\n</lookup>\nThe following code would return the string .\nHomer Simpson\nvar name = ogscript.getPrivateString(\'family\', \'father\');\nThe following tag creates a block of code lookup:\n<lookup code="true" id="GlobalScripts" multiline="true">\n<entry key="UpdateTimer">\nif (params.getValue(\'Update_Automatically\', 0) == 1)\n{\nogscript.getTimerManager().getTimer(\'UpdateTimer\').startTimer(false);\n}\nelse\n{\nogscript.getTimerManager().getTimer(\'UpdateTimer\').stopTimer(false\n);\n}\n</entry>\n</lookup>\nThe following is an example of instancing the code defined in the above lookup:\n<ogscript\nhandles="onload">%const[\'GlobalScripts\'][\'UpdateTimer\']%</ogscript>\n142 \xe2\x80\xa2 OGLML Reference DashBoard CustomPanel Development Guidestyle\nTo provide something similar to Cascading Style Sheets (CSS) available in HTML, styles can be\ndefined in a tag and referenced in the style attribute of widget tags.\nSyntax\nstyle-name value-string\n<style id=" " value=" "/>\nAttributes\nAttribute Values Restrictions Description\nid string Must not contain The ID to use when referencing the\na semicolon style.\nvalue string Must not contain Value contains a style hint string\nany circular following the same format used in the\nreferences to style attribute of other tags.\nitself.\nExamples\nThe following example applies button style hints as defined in the predefined style\n. Note that the \xe2\x80\x9cStop\xe2\x80\x9d button has an additional hint applied ( ),\nCommandButtonStyle size:big\nand overrides the background color ( ).\nbg#ff0000\n<style id="ButtonStyle" value="bg#808000;bdr:etched;"/>\n<button name="Start" style="style:ButtonStyle;"/>\n<button name="Stop" style="style:ButtonStyle;size:big;bg#ff0000;"/>\n<button name="Reset" style="style:ButtonStyle;"/>\nFigure 80 - Style Tag Example\ncolor\nDefines or overrides a color constant for use within style hints.\nSyntax\ncolor-name color-value\n<color id=" " value=" "/>\nAttributes\nAttribute Values Restrictions Description\nid string The ID to use when referencing the\ncolor.\nvalue #RRGGBB Value contains a style hint string\nor following the same format used in the\ncolor style attribute.\n#color-constant\nor\n#RRGGBBAA\nDashBoard CustomPanel Development Guide OGLML Reference \xe2\x80\xa2 143Example\nThe following example defines a color constant and applies it to the background of a\nColorBlue\nbutton widget.\n<color id="VibrantBlue" value="#0000FF"/>\n<button name="Blue Button" style="bg#VibrantBlue"/>\nogscript\nDefines an ogScript code snippet to handle an event on a UI element or parameter.\nSyntax\n<ogscript handles="eventType">\nogScript code\n</ogscript>\nAttributes\nAttribute Values Restrictions Description\nuse online Script will only run on a real device\noffline Script will only run on a file-based device\nboth Script will run always\ntargetid string The ID of the UI element to target.\nhandles Multiple \xe2\x80\x9chandles\xe2\x80\x9d The type of event that triggers the script.\narguments can\nbe supplied,\nseparated by\ncommas.\nattributechange Can be used to trigger scripts when\nselected NK device is changed or\nmonitor status of FTP download/upload:\n<ogscript\nattribute="com.rossvideo.ftp.event"\nhandles="attributechange">var\nprogressEvent = event.getNewValue();\nif (progressEvent == null)\n{\nogscript.debug(\'No progress\');\n}\nelse\n{\nogscript.rename(\'label.bytes\',\n(progressEvent.getTotalBytesTransferre\nd() / 1024) + \'kb\');\n}</ogscript>\ndragvalue Must specify something to return\n(generally a string or a number) when\nthe element is dragged.\nonaction Triggered when a button is pressed.\n144 \xe2\x80\xa2 OGLML Reference DashBoard CustomPanel Development GuideAttribute Values Restrictions Description\nonchange Only supported Triggers script when parameter or tab is\nby tabs and changed.\nparameters.\nonclick Triggers script when element is clicked.\nonclose Triggered when the panel has been\nclosed (can be used for cleaning-up).\noncontextmenu Triggers script when the element is right-\nclicked, or tapped and held.\nTo create a context menu, define an\narray of menu options, each associated\nwith a segment of ogScript.\nFor more information, see Example of a\nContext menu on page 146.\nondrag Triggers script when the element is\ndragged\nondrop Triggers script when another component\nis dropped on the component.\nonkeypress Triggers script when the component has\nfocus and a keyboard key is pressed.\nonkeyrelease Triggers script when the component has\nfocus and a keyboard key is released.\nonlassoout Triggers script when a lassostart\noperation has started and the\ncomponent with the selected ID is no\nlonger inside of its bounding rectangle.\nonlassoover Triggers script when a lassostart\noperation has started and the\ncomponent with the selected ID is inside\nof its bounding rectangle.\nonlassostart Triggers script when the user clicks and\nstarts to drag a \xe2\x80\x98lasso\xe2\x80\x99 rectangle.\nonlassostop Triggers script when a lasso rectangle\nthat is being dragged stops (see the\nUltrix UI with the physical view of the\nframe for an example).\nonload Triggered when the panel has finished\nloading or is reloaded\nonmousedown Triggers script at onmouse click down\nevent.\nonmouseenter Triggers script when the pointer moves\nover the component.\nonmouseexit Triggers script when the pointer leaves\nthe component.\nonmouseup Triggers script on mouse click up event.\nonmousemove Triggers script when mouse moves over\ncomponent\nonmouseup Triggers script when the mouse is\nreleased after having been pressed\nwhile pointing to the component.\nDashBoard CustomPanel Development Guide OGLML Reference \xe2\x80\xa2 145Attribute Values Restrictions Description\nonresize Triggers script when the component is\nresized.\noid Positive integer Must be a defined The OID of the parameter to target.\nOID.\nOnly applies to\n\xe2\x80\x9conchange\xe2\x80\x9d\nelement List of array All array By default, all elements of an array\nindices elements parameter are targeted. This attribute\nseparated by referenced must can be used to return a subset of the\ncommas exist in the array. If a list is provided, only the\nparameter value. elements at the provided indices are\nreturned (note- you can specify the\nelements in any order).\nOnly applies to\n\xe2\x80\x9conchange\xe2\x80\x9d\nThis value must be \xe2\x80\x9c0\xe2\x80\x9d for a non-array\nparameter.\nscript ogScript Can also be the The script to run when triggered by any\ntext content of the of the events listed in \xe2\x80\x9chandles\xe2\x80\x9d.\n<ogscript> tag.\nNote: Default values are shown in bold.\nExample of a Context Menu\nIn this example, an tag uses the event handler to present a menu of\n<ogscript> oncontextmenu\noptions to the user. The menu also includes submenu options. The target is a label with\n.\nid="myMenuLabel"\nWhen the user right-clicks or taps and holds the label, the menu options appear. When the user\nclicks or taps a menu option, the function associated with that option is called. In this example, the\nfunctions output messages to the openGear debug console.\nThe following figure shows the context menu fully expanded, and the messages that appear in the\nopenGear debug console when the user selects each menu option.\n146 \xe2\x80\xa2 OGLML Reference DashBoard CustomPanel Development GuideThe following code produces the context menu shown above:\n<abs contexttype="opengear" style="fg#foreground;">\n<meta>\n<ogscript handles="oncontextmenu" targetid="myMenuLabel">var\nmyContextMenu = {};\nmyContextMenu["First Option"] = function()\n{\nogscript.debug("First Option was selected");\n};\nmyContextMenu["Second Option"] = function()\n{\nogscript.debug("Second Option was selected");\n};\nmyContextMenu["Sub Menu Stem"] = {};\nmyContextMenu["Sub Menu Stem"]["Sub Menu Option 1"] = function()\n{\nogscript.debug("Sub Menu Option 1 was selected");\n};\nmyContextMenu["Sub Menu Stem"]["Sub Menu Option 2"] = function()\n{\nogscript.debug("Sub Menu Option 2 was selected");\n};\nreturn myContextMenu;</ogscript>\n</meta>\n<label height="60" id="myMenuLabel" left="21" name="Label with Menu\nOptions (right-click):" style="txt-\nalign:center;bdr:line;bdr#selectbg;bg#listbg;fg#foreground;" top="25"\nwidth="275"/>\n</abs>\nconstraint\nDefines the constraint of a parameter. The structure of this object depends upon the\nconstrainttype of the parameter. Range constraints are specified as an attribute of a param tag;\nChoice, Alarm Table, and Struct constraints are specified using constraint tags as children to the\nparam object.\nConstraints may be defined within a declaration, or defined globally and referenced by\nparam\nspecific parameters.\nSyntax\nConstraints with inline constraint values:\ntype cvalue constraint-id\n<constraint constrainttype="c " constraint=" " id=" "\n/>\nConstraints defined within a tag with inline constraint values:\nparam\nctype cvalue param-attributes\n<param constrainttype=" " constraint=" " />\nDashBoard CustomPanel Development Guide OGLML Reference \xe2\x80\xa2 147Choice and Alarm Constraints:\ntype param-attributes\n<param constrainttype="c " >\nkey-attributes cvalue\n<constraint > </constraint>\nkey-attributes cvalue\n<constraint > </constraint>\n. . .\n</param>\nChoice and Alarm Constraints defined within a tag:\nparam\nctype param-attributes\n<param constrainttype=" " />\nkey-attributes cvalue\n<constraint > </constraint>\nkey-attributes cvalue\n<constraint > </constraint>\n. . .\n</param>\nSee sections below for examples and syntax for each constraint type.\nConstraint Types\nConstraint Constraint Type Param Type\nUnconstrained INT_NULL INT16_PARAM\nINT16_ARRAY\nINT32_PARAM\nINT32_ARRAY\nFLOAT_NULL FLOAT_PARAM\nFLOAT_ARRAY\nRange Constraint INT_RANGE INT16_PARAM\nINT_STEP_RANGE INT16_ARRAY\nINT32_PARAM\nINT32_ARRAY\nFLOAT_RANGE FLOAT_PARAM\nFLOAT_STEP_RANGE FLOAT_ARRAY\nInteger Choice INT_CHOICE INT16_PARAM\nConstraint INT16_ARRAY\nINT32_PARAM\nINT32_ARRAY\nString Choice Constraint STRING_CHOICE STRING_PARAM\nSTRING_ARRAY\nAlarm Table ALARM_TABLE INT16_PARAM\nINT32_PARAM\nConstraint Reference ID_REFERENCE All\nStructure STRUCT STRUCT_PARAM\nSTRUCT_ARRAY\nNote If no constraint is specified for a parameter, it will be unconstrained by default.\nRefer to the appropriate section below for definition of the constraint object for each constraint\ntype.\n148 \xe2\x80\xa2 OGLML Reference DashBoard CustomPanel Development Guideconstraint (Unconstrained)\nSpecifies that a parameter is unconstrained. All parameters are considered unconstrained by\ndefault if no constraint is applied.\nSyntax\nconstraint-type attributes\n<param constrainttype=" " />\nAttributes\nAttribute Values Restrictions Description\nconstrainttype INT_NULL param type: Parameter is unconstrained\nINT16_PARAM\nINT16_ARRAY\nINT32_PARAM\nINT32_ARRAY\nFLOAT_NULL param type:\nFLOAT_PARAM\nFLOAT_ARRAY\nExamples\nThe following constraint specifies an integer to be unconstrained:\n<param constrainttype="INT_NULL" name="Delay" oid="0x500"\ntype="INT16_PARAM"/>\nconstraint (Constraint Reference)\nReferences a globally-defined constraint. A constraint may be specified globally in the\n<meta>\nblock. These globally-defined constraints may then by referenced by specific parameters.\nDashBoard CustomPanel Development Guide OGLML Reference \xe2\x80\xa2 149Syntax\nconstraint-id constraint-type\n<constraint id=" " constrainttype=" ">\nconstraint-id\n<param constrainttype="ID_REFERENCE" constraint=" "\nattributes\n/>\nAttributes\nAttribute Values Restrictions Description\nid String Unique identifier for this constraint\nconstrainttype Any valid Param type must See Constraint Types for valid constraint\nconstraint type be compatible types.\nwith the\nreferenced\nconstraint.\nExamples\nThe following example creates a global constraint . Params , and\nVideoFormat 0x501 0x502\nare all constrained using this constraint definition.\n0x503\n<constraint constrainttype="INT_CHOICE" id="VideoFormat">\n<constraint key="0">480i-59.94</constraint>\n<constraint key="1">576i-50</constraint>\n<constraint key="2">1080i-29.97</constraint>\n<constraint key="3">1080i-25</constraint>\n<constraint key="4">720p-59.94</constraint>\n<constraint key="5">720p-50</constraint>\n<constraint key="6">1080p-59.94</constraint>\n<constraint key="7">1080p-50</constraint>\n</constraint>\n<param constrainttype="ID_REFERENCE" constraint="VideoFormat" name="Vid1"\noid="0x501" type="INT16_PARAM"/>\n<param constrainttype="ID_REFERENCE" constraint="VideoFormat" name="Vid2"\noid="0x502" type="INT16_PARAM"/>\n<param constrainttype="ID_REFERENCE" constraint="VideoFormat" name="Vid3"\noid="0x503" type="INT16_PARAM"/>\nconstraint (Range Constraints)\nConstrains a numeric parameter type to a specific range. Minimum and maximum values effect\nthe parameter\xe2\x80\x99s valid range. Display minimum and maximum values scale the parameter value to a\ndifferent range for display purposes. Finally a step value can be set to constrain the minimum step\nsize a value may be changed by.\nSyntax\nMin / Max Constraint:\nmin;max; constraint-type attributes\n<param constraint=" " constrainttype=" "\n/>\n150 \xe2\x80\xa2 OGLML Reference DashBoard CustomPanel Development GuideMin / Max Constraint with Display-Min and Display-Max:\nmin;max;display-min;display-max;\n<param constraint=" "\nconstraint-type attributes\nconstrainttype=" " />\nMin / Max Step Constraint:\nmin;max;step constraint-type\n<param constraint=" " constrainttype=" "\nattributes\n/>\nMin / Max Step Constraint with Display-Min and Display-Max:\nmin;max;display-min;display-max;step\n<param constraint=" "\nconstraint-type attributes\nconstrainttype=" " />\nAttributes\nAttribute Values Restrictions Description\nconstrainttype INT_RANGE param type: Type of constraint\nINT_STEP_RANGE INT16_PARAM\nINT16_ARRAY\nINT32_PARAM\nINT32_ARRAY\nFLOAT_RANGE param type:\nFLOAT_STEP_RANGE FLOAT_PARAM\nFLOAT_ARRAY\nconstraint min Required Minimum value to which a parameter\ncan be set\nmax Required Minimum value to which a parameter\ncan be set\ndisplay-min Optional; must be The displayed value of the parameter\nused with when the parameter has a value of\ndisplay_max. min. The default value is min.\ndisplay-max Optional; must be The displayed value of the parameter\nused with when the parameter has a value of\ndisplay_min. max. The default value is max.\nstep xxx_STEP_RAN Smallest increment a value may be\nGE constraints changed by. Spinner widgets will\nonly increment a parameter by the step\nvalue. Note that the step increment is\napplied to the parameter value, not\nthe display value.\nExamples\nThe following example constrains a FLOAT_PARAM to [0,100]:\n<param constraint="0.0;100.0;" constrainttype="FLOAT_RANGE" name="Delay"\noid="audio.delay" type="FLOAT_PARAM"/>\nThe following example constrains an integer to [0, 255] mapping it to a display range of [0, 100],\nand the value increments by steps of 2:\n<param constraint="0;255;0;100;2" constrainttype="INT_STEP_RANGE"\nname="Gain" oid="key1.gain" type="INT16_PARAM"/>\nDashBoard CustomPanel Development Guide OGLML Reference \xe2\x80\xa2 151constraint (Integer Choice Constraints)\nChoice constraints provide a list of possible values for a parameter, based upon a text selection.\nFor integer parameters, the parameter may only be assigned a value specified in the constraint.\nSyntax\nparam-type attributes\n<param constrainttype="INT_CHOICE" type=" " >\nchoice1-key choice1-value\n<constraint key=" "> </constraint>\nchoice2-key choice2-value\n<constraint key=" "> </constraint>\n. . .\n</param>\nAttributes\nAttribute Values Restrictions Description\ntype INT16_PARAM Parameter must be integer type.\nINT32_PARAM\nINT16_ARRAY\nINT32_ARRAY\nkey Integer Numeric assignment of current\nenumerated choice.\nvalue String Text name for the current enumerated\nchoice\nExamples\nThe following constraint provides an enumerated choice:\n<param constrainttype="INT_CHOICE" name="Channel" oid="0x503"\ntype="INT16_PARAM">\n<constraint key="0">Channel 01</constraint>\n<constraint key="1">Channel 02</constraint>\n<constraint key="2">Channel 03</constraint>\n<constraint key="3">Channel 04</constraint>\n</param>\nconstraint (String Choice Constraints)\nChoice constraints provide a list of possible values for a parameter, based upon a text selection.\nFor String parameters, the constraint provides a set of defaults, but the user may arbitrarily enter\nany other value for the parameter.\nSyntax\nparam-type attributes\n<param constrainttype="STRING_CHOICE" type=" " >\nvalue\n<constraint> </constraint>\nvalue\n<constraint> </constraint>\n. . .\n</param>\n152 \xe2\x80\xa2 OGLML Reference DashBoard CustomPanel Development GuideAttributes\nAttribute Values Restrictions Description\ntype STRING_PARAM Parameter must be string type.\nSTRING_ARRAY\nvalue String Available strings for drop-down widget\nExamples\nThe following constraint provides five string options for a String parameter.\n<param constrainttype="STRING_CHOICE" name="Name" oid="0x504"\ntype="STRING_PARAM">\n<constraint>Zeus Test Card</constraint>\n<constraint>ZTC</constraint>\n<constraint>Johnny</constraint>\n<constraint>Matilda</constraint>\n</param>\nFigure 81 \xe2\x80\x93 String Choice\nconstraint (Alarm Table)\nAlarm constraints map a set of alarms as bitfields into an INT16_PARAM or INT32_PARAM.\nEach bit represents an independent alarm which may have a message and severity assigned to it.\nAlarm parameters contribute to the device\xe2\x80\x99s overall alarm status in DashBoard; the most severe\nalarm set will determine the device\xe2\x80\x99s overall reported alarm status.\nSyntax\nparam-type attributes\n<param constrainttype="ALARM_TABLE" type=" " >\nbit-number severity value\n<constraint key=" " severity=" "> </constraint>\nbit-number severity value\n<constraint key=" " severity=" "> </constraint>\n. . .\n</param>\nAttributes\nAttribute Values Restrictions Description\ntype INT16_PARAM Parameter must be integer type.\nINT32_PARAM\nkey Integer INT16: 0..15 The bit position for the alarm (0 is LSB).\nINT32: 0..31\nseverity Integer The severity of the alarm:\n0 = OK\n1 = WARN\n2 = ERROR\nvalue String Alarm message text\nDashBoard CustomPanel Development Guide OGLML Reference \xe2\x80\xa2 153Examples\nThe following constraint creates an alarm table:\n<param constrainttype="ALARM_TABLE" name="Alarm" oid="0x504"\ntype="INT16_PARAM">\n<constraint key="0" severity="0">Hardware OK</constraint>\n<constraint key="1" severity="2">Hardware Error</constraint>\n<constraint key="2" severity="1">Flash Memory Full</constraint>\n</param>\nconstraint (Struct Constraints)\nStruct Constraints allow a parameter to define a complex structure of multiple parameters. The\nStruct Constraint is applied to each parameter that is an instance of a Struct.\nSyntax\nstruct-type\n<param constrainttype="STRUCT" structtype=" "\ntemplate-oid\ntemplateoid=" "\nparam-attributes\ntype="STRUCT" >\nAttributes\nAttribute Values Restrictions Description\ntype String Required Set to\n"STRUCT"\ntemplateoid String Specifies a template OID to pre-populate\nthe structure. All parameters, constraints\nand widgets for the sub-OIDs are copied\nfrom the template.\nstructtype String Must be unique Defines the structure type. Used by\nPanelBuilder to type-check custom\nwidgets against defined struct\nparameters.\nExamples\nThe following code is an example of a struct definition.\n<param constrainttype="STRUCT" name="Clip Info" oid="clipInfo"\nstructtype="playinfo" type="STRUCT" widget="36">\n<value>\n<subparam name="Clip Name" suboid="ClipName" type="STRING"\nvalue="Test"/>\n<subparam name="Director" suboid="Director" type="STRING"\nvalue="Test"/>\n<subparam name="Date" suboid="AirDate" type="STRING"\nvalue="Test"/>\n<subparam name="Author" suboid="Author" type="STRING"\nvalue="Test"/>\n</value>\n</param>\n154 \xe2\x80\xa2 OGLML Reference DashBoard CustomPanel Development GuideThe following declaration utilizes the previous example as a template, by specifying the\ntemplateoid attribute:\n<param constrainttype="STRUCT" name="Clip List" oid="clipList"\nstructtype="playinfo" templateoid="clipInfo" type="STRUCT_ARRAY"\nwidget="36">\n<value>\n<subparam suboid="ClipName" value="Winter is Coming"/>\n<subparam suboid="Director" value="Tim Van Patten"/>\n<subparam suboid="OriginalAirDate" value="April 24, 2011"/>\n<subparam suboid="Author" value="David Benoiff &amp; D.B. Weiss"/>\n</value>\n<value>\n<subparam suboid="ClipName" value="The Kingsroad"/>\n<subparam suboid="Director" value="Brian Kirk"/>\n<subparam suboid="OriginalAirDate" value="April 24, 2011"/>\n<subparam suboid="Author" value="David Benoiff &amp; D.B. Weiss"/>\n</value>\n<value>\n<subparam suboid="ClipName" value="Lord Snow"/>\n<subparam suboid="Director" value="Brian Kirk"/>\n<subparam suboid="OriginalAirDate" value="May 1, 2011"/>\n<subparam suboid="Author" value="David Benoiff &amp; D.B. Weiss"/>\n</value>\n<value>\n<subparam suboid="ClipName" value="A Golden Crown"/>\n<subparam suboid="Director" value="Daniel Minahan"/>\n<subparam suboid="OriginalAirDate" value="May 22, 2011"/>\n<subparam suboid="Author" value="David Benioff &amp; D. B.\nWeiss"/>\n</value>\n</param>\nparams\nThe parent container for parameters defined within the OGLML document. This tag may only\ncontain tags.\n<param>\nSyntax\n<params>\nparam-attributes\n<param />\nparam-attributes\n<param />\n. . .\n</params>\nAttributes\nNone.\nDashBoard CustomPanel Development Guide OGLML Reference \xe2\x80\xa2 155timer\nThe timer tag fires events at regular intervals. Timers can operate on their own or linked to other\ntimers. ogScript commands exist to start/stop/reset timers (see ogScript documentation for more\ndetails).\nTasks are attached to listener tags to process data received.\nAttributes\nAttribute Values Restrictions Description\nid String Optional The ID used to reference this timer.\nRequired for ogScript, child timers, or\nexternal <timertask/> tags to interact\nwith the timer.\nsource String Optional. If used, the timer being defined will be a\nMust be the ID of child of the timer with the given ID.\nanother timer.\nrate Long Not applicable if The rate (in milliseconds) at which the\n\xe2\x80\x9csource\xe2\x80\x9d is set. timer fires.\ndelay Long Not applicable if The delay (in milliseconds) before the\n\xe2\x80\x9csource\xe2\x80\x9d is set. timer initially fires.\npattern String The display pattern for the timer\xe2\x80\x99s\ncurrent time:\nhttps://docs.oracle.com/javase/8/docs/ap\ni/java/text/SimpleDateFormat.html\nstart Long The start value of the timer. If start >\nor time in stop, timer counts down.\nformat of If start is undefined, the timer is \xe2\x80\x98clock\n\xe2\x80\x9cpattern\xe2\x80\x9d mode\xe2\x80\x99\nstop Long The start value of the timer. If start >\nor time in stop, timer counts down.\nformat of If start is undefined, the timer is \xe2\x80\x98clock\n\xe2\x80\x9cpattern\xe2\x80\x9d mode\xe2\x80\x99\nautostart True Default value is Whether or not the timer automatically\n*false true if \xe2\x80\x98clock starts. If it is not automatically started,\nmode\xe2\x80\x99 is used. an ogScript command must be issued to\nthe timer to start it.\n156 \xe2\x80\xa2 OGLML Reference DashBoard CustomPanel Development Guidelistener\nThe listener tag allows an OGLML page to process network communications using protocols not\nalready available. It is designed for small and simple protocols only.\nThe listener tag can work in two different modes: listen for incoming connections (server mode) or\nestablish a connection (client mode). In both cases, the listener tag will listen for incoming data\nfrom the remote system.\nTasks are attached to listener tags to process data received.\nAttribute Values Restrictions Description\nconnecthost String Cannot be used if The hostname of the remote host to\nlistenport is connect to.\ndefined.\nconnectport Integer Cannot be used if The port to connect to on the remote\nlistenport is host.\ndefined.\nlistenport Integer Cannot be used if The local port to listen on for new\nconnectport/conn connections.\nect host are\ndefined.\ndelimitertype newline Required. The mechanism used to separate one\nbytes incoming message from another.\nfixedlen \xe2\x80\x9cnewline\xe2\x80\x9d = read bytes until 0x0A is\nreceived\nvarlen\n\xe2\x80\x9cbytes\xe2\x80\x9d = convert value in \xe2\x80\x9cdelimiter\xe2\x80\x9d\nstring\nattribute into a byte array and wait for\nthose bytes.\n\xe2\x80\x9cfixedlen\xe2\x80\x9d = read a fixed number of bytes\nfor each message.\n\xe2\x80\x9cstring\xe2\x80\x9d = convert value in \xe2\x80\x9cdelimeter\xe2\x80\x9d into\nUTF-8 bytes and wait for those bytes.\n\xe2\x80\x9cvarlen\xe2\x80\x9d = convert value in \xe2\x80\x9cdelimiter\xe2\x80\x9d to\nan integer \xe2\x80\x9cn\xe2\x80\x9d. The first [n] bytes of the\nmessage indicate how many bytes\nfollow.\ndelimiter May be required The data for the delimiter. Changes\ndepending on depending on the value of delimitertype\nvalue of bytes: The bytes in the message\ndelimitertype delimiter. E.g. to listen for a Carriage\nReturn/Line Feed combination \xe2\x80\x9c0D0A\xe2\x80\x9d.\nfixedlen: The number of bytes in each\nmessage.\nString: The UTF-8 String to wait for to\nindicate the end of a message. E.g.\n\xe2\x80\x9cEND\xe2\x80\x9d\nvarlne: The number of bytes to read to\ndetermine message length. E.g. if your\nprotocol defines a 2-byte length count at\nthe beginning of each message, the\nvalue would be \xe2\x80\x9c2\xe2\x80\x9d.\nsyncword Optional Defines an array of bytes to read at the\nstart of an incoming message. E.g. for\nopenGear protocol, the sync word would\nbe \xe2\x80\x9cBAD2ACE5\xe2\x80\x9d\nDashBoard CustomPanel Development Guide OGLML Reference \xe2\x80\xa2 157Attribute Values Restrictions Description\nblockingpause true When processing tasks, blockingpause\nfalse means that all message processing is\ndone in the message RX Thread. This\nmeans that if a \xe2\x80\x9cpause\xe2\x80\x9d task is\nencountered, all RX of messages will\npause too.\nbuttontype toggle If no button is defined, the listener is\nnone automatically started. If a button is\ndefined, this allows the user to toggle the\nlistener off/on.\nautostart true Whether or not the listener should be\nfalse automatically started.\nThis is always true if no buttontype has\nbeen defined.\nExample\n<listener autostart="true" delimitertype="newline" listenport="12345">\n<task tasktype="ogscript">if (event.isMessageEvent())\n{\nvar rec = event.getBytesAsString().trim();\nvar response = \'\';\nfor (var i = rec.length - 1; i &gt;= 0; i--)\n{\nresponse += rec.charAt(i);\n}\nthis.writeString(\'REVERSE: \' + response + \'\\n\', false);\n}\n</task>\n</listener>\ntask\nDefines a block of ogScript to be run when an event happens in the system. Tasks inside of label\ntags are fired when the label is clicked. Tasks inside of button tags are fired when the button is\npressed. Tasks inside of listener tags are fired whenever a connection is established or whenever\ndata is received.\nThe text content of the tag contains the actual ogScript to be executed.\nSyntax\ncomponent\n< >\ntask-type ogScript-code\n<task tasktype=" "> </task>\ncomponent\n</ >\n158 \xe2\x80\xa2 OGLML Reference DashBoard CustomPanel Development GuideAttributes\nTag Values Restrictions Description\ntasktype *ogscript This attribute tells the editor user\nrobot interface what type of task is contained\nin the tag body. Manually-edited tasks\nvdcp\nshould simply use ogscript.\nrosstalk\nogparamset\ntimercontrol\ntimertask\nDefines a block of ogScript to be run when a timer goes off. The timer must be in the same scope\nas the timertask. The text content of the tag contains the actual ogScript to be executed.\nSyntax\ncontainer\n< >\ntimer-id\n<timer id=\xe2\x80\x9d \xe2\x80\x9d/>\ncontainer\n< >\ncontainer\n< >\ntask-type timer-id\n<timertask tasktype=" " timerid=\xe2\x80\x9d \xe2\x80\x9d>\nogScript Code\n</timertask>\n</container>\n</container>\n</container>\nAttributes\nTag Values Restrictions Description\ntasktype *ogscript This attribute tells the editor user\nrobot interface what type of task is contained\nin the tag body. Manually-edited tasks\nvdcp\nshould simply use ogscript.\nrosstalk\nogparamset\ntimercontrol\ntimerid String Must match the Defines the ID of a timer to fire this\nid attribute of a timertask. This allows a timer to be\ntimer tag defined at the document root but perform\naccessible in this actions on elements defined much\ntasks\xe2\x80\x99s scope. deeper in the document structure.\nDashBoard CustomPanel Development Guide OGLML Reference \xe2\x80\xa2 159include\nThis tag allows an OGLML document to be assembled from several individual XML files or\nfragments. The tag provides a URL, which is retrieved and then replaces the tag with the contents\nof the referenced OGLML document.\nAttribute Values Restrictions Description\n*src URL for http, Points to an OGLML document at the\nhttps, or \xe2\x80\x9ceo\xe2\x80\x9d given URL.\nDocuments are refreshed when a card is\nre-queried (i.e. either card sends an\nexternal object change, or\nOGP_RESTART, or user clicks\n\xe2\x80\x9crefresh\xe2\x80\x9d). HTTP fetches use if-modified-\nsince header and ETag (as defined in\nRFC 2616 section 14.25 and 14.19\nrespectively)\nA DashBoard-specific scheme \xe2\x80\x9ceo\xe2\x80\x9d can\nbe used to fetch content from an\nExternal Object. Examples would be\n\xe2\x80\x9ceo://1234\xe2\x80\x9d or \xe2\x80\x9ceo://0x4D2\xe2\x80\x9d). If this\nformat is used, DashBoard will look for\nthe OGLML document referenced by the\nprovided external object (contained\nwithin an OGLML Descriptor).\nFor more information, see OGLML URLs\non page 53.\nDevice Resource Declarations\nThis section describes tags used to declare resources. These tags may be used in a stand-alone\nXML file (such as a . or . file), or may be embedded within an OGLML document\nogd xml\n(typically within a block).\n<meta>\nResource XML File\nData store resources may be backed by an XML file. Below is an outline of the XML file\nstructure:\n<?xml version="1.1" encoding="UTF-8"?>\n<frame>\n<card>\n<params>\n<param/>\n<param/>\n. . .\n</params>\n<statusmenu>\n<menu>\n<param/>\n<param/>\n160 \xe2\x80\xa2 OGLML Reference DashBoard CustomPanel Development Guide. . .\n</menu>\n<menu/>\n. . .\n</statusmenu>\n<configmenu>\n<menu>\n<param/>\n<param/>\n. . .\n</menu>\n<menu/>\n. . .\n</configmenu>\n<menugroup>\n<menu>\n<param/>\n<param/>\n. . .\n</menu>\n<menu/>\n. . .\n</menugroup>\n<menugroup/>\n. . .\n</card>\n<card/>\n. . .\n</frame>\nResources within the block may also be declared within an OGLML document, and\n<card>\nshould be located within a block.\n<meta>\ncommands\nDefines an OGP command for a device. OGP commands provide a way to use the OGP\nconnection to execute commands from other devices.\nThe primary difference between using commands and parameters, is that the DashBoard OGP\nClient does not keep track of the state of the parameters in a command. The value of each\nparameter is specific to the execution request. This allows DashBoard to send multiple crosspoint\nDashBoard CustomPanel Development Guide OGLML Reference \xe2\x80\xa2 161command requests to the device and each one can have different values for the source/destination.\nOnce an OGP device has been added to DashBoard, you can use OGP commands to issue device\ncommands directly from a CustomPanel. For example, the CustomPanel below shows a subset of\na device commands that have been added to a CustomPanel. You can also create workflows using\nlogic blocks in the Visual Logic Editor or editing the code directly in the ogScript Editor.\nSyntax\n"command1":{\n"oid": "command1",\n"name": "command 1",\n"type": "STRUCT",\n"readonly": false,\n"widget": "default",\n"value": ...\n},\n"command2":{\n"oid": "command2",\n"name": "command 2",\n"type": "STRUCT",\n"readonly": false,\n"widget": "default",\n"value": ...\n}\nAttributes\nAttribute Values Restrictions Description\noid String *Required Command oid.\nname String Not required Command name.\ntype String *Required Data type for the command.\nreadonly Boolean Not required If set to true, the parameter is read-only.\nwidget String Not required The widget used to dislay the data in\nDashBoard.\nconstraint constraint Not required Parameter Constraint.\nObject\nconfig config Object Not required Extended parameter configuration.\nvalue String Not required Value of the parameter. Defines an\nargument that can be passed to the\ncommand.\nExamples\nThis example shows a command called that has a\n"SetResolution" "Resolution"\nargument that is constrained to the following choices: NTSC, PAL, 720P, and 1080P. The\ncommand is also shown in the Visual Logic Editor below.\nFigure 82 \xe2\x80\x93Visusal Logic Representation of the Command\n162 \xe2\x80\xa2 OGLML Reference DashBoard CustomPanel Development Guide"commands":{\n"SetResolution":{\n"oid":"SetResolution",\n"name":"Set Resolution",\n"readonly":false,\n"type":"STRUCT",\n"widget":"default",\n"value":[\n{\n"ResolutionOptions":{\n"name":"Resolution",\n"readonly":false,\n"type":"STRING",\n"widget":"text",\n"maxlength":"0",\n"totallength":"0",\n"constraint":{\n"value":"STRING_STRING_CHOICE",\n"choices":[\n{\n"value":"NTSC",\n"key":"NTSC"\n},\n{\n"value":"PAL",\n"key":"PAL"\n},\n{\n"value":"720P",\n"key":"720P"\n},\n{\n"value":"1080P",\n"key":"1080P"\n}\n],\n"strict":false\n},\n"value":"720P"\n}\nDashBoard CustomPanel Development Guide OGLML Reference \xe2\x80\xa2 163}\n],\n"constraint":{\n},\n"response":true\n}\n}\ncommand\nDefines an OGP command for a device. OGP commands provide a way to use the OGP\nconnection to execute commands from other devices. For more information, see the entry above.\nSyntax\n"command1":{\n"oid": "command1",\n"name": "command 1",\n"type": "STRUCT",\n"readonly": false,\n"widget": "default",\n"value": ...\n}\nAttributes\nAttribute Values Restrictions Description\noid String *Required Command oid.\nname String Not required Command name.\ntype String *Required Data type for the command.\nreadonly Boolean Not required If set to true, the parameter is read-only.\nwidget String Not required The widget used to dislay the data in\nDashBoard.\nconstraint constraint Not required Parameter Constraint.\nObject\nconfig config Object Not required Extended parameter configuration.\nvalue String Not required Value of the parameter. Defines an\nargument that can be passed to the\ncommand.\nconfig\nProvides a container for extended configuration key-value pairs for elements related to a\n164 \xe2\x80\xa2 OGLML Reference DashBoard CustomPanel Development Guideparameter. Contents are dependent on other constraints, parameter types or widgets.\nSyntax\n<param>\n<config key="key">value</config>\n<config key="key">value</config>\n. . .\n</param>\nDashBoard CustomPanel Development Guide OGLML Reference \xe2\x80\xa2 165Attributes\nAttribute Values Restrictions Description\nkey String Configuration parameter name\nvalue String Configuration parameter value\nExample\nThe following config object sets attributes of a graph widget:\n<param oid="Fader_Bar" right="5" widget="256">\n<config key="w.time">5</config>\n<config key="w.autoadvance">true</config>\n<config key="w.plotbg">#dark</config>\n<config key="w.plotfg">#00FF00</config>\n<config key="w.grid">#panelfg</config>\n<config key="w.hidelegend">true</config>\n<config key="w.hidey">false</config>\n<config key="w.hidex">false</config>\n</param>\nconstraint\nDefines the choice constraint for a parameter. For constraints, the integer value is\nINT_CHOICE\ndefined with the key attribute and the text to display is the text content of the tag. For\nconstraints, each constraint tag contains a value to populate a combo-box drop-\nSTRING_CHOICE\ndown.\nThe parameter must have a constrainttype of , or\nINT16_CHOICE INT32_CHOICE\n.\nSTRING_CHOICE\nSyntax\nchoice1-key choice1-value\n<constraint key=" "> </constraint>\nAttributes\nAttribute Values Restrictions Description\nkey Integer Not required for Numeric assignment of current\nSTRING_CHOICE enumerated choice.\nconstraints\nvalue String Text name for the current enumerated\nchoice\nExamples\nThe following constraint provides an enumerated choice:\n<param constrainttype="INT_CHOICE" name="Channel" oid="0x503"\ntype="INT16_PARAM">\n<constraint key="0">Channel 01</constraint>\n<constraint key="1">Channel 02</constraint>\n<constraint key="2">Channel 03</constraint>\n<constraint key="3">Channel 04</constraint>\n</param>\n166 \xe2\x80\xa2 OGLML Reference DashBoard CustomPanel Development GuideThe following constraint provides a list of selections for a STRING parameter:\n<param constrainttype="STRING_CHOICE" name="Name" oid="0x504"\ntype="STRING">\n<constraint>Jeremy Clarkson</constraint>\n<constraint>James May</constraint>\n<constraint>Richard Hammond</constraint>\n<constraint>The Stig</constraint>\n</param>\ncard\nTop-level container for a device within an or file. Encapsulates a device within a\nXML OGD .frame\nfile. Note this tag should not be used as a container within an OGLML document.\nSyntax\n<card autosave="auto-save"\nonline="true" slot="slotno" sourceframe="frame-node-id"\nsourceframename="device-name" sourceid="card-node-id"\nstatus="status-level" statustext="status-text" version="2.0">\nAttributes\nAttribute Values Restrictions Description\nautosave true If true, DashBoard will automatically\nfalse save contents of the resources specified\nin the file from data store periodically.\nonline true Sets the device\xe2\x80\x99s online status. Normally\nfalse should be set to true.\nslot Integer Defines the slot-id for the device.\nsourceframe String node-id of the frame or device.\nsourceframename String Name of the device. This is the top-level\nname shown in the DashBoard Tree\nsourceid String The original node-id of the virtual device\n(used when saved as the offline\nconfiguration of a real device)\nstatus 0 Not required for Status OK\nPanelBuilder\n1 Status WARN\n2 Status ERROR\nstatustext String Not required for Status text for the node.\nPanelBuilder\nversion String Set to .\n2.0\nDefault values shown in bold.\nDashBoard CustomPanel Development Guide OGLML Reference \xe2\x80\xa2 167Example\nThe following example defines a device (openGear card) installed in a frame called \xe2\x80\x9cDemo\nFrame\xe2\x80\x9d, slot 10. The device\xe2\x80\x99s node id is \xe2\x80\x9c172.16.7.230:5253(Slot10)SPG-8260\xe2\x80\x9d.\n<card online="true" slot="10" sourceframe="172.16.7.230:5253"\nsourceframename="Demo Frame"\nsourceid="172.16.7.230:5253&lt;br>Slot 10&lt;br>SPG-8260"\nstatus="0" statustext="OK" version="2.0">\n</card>\nframe\nTop-level container for a frame within a file. Note this tag should not be used as a\n.frame\ncontainer within an OGLML document. Frame files are created by DashBoard.\nSyntax\n<frame name="frame-name" sourceid="node-id" >\n<card/>\n<card/>\n. . .\n</frame>\nAttributes\nAttribute Values Restrictions Description\nName String Display name of the frame\nsourceid String The original node-id of the virtual device\n(used when saved as the offline\nconfiguration of a real device)\nmenu\nDefines the controls to place within a menu tab or menu pop-up. tags within the menu\n<param>\nblock may override the param\xe2\x80\x99s default attributes for display within this menu.\nSynax\n<menu menuid="menu-id" menustate="state" name="name" staticid="static-\nid">\n<param/>\n<param/>\n. . .\n</menu>\n168 \xe2\x80\xa2 OGLML Reference DashBoard CustomPanel Development GuideAttributes\nAttribute Values Restrictions Description\nmenuid Integer Required Numeric ID for the menu. Menu tabs\nwithin a menu group are displayed in\nnumeric order, lowest first. This value\nmay be changed to dynamically re-order\nmenus.\nmenustate 0 Menu is hidden\n1 Menu is displayed, but params are read-\nonly\n2 Menu is displayed and params are\nread/write (based upon individual\nparameter access permissions)\nname String Name of the menu. This name will\nappear in the menu tab.\nstaticid Integer Required Unique numeric identifier for this menu.\nThis value must be only set once and not\nchanged.\nExample\nThe following example creates a menu called \xe2\x80\x9cNetwork Setup\xe2\x80\x9d.\n<menu menuid="257" menustate="2" name="Network Setup" staticid="257">\n<param access="1" name="Addressing Mode" oid="0x0x711"/>\n<param access="1" name="IP Address" oid="0x712"/>\n<param access="1" name="Subnet Mask" oid="0x713"/>\n<param access="1" name="Default Gateway" oid="0x714"/>\n</menu>\nmenugroup\nDefines a menu group. The menugroup is a container for menus. When a menugroup is displayed,\nchild menus are displayed as tabbed elements within the container.\nSyntax\n<menugroup menuid="id" name="menu-group-name">\n<menu/>\n<menu/>\n. . .\n</menugroup>\nAttributes\nAttribute Values Restrictions Description\nmenuid Integer Required Numeric ID for the menu group. This\nvalue must be only set once and not\nchanged.\nmenuid=0 corresponds to the openGear\nstatus menu\nmenuid=1 corresponds to the openGear\nconfiguration menu\nDashBoard CustomPanel Development Guide OGLML Reference \xe2\x80\xa2 169Attribute Values Restrictions Description\nname String Name of the menu group.\nExamples\nThe following example creates a menu group with two menus:\n<menugroup menuid="0" name="Status">\n<menu menuid="0" menustate="2" name="Status" staticid="0">\n<param access="0" name="Card Status" oid="0x201"/>\n<param access="0" name="Reference" oid="0x204"/>\n</menu>\n<menu menuid="1" menustate="2" name="Product Info" staticid="1">\n<param access="0" name="Product" oid="0x105"/>\n<param access="0" name="Name" oid="0x107"/>\n<param access="0" name="Supplier" oid="0x102"/>\n<param access="0" name="Software Rev" oid="0x10B"/>\n</menu>\n</menugroup>\nstatusmenu\nDefines the Status Menu group for the default openGear menu layout. This tag behaves in the\nsame manner as the < tag when the menuid=0.\nmenugroup>\nSyntax\n<statusmenu menuid="id" name="menu-group-name">\n<menu/>\n<menu/>\n. . .\n</statusmenu>\nAttributes\nAttribute Values Restrictions Description\nmenuid Integer Optional. Should Numeric ID for the menu group. This\nbe set to 0. value must be only set once and not\nchanged. Defaults to 0.\nname String Name of the menu group.\n170 \xe2\x80\xa2 OGLML Reference DashBoard CustomPanel Development GuideExample\nThe following example creates a status menu group with two menus:\n<statusmenu menuid="0" name="Status">\n<menu menuid="0" menustate="2" name="Status" staticid="0">\n<param access="0" name="Card Status" oid="0x201"/>\n<param access="0" name="Reference" oid="0x204"/>\n</menu>\n<menu menuid="1" menustate="2" name="Product Info" staticid="1">\n<param access="0" name="Product" oid="0x105"/>\n<param access="0" name="Name" oid="0x107"/>\n<param access="0" name="Supplier" oid="0x102"/>\n<param access="0" name="Software Rev" oid="0x10B"/>\n</menu>\n</statusmenu>\nconfigmenu\nDefines the Config Menu group for the default openGear menu layout. This tag behaves in the\nsame manner as the < tag when the menuid=1.\nmenugroup>\nSyntax\n<configmenu menuid="id" name="menu-group-name">\n<menu/>\n<menu/>\n. . .\n</configmenu>\nAttributes\nAttribute Values Restrictions Description\nmenuid Integer Optional. Should Numeric ID for the menu group. This\nbe set to 1. value must be only set once and not\nchanged. Defaults to 1.\nname String Name of the menu group.\nExample\nThe following example creates a status menu group with 2 menus:\n<configmenu menuid="1" name="Status">\n<menu menuid="513" menustate="2" name="Network Setup" staticid="257">\n<param access="1" name="Addressing Mode" oid="0xFE11"/>\n<param access="1" name="IP Address" oid="0x712"/>\n<param access="1" name="Subnet Mask" oid="0x713"/>\n<param access="1" name="Default Gateway" oid="0x714"/>\n</menu>\n<menu menuid="514" menustate="2" name="Remote Control Setup"\nstaticid="258">\n<param access="1" name="Protocol" oid="0x411"/>\n<param access="1" name="Baud Rate" oid="0x412"/>\n<param access="1" name="Parity" oid="0x413"/>\nDashBoard CustomPanel Development Guide OGLML Reference \xe2\x80\xa2 171<param access="1" name="Stop Bits" oid="0x414"/>\n</menu>\n</statusmenu>\nparams\nThe parent container for parameters defined within the OGLML document. This tag may only\ncontain tags.\n<param>\nSyntax\n<params>\nparam-attributes\n<param />\nparam-attributes\n<param />\n. . .\n</params>\nAttributes\nNone.\nparam\nCreates a parameter descriptor, which defines the parameter. Declaration of a param descriptor\nmust be located within a block. Constraints for the may be included as an\n<params> param\nattribute (for range constraints), or as child tags (for choice constraints).\nSyntax\noid\n<param oid=" " attributes/>\noid\n<param oid=" " attributes>\n<constraint/>\n<constraint/>\n. . .\n<config/>\n<config/>\n. . .\n</param>\nAttributes\nAttribute Values Restrictions Description\noid String Required, except The OID of the parameter (can be used\nfor subparams to override an existing parameter).\nsuboid String Required for If the param declaration is a sub-param\nsubparams within a struct, the OID is specified in the\nsuboid attribute.\naccess 0 Parameter is read-only in DashBoard\n1 Parameter is read-write in DashBoard\nname String Parameter Name\n172 \xe2\x80\xa2 OGLML Reference DashBoard CustomPanel Development GuideAttribute Values Restrictions Description\nwidget Positive integer Must be a valid Defines the default widget hint for the\nwidget hint param.\nmaxlength Positive integer Applies only to The maximum length of any String\nString/String element in the parameter.\nArray parameters\nprecision Positive integer This field defines the number of digits\nfollowing the decimal point displayed for\nprinted numbers. It applies mainly to\nfloating point numbers.\ntype INT16 Param is 16-bit signed integer.\nINT16_ARRAY Param is an array of 16-bit signed\ninteger.\nINT32 Param is 32-bit signed integer.\nINT32_ARRAY Param is an array of 32-bit signed\ninteger.\nSTRING Param is a string.\nSTRING_ARRAY Param is an array of strings.\nFLOAT32 Param is a 32-bit (IEEE single) float.\nFLOAT32_ARRAY Param is an array of 32-bit (IEEE single)\nfloat.\nSTRUCT Param is a struct.\nSTRUCT_ARRAY Param is an array of struct.\nBINARY_VALUE Param is of unknown type.\nconstraint Cvalue See constraint tag for more details.\nconstrainttype Ctype See constraint tag for more details.\nstateless False Parameters are saved to backing source\nTrue Parameters are not saved\nvalue Varies Value type must Specifies the initial value of the param.\nbe compatible Arrays may be initialized by separating\nwith the specified values with " ".\n;\ntype.\nconfig Varies Provides additional widget configuration\nparameters.\nDefault values shown in bold.\nExample\n<param access="1" maxlength="0" name="Message" oid="Message"\ntype="STRING" value="Reverse this message" widget="3"/>\nDashBoard CustomPanel Development Guide OGLML Reference \xe2\x80\xa2 173param (struct)\nCompound parameters may be defined through the use of the param type. A struct\nSTRUCT\ncontains a collection of parameters. Structs may not be nested. Struct must have a\nconstrainttype of . Members of the struct are declared through tags within the\nSTRUCT subparam\ntag.\nvalue\nA struct may also use another param as a template to pre-populate the member sub-param\ndeclarations. This is done through the attribute.\ntemplateoid\nSyntax\noid attributes\n<param constrainttype="STRUCT" oid=" " type="STRUCT" >\n<value>\nsub-oid sub-param-attributes\n<subparam suboid=" " />\nsub-oid sub-param-attributes\n<subparam suboid=" " />\n. . .\n</value>\n</param>\nAttributes\nAttribute Values Restrictions Description\noid String Required The OID of the parameter (can be used\nto override an existing parameter).\naccess 0 Parameter is read-only in DashBoard\n1 Parameter is read-write in DashBoard\nname String Parameter Name\nwidget Positive integer Must be a valid Defines the default widget hint for the\nwidget hint param.\ntype STRUCT Must be set to STRUCT.\nstructtype String Defines the structure type. Specifies a\ndependency of a widget upon a global\nstruct parameter with matching\nstructtype. Currently this type checking\nis restricted only to PanelBuilder UI; a\ncustom widget will only be available in\nPanelBuilder if a parameter exists with\nmatching structtype.\ntemplateoid String Specifies a template struct parameter to\npre-populate the subparams.\nconstrainttype STRUCT Must be set to STRUCT\nvalue Container for subparam elements.\nsubparam param May not be a Member parameters, declared using the\nnested struct same syntax as a param declaration,\nparam with the exception that its oid is specified\nin the attribute suboid.\nDefault values shown in bold.\n174 \xe2\x80\xa2 OGLML Reference DashBoard CustomPanel Development GuideExample\nThe following declares a struct parameter.\n<param access="1" constrainttype="STRUCT" name="Clip Info" oid="clipInfo"\ntype="STRUCT" widget="36">\n<value>\n<subparam name="Clip Name" suboid="ClipName" type="STRING"\nvalue="Test"/>\n<subparam name="Director" suboid="Director" type="STRING"\nvalue="Test"/>\n<subparam name="Air Date" suboid="AirDate" type="STRING"\nvalue="Test"/>\n<subparam name="Author" suboid="Author" type="STRING"\nvalue="Test"/>\n</value>\n</param>\nThe following declares an array of struct params, using the previous example as its template. Note\nthat any attributes specified explicitly will override the values provided in the template.\n<param access="1" constrainttype="STRUCT" name="Clip List" oid="clipList"\ntemplateoid="clipInfo" type="STRUCT_ARRAY" widget="36">\n<value>\n<subparam suboid="ClipName" value="Winter is Coming"/>\n<subparam suboid="Director" value="Tim Van Patten"/>\n<subparam suboid="AirDate" value="April 24, 2011"/>\n<subparam suboid="Author" value="David Benoiff &amp; D.B. Weiss"/>\n</value>\n<value>\n<subparam suboid="ClipName" value="The Kingsroad"/>\n<subparam suboid="Director" value="Brian Kirk"/>\n<subparam suboid="AirDate" value="April 24, 2011"/>\n<subparam suboid="Author" value="David Benoiff &amp; D.B. Weiss"/>\n</value>\n<value>\n<subparam suboid="ClipName" value="Lord Snow"/>\n<subparam suboid="Director" value="Brian Kirk"/>\n<subparam suboid="AirDate" value="May 1, 2011"/>\n<subparam suboid="Author" value="David Benoiff &amp; D.B. Weiss"/>\n</value>\n</param>\nDashBoard CustomPanel Development Guide OGLML Reference \xe2\x80\xa2 175Device Resource Tags\nThe following tags use resources provided by the same device that sent the OGLML document to\nDashBoard.\nThe following tags can be used to incorporate standard openGear UI elements into an OGLML\ndocument. For example the typical device page is composed of the following tagged resources.\n< menugroup mid= "1 " />\n<s ummary/ >\n< param/>\n<m enu/>\n< buttonbar/ >\nFigure 83 \xe2\x80\x93 Device Resource Tags\nNote that the tags described in this section add a control to the UI for manipulating the underlying\nresource. These must be contained within a UI layout container.\nMany of the tags are also used to define the underlying resource in the data store. Declarations\nmay be contained within a block of an OGLML or stand-alone XML file.\n<meta>\n176 \xe2\x80\xa2 OGLML Reference DashBoard CustomPanel Development Guidemenugroup\nThis tag is used to incorporate a top-level menu group as a single component. This includes all\nsub-menus and parameters that would appear in a default-layout OGP menu.\nSyntax\nid\n<menugroup mid=" " />\nAttributes\nAttribute Values Restrictions Description\nMid integer Must be a defined menuid of a defined menu.\ntop-level menu. 0 = Status Menu\n1 = Configuration Menu\n2 = \xe2\x80\x9cExtra\xe2\x80\x9d Menu\nmenu\nThis tag provides a mechanism to display a standard OGP Menu in two different ways:\n\xe2\x80\xa2 Display the entire menu as a single component\n\xe2\x80\xa2 Create a clickable button to display the menu in a balloon dialog (similar to a tool tip).\nSyntax\nmenu-id popup-flag oglml-flag\n<menu mid=" " popup=" " oglml=" "\nposition GeneralAttributes\ntabposition=" " />\nAttributes\nIn addition to General Attributes, the following attributes may be specified to the < tag:\nmenu>\nAttribute Values Restrictions Description\nMid integer Must be a defined The static ID of the OID Menu to draw.\nOID Menu.\nPopup true name attribute A button with the name attribute as its\nmust also be label is the component. When pressed,\nspecified. the menu will appear in a balloon dialog.\nFor more information, see\nWIDGET_MENU_POPUP (20) on page\n32.\nfalse The menu is included as a single\ncomponent.\nOglml true If the referenced menu has been\noverridden by an OGLML page, the\nOGLML version of the menu will be\nused.\nfalse The standard OGP menu without any\nOGLML will be used.\nDashBoard CustomPanel Development Guide OGLML Reference \xe2\x80\xa2 177Attribute Values Restrictions Description\nTabposition north How the tabs are Specifies the placement of the tabs for\neast rendered within any 3rd-level submenus.\nsouth\ntheir quadrant is\ndetermined by\nwest\nthe look and feel\n(i.e. whether the\ntabs fill the\navailable space,\nare positioned to\nthe left, right, or\ncenter of the\nspace, etc.)\nDefault values shown in bold.\nparam\nDisplays a widget to display and manipulate a param. Must be placed within a layout container\ntag. If the param is an array, multiple widgets are displayed (one for each element).\nSyntax\noid\n<param oid=" " attributes/>\noid\n<param oid=" " attributes>\n<constraint/>\n<constraint/>\n. . .\n<config/>\n<config/>\n. . .\n</param>\nAttributes\nAttribute Values Restrictions Description\nShowlabel true Display the parameter name as a label\nfalse beside the parameter elements.\nOid String Must be a defined The OID of the parameter to show.\nOID\n*mid String Must be the static This is used to determine the user rights\nmenu ID of a for a parameter. The menu with the a\ndefined OID staticid matching the specified mid is\nMenu. treated as the parent menu of the\nparameter when checking read/write\nrights and whether it is on a status menu\nor a configuration menu.\nIf no mid is defined, the parameter is\nalways rendered as though it is on a\nconfiguration menu with full read/write\nrights.\n178 \xe2\x80\xa2 OGLML Reference DashBoard CustomPanel Development GuideAttribute Values Restrictions Description\nElement List of array All array By default all elements of an array\nindices elements parameter are returned. This attribute\nseparated by referenced must can be used to return a subset of the\ncommas exist in the array. If a list is provided, only the\nparameter value. elements at the provided indices are\nreturned (note- you can specify the\nelements in any order).\nThis value should either be \xe2\x80\x9c0\xe2\x80\x9d or should\nnot be provided for a non-array\nparameter.\nWidget Positive integer The value must By default, the widget hint provided by\nbe a widget hint the parameter will be used. This\ndefined for the attribute can be used to override the\nparameter\xe2\x80\x99s type parameter\xe2\x80\x99s widget hint with another\none.\nExpand true Only applies to Return each radio or toggle button\nfalse radio and toggle created by a choice constraint as a\nbutton separate element.\nparameters.\nConstrainttype INT_CHOICE Can only be Allows a device developer to override\nor applied to the choice constraint defined in the OGP\nparameters that Parameter Descriptor.\neo://external-\nobject-OID\nalready use\nchoice\nThe parameter must either contain the\nconstraints.\navailable choices in constriant tags\ninside of the param tag or an external\nobject URL pointing to an external object\nthat contains an integer choice\nconstraint.\nOnchange ogScript String The provided snippet of ogScript is\ntriggered when the parameter value\nchanges. A ParamScriptable object\nnamed is created within the\nthis\ncontext of the onchange to view and\nmanipulate the param.\nRelative true Parameter is interpreted as a relative\nparameter within a widget. The widget\ninstance\xe2\x80\x99s baseOID will be prefixed to\nthe param OID to create a fully-qualified\nOID.\nfalse\nDefault values shown in bold.\n*mid is optional but its use is strongly recommended for User Rights Management support.\nDashBoard CustomPanel Development Guide OGLML Reference \xe2\x80\xa2 179constraint\nOverrides the choice constraint for a parameter. For constraints, the integer value is\nINT_CHOICE\ndefined with the key attribute and the text to display is the text content of the tag. For\nconstraints, each constraint tag contains a value to populate a combo-box drop-\nSTRING_CHOICE\ndown.\nThe parameter must have a constrainttype of , or\nINT16_CHOICE INT32_CHOICE\n.\nSTRING_CHOICE\nSyntax\nchoice1-key choice1-value\n<constraint key=" "> </constraint>\nAttributes\nAttribute Values Restrictions Description\nKey Integer Not required for Numeric assignment of current\nSTRING_CHOIC enumerated choice.\nE constraints\nValue String Text name for the current enumerated\nchoice\nExamples\nThe following constraint provides an enumerated choice:\n<param constrainttype="INT_CHOICE" name="Channel" oid="0x503"\ntype="INT16_PARAM">\n<constraint key="0">Channel 01</constraint>\n<constraint key="1">Channel 02</constraint>\n<constraint key="2">Channel 03</constraint>\n<constraint key="3">Channel 04</constraint>\n</param>\nThe following constraint provides a list of selections for a STRING parameter:\n<param constrainttype="STRING_CHOICE" name="Name" oid="0x504"\ntype="STRING">\n<constraint>Jeremy Clarkson</constraint>\n<constraint>James May</constraint>\n<constraint>Richard Hammond</constraint>\n<constraint>The Stig</constraint>\n</param>\nbuttonbar\nCreates the button bar containing the \xe2\x80\x9cRefresh\xe2\x80\x9d, \xe2\x80\x9cUpload\xe2\x80\x9d, \xe2\x80\x9cReboot\xe2\x80\x9d, and \xe2\x80\x9cClose\xe2\x80\x9d buttons.\nNormally this appears at the bottom of a Device Tab. Only a single instance of this tag is\npermitted per OGLML document.\nSyntax\n<buttonbar />\n180 \xe2\x80\xa2 OGLML Reference DashBoard CustomPanel Development GuideAttributes\nNone.\nExample\nThe following displays the button bar:\n<buttonbar/>\nFigure 84 - <buttonbar/> tag\neditor\nInserts the editor UI of another device node from the DashBoard Tree into the current container.\nThe tag may insert either the full editor UI or a compact summary.\neditor\nSyntax\nobject-id template-style root-\n<editor objectid=" " template=" " widgetroot="\nflag\n" />\nAttributes\nAttribute Values Restrictions Description\nObjected String ID of the device node to insert\nTemplate summary Inserts a summary panel for the device.\nWidgetroot Boolean Everything inside of the editor must be\nkept together. Individual elements\ncannot be dragged out to other panels.\nExample\nThe following inserts the full UI for device with id :\n00.0f.9b.00.00.26(Slot 0)MFC-8310\n<editor objectid="00.0f.9b.00.00.26&lt;br&gt;Slot 0&lt;br&gt;MFC-8310"\nwidgetroot="true" />\nThe following inserts a summary panel for the device:\n<editor objectid="00.0f.9b.00.00.26&lt;br&gt;Slot 0&lt;br&gt;MFC-8310"\ntemplate="summary" widgetroot="true" />\nFigure 85 \xe2\x80\x93 Summary Editor\nDashBoard CustomPanel Development Guide OGLML Reference \xe2\x80\xa2 181summary\nCreates the standard card status panel with card name, online state, and overall card status.\nSyntax\n<summary />\nAttributes\nNone.\nExample\nThe following displays the summary panel for a device:\n<summary/>\nFigure 86 - <summary/> tag\nstatuscombo\nDisplay a status icon for a single or multiple items from the DashBoard Tree View. When the\nstatus icon is clicked, a list of tree nodes is expanded; these nodes can be then clicked to open the\neditor for that node.\nThis is largely intended to be created by dragging/dropping items from the DashBoard Tree View\nor Advanced Tree View into a PanelBuilder CustomPanel document.\nA hierarchy of <treeobject/> elements with the same attributes allows you to create combined\nstatus items.\nSyntax\nattributes\n<statuscombo >\n<treeElement name="node-name" objectid="node-id"/>\n<treeElement name="node-name" objectid="node-id"/>\n. . .\n</statuscombo>\nAttributes\nAttribute Values Restrictions Description\nObjected String Must be the The node-id of the element in the tree to\nnode-ID of a display. If the object has children, they\nnode in are automatically shown under the node.\nDashBoard tree\nview\nName String The display name of the item.\n182 \xe2\x80\xa2 OGLML Reference DashBoard CustomPanel Development GuideExample\nThe node-id of a node in the Tree View may be obtained by right-clicking the node and selecting\n\xe2\x80\x9cView Connection Settings\xe2\x80\x9d.\nFigure 87 \xe2\x80\x93 Connection Settings\nThe following code creates a statuscombo with 2 nodes:\n<statuscombo grid="false" left="448" name="Favorite Cards" top="118">\n<treeElement name="Slot 3: ZTC-8399"\nobjectid="172.16.9.31:5253&lt;br&gt;Slot 3&lt;br&gt;ZTC-8399"/>\n<treeElement name="Slot 5: SRA-8602"\nobjectid="10.1.9.36:5253&lt;br&gt;Slot 5&lt;br&gt;SRA-8602"/>\n</statuscombo>\nThe result appears in DashBoard as:\nFigure 88 \xe2\x80\x93 statuscombo\nWhen clicked, it expands as follows:\nFigure 89 \xe2\x80\x93 statuscombo expanded\nDashBoard CustomPanel Development Guide OGLML Reference \xe2\x80\xa2 183If the specified treenode has child nodes, it will appear as follows:\nFigure 90 \xe2\x80\x93 statuscombo with child nodes\nMacro Expansion\nDashBoard includes several pre-defined macros which expand into specific useful information.\nThe following macros are supported:\nMacro Description\n%frame% Expands to the node-id of the current frame\n%device% Expands to the node-id of the current device or card node\n%slot% Expands to the node-id of the specified slot within the current frame\n%value% Expands to a parameter\xe2\x80\x99s value\nExpands to a widget\xe2\x80\x99s id\n%widget%\n%const% Expands to a lookup value\nExpands to a widget\xe2\x80\x99s baseOID\n%baseoid%\n%fully-qualified-id% Expands to the full element id hierarchy\n%panel-path% Expands to the path of the current CustomPanel\n%app-path% Expands to the DashBoard installation directory\n%id% Expands to the id of the current component\n%eval[ogscript]% Performs a regular expression expansion\n184 \xe2\x80\xa2 OGLML Reference DashBoard CustomPanel Development Guide%frame%\nExpands to the node-id of the frame within the current context.\nSyntax\n%frame%\nExample\n<label name="frame node-id is %frame%"/>\nFigure 91 - %frame% macro\n%device%\nExpands to the node-id of the current device within the current context.\nSyntax\n%device%\nExample\n<label name="device node-id is %device%"/>\nFigure 92 - %device% macro\n%slot%\nExpands to the node-id of the specified slot within the frame in the current context.\nSyntax\n%slot slot-number%\nParameters\nParameter Values Restrictions Description\nslot-number Integer Must be a valid slot Slot number of the device whose node-\nnumber within the id is to be returned.\ncurrent frame\nExample\n<label name="slot 2 node-id is %slot 2%"/>\nFigure 93 - %slot% macro\nDashBoard CustomPanel Development Guide OGLML Reference \xe2\x80\xa2 185%value%\nExpands to the value of a specified parameter.\nSyntax\nparam-oid element\n%value [\' \'][ ]%\nParameters\nParameter Values Restrictions Description\nparam-oid String The OID of the parameter whose value\nis returned\nelement Integer The array index to return. For non-array\nparameters this must be set to .\n0\nExample\nThe following displays the value of a parameter:\n<label name="the value of myParam is %value[\'myParam\'][0]%"/>\nThe following example utilizes the macro to allow the value of one parameter to specify\n%value%\nwhich parameter to process. The parameter specifies the OID of the parameter which is\nOIDName\ndisplayed in the line below. Note that when the parameter is changed, it is necessary to\nOIDName\nmanually reload the elements which display the results ( and ), as the\nlabel1 label2 %value%\nmacro is expanded only when the control is rendered.\n<params>\n<param name="OID Name" oid="OIDName" type="STRING" value="testOID2"/>\n<param name="test OID1" oid="testOID1" type="STRING" value="Fred"/>\n<param name="test OID2" oid="testOID2" type="STRING" value="George"/>\n</params>\n<abs>\n<param left="382" oid="params.OIDName" widget="3" width="243">\n<task tasktype="onchange">\nogscript.reload ("label1");\nogscript.reload ("label2");\n</task>\n</param>\n<label id="label1" left="382" name="The value of\n%value[\'OIDName\'][0]% is"/>\n<param id="label2" left="575" oid="%value[\'OIDName\'][0]%"\nwidget="1"/>\n</abs>\nFigure 94 - %value% macro\n186 \xe2\x80\xa2 OGLML Reference DashBoard CustomPanel Development Guide%widget%\nExpands to the id of widget within the current context.\nSyntax\n%widget%\nExample\nIf used within a widget, the following displays the widget\xe2\x80\x99s ID:\n<label name="the value of myParam is %widget%"/>\n%const%\nExpands to the value of a lookup. The lookup must have a specified id.\nSyntax\nid key\n%const[\' \'][\' \']%\nParameters\nParameter Values Restrictions Description\nid String Must be an id ID of the lookup tag.\ndefined in a\ntag\n<lookup>\nkey String Must be a valid Key within the lookup tag whose value\nkey within the will be returned.\nspecified lookup.\nExample\nGiven the following lookup:\n<lookup id="family" scope="private">\n<entry key="father">Homer Simpson</entry>\n<entry key="son">Bart Simpson</entry>\n<entry key="mother">Marge Bouvier-Simpson</entry>\n<entry key="daughter">Lisa</entry>\n<entry key="baby">Maggie</entry>\n</lookup>\nThe following code will display the label \xe2\x80\x9cThe son is Bart Simpson\xe2\x80\x9d.\n<label "The son is %const[\'family\'][\'son\']%"/>\nDashBoard CustomPanel Development Guide OGLML Reference \xe2\x80\xa2 187%baseoid%\nExpands to the value of the baseOID attribute of the current widget.\nSyntax\n%baseoid%\nExample\nIf you have a widget with a baseoid of params.audio.channels.1 with parameters for signal\npresence, EQ, etc., you could attach change handlers to them as follows:\n<ogscript handles=\xe2\x80\x9donchange\xe2\x80\x9d oid=\xe2\x80\x9d%baseoid%.eq\xe2\x80\x9d element=\xe2\x80\x9d0\xe2\x80\x9d>\nogscript.debug(\xe2\x80\x98EQ has changed for %baseoid%:\xe2\x80\x98 + this.getValue());\n</ogscript>\n%fully-qualified-id%\nExpands to the fully-qualified id of the current context. If the current context is nested within other\ncontexts, the hierarchy is expressed, separated by \xe2\x80\x9c \xe2\x80\x9d. Note that only containers with a specified id\n.\nare included in the expansion.\nSyntax\n%fully-qualified-id%\nExample\n<abs id="abs1">\n<abs>\n<abs id="abs2">\n<label "The fully qualified ID is %fully-qualified-id%"/>\n</abs>\n</abs>\n</abs>\nFigure 95 - %fully-qualified-id% macro\n%panel-path%\nExpands to the folder path which contains the current OGLML document.\nSyntax\n%panel-path%\nExample\n<label name="panel path is %panel-path%" />\nFigure 96 - %panel-path% macro\n188 \xe2\x80\xa2 OGLML Reference DashBoard CustomPanel Development Guide%app-path%\nExpands to the folder path which the current instance of DashBoard is installed.\nSyntax\n%app-path%\nExample\n<label name="DashBoard is installed in %app-path%" />\nFigure 97 - %app-path% macro\n%id%\nExpands to the id of the current context.\nSyntax\n%id%\nExample\n<label height="62" left="0" name="Click to see my context\'s ID"\nstyle="txt-align:center;" top="0" width="291">\n<task tasktype="ogscript">ogscript.debug(\'My Context\\\'s ID is\n"%id%"\');</task>\n</label>\n%eval[ogscript]%\nEvaluates the ogscript and replace the %eval[ogscript]% with the value returned by the script.\nSyntax\n%eval [ogscript]%\nExample\n<label height="62" left="0" name="%eval[var text = \'\'; for (var i = 0; i\n&lt; 10; i++){text += i + \' \';} text.trim();]%" style="txt-align:center;"\ntop="0" width="291"/>\nDashBoard CustomPanel Development Guide OGLML Reference \xe2\x80\xa2 189ogScript Reference\nAbout ogScript\nRoss Video ogScript is a programming language developed by Ross Video to interact with DashBoard-\nenabled devices.\nIt also enables you to add functionality and logic to custom panels you create in DashBoard.\nRoss Video ogScript uses JavaScript functions, syntax, and primitive object types. To enable CustomPanel\ndevelopers to interact with panels and devices, ogScript adds some new global objects to JavaScript.\nMost JavaScript works in ogScript scripts, although you might run across an occasional item that does\nnot work.\nFor information about ogScript objects and functions, refer to the topics in this section. For information\nabout JavaScript commands and syntax, search for \xe2\x80\x9cJavaScript Reference\xe2\x80\x9d on the World Wide Web.\nThis section contains information about ogScript objects and functions. It includes the following major\nsections:\n\xe2\x80\xa2 ogscript Object\n\xe2\x80\xa2 params Object\n\xe2\x80\xa2 ParamScriptable Object\n\xe2\x80\xa2 rosstalk Object\n\xe2\x80\xa2 rosstalkex Object\n\xe2\x80\xa2 robot Object\n\xe2\x80\xa2 vdcp Object\n\xe2\x80\xa2 nkScript Object\nJavaScript\nRoss Video ogScript is a programming language developed by Ross Video to interact with DashBoard-\nenabled devices. It uses JavaScript functions, syntax, and primitive object types. To enable\nCustomPanel developers to interact with panels and devices, ogScript adds some new global objects to\nJavaScript. Most JavaScript works in ogScript scripts, although you might run across an occasional item\nthat does not work.\nFor information about ogScript objects and functions, refer to the sections in this guide. For information\nabout JavaScript commands and syntax, search for \xe2\x80\x9cJavaScript Reference\xe2\x80\x9d on the World Wide Web.\nDashBoard CustomPanel Development Guide ogScript Reference \xe2\x80\xa2 191Commonly Used Functions\nRoss Video recommends that you first learn the following commonly used functions:\nOgscript\n\xe2\x80\xa2 debug\n\xe2\x80\xa2 rename\nparams\n\xe2\x80\xa2 getValue\n\xe2\x80\xa2 setValue\nFunctions Set in the User Interface\nFunctions in the following objects are typically set through a user interface:\n\xe2\x80\xa2 rosstalk Object\n\xe2\x80\xa2 robot Object\n\xe2\x80\xa2 vdcp Object\n\xe2\x80\xa2 multiSetScriptable Object\n\xe2\x80\xa2 nkScript Object\nmultiSetScriptable Object\nIn ogScript, use the multiSetScriptable object to change the values of multiple parameters at once.\nTo create a multiSetScriptable object, use:\nparams.createMultiSet();\nFor example:\nparams.createMultiSet (\xe2\x80\x98This is a message\xe2\x80\x99);\nThe following table lists the functions of the multiSetScriptable object. Detailed descriptions appear\nafter the table. If you are reading this document on-screen, click a function name in the table to view its\ndescription.\nFunction Parameters Returns Description\nexecute N/A Boolean Execute the multiSet. Returns true if\nexecution was successful; otherwise\nfalse.\nsetAllValues Object [OID], Object [] [Values] N/A Update all values of the parameter with\nthe specified OID using the values from\nthe object array.\nsetValue Object [OID], Int [Index], Object [Value] N/A Update the specified index using the\nvalue object.\nnkScript Object\nIn ogScript, use the nkScript object to control NK Router OGLML tags used in Switchboard virtual\ncontrol panels. Functions in the nkScript object are usually set through a user interface.\n192 \xe2\x80\xa2 ogScript Reference DashBoard CustomPanel Development GuideThe nkScript global object is only accessible in OGLML contexts that are declared as having a NK\nRouter context type or are beneath such a context in the OGML document hierarchy.\nTo call a general-purpose function, use:\nfunction name parameters\nnkscript. ( );\nFor example:\nnkscript.setHost (Server01);\nThe following table lists the functions of the nkscript object.\nFunction Parameters Returns Description\nconvertCommaSeperat String [Levels], Boolean Long Levelmask Allows conversion of a list of\nedLevelsToMask [SearchTags] levels to the appropriate level\nmask. Level mask is a bit field\nwhere you can have up to 32\nlevels set \'on\' at a time.\nSearchTags should always be\n\'true\'.\ndoSwitch N/A Boolean Equivalent of calling:\ndoSwitch(getActiveDst(),\ngetActiveSrc(),\ngetLevelMask());\ndoSwitch Int [Dst], Boolean Do a switch on the active IPS\nInt [Src], Long [Levels] to route the given dst to the\ngiven src on the given levels.\ndoSwitchWithLabels String [Destination], Boolean Allows you to switch between\nString [Source], String levels by name.\n[Levels]\ngetActiveDst N/A Int Get the active dst number\n(0-indexed). Returns -1 if\nthere is no active destination.\ngetActiveDstName N/A String Get the name of the active dst\n(from the switchboard\nconfiguration).\nReturns null if there is no\nactive destination.\ngetActiveIPS N/A String Get the serial number of the\nactive IPS\ngetActiveIPSName N/A String Get the name of the active\nIPS\ngetActiveSrc N/A Int Get the active src number\n(0-indexed). Returns -1 if\nthere is no active source.\ngetActiveSrcName N/A String Get the name of the active src\n(from the switchboard\nconfiguration).\nReturns null if there is no\nactive source.\ngetActiveSystem N/A NKSystem Get the currently active\nNKSystem.\ngetDstName String [Source] String Get the destination name of\nthe given source.\ngetLevelMask N/A Long Get the current level mask (as\na bit field)\nLevel mask is a bit field where\nyou can have up to 32 levels\nset \'on\' at a time.\nDashBoard CustomPanel Development Guide ogScript Reference \xe2\x80\xa2 193Function Parameters Returns Description\ngetLevelName String [Source] String Get the level name of the\ngiven source.\nString [Destination], Boolean Get the protect status of the\ngetProtectStatus String [Levels] destination level.\ngetSrcName String [Source] String Get the source name.\nString [Destination], Int Get the status of the given\ngetStatus String [Level] destination level.\nisLevelActive Int [Level Num] Boolean Is the current level active.\nEquivalent to asking:\nlevelMask & (1 << levelNum)\n!= 0;\nisMCFlag N/A Boolean Is the Machine Control flag\nset.\nisProtected N/A Boolean Is the active destination\nprotected.\nisProtected Int [Destination], Long Boolean True if the given destination is\n[Levels] protected; otherwise false.\nisProtectedByMe N/A Boolean Is the active destination\nprotected by this virtual panel.\nisSrcActive Int [Src] Boolean Is the given source active on\nthe active destination any\nlevel.\nisSrcActive Int [Dst], Boolean Is the given source active on\nInt [Src], Long [Levels] the given destination on the\ngiven level mask.\nisVirtual N/A Boolean Is virtual routing in use (for\nswitch commands and status\nrequests).\nsetActiveDst Int [Dst] N/A Set the active destination (0-\nindexed).\nsetActiveIPS String [Serial] Boolean Set the IPS with the given\nserial number as the active\nIPS to receive commands and\nsend status.\nDeactivate any currently\nactive IPS.\nsetActiveSrc Int [Src] N/A Set the active source (0-\nindexed).\nsetLevelActive Int [Level Num], Boolean Boolean Set the given level as active.\n[Active]\nsetLevelMask Long [Level Mask] N/A Set the complete level mask\nbitfield.\nsetMCFlag Boolean Boolean Set the Machine Control flag\nto true or false.\nsetProtected Boolean Boolean Request the router to protect\nthe active destination.\nsetVirtual Boolean Boolean Set virtual routing on/off for\nswitch commands and status\nrequests.\n194 \xe2\x80\xa2 ogScript Reference DashBoard CustomPanel Development GuideFunction Parameters Returns Description\nverifyConfiguration N/A Boolean Re-activate the current IPS.\nasyncExec\nExecutes a function outside of the UI current thread.\nThis is especially useful for operations that take time to complete. You can use to run such\nasyncExec\noperations while continuing to execute the rest of your tasks.\nSyntax\nfunction\nogscript.asyncExec( );\nfunction delay\nogscript.asyncExec( , );\nParameters\nParameter Type Required Description\nfunction Function Yes Reference to the function to be executed.\nreference Can also be an anonymous function.\ndelay Long No Delay (in milliseconds) before executing\nthe function.\nNote: If the asyncExec thread is busy\nexecuting another task at the specified\ntime, the function will execute as soon as\nthe asyncExec thread is free.\nReturns\nN/A\nExample 1\nThis example displays two buttons. Each button runs a function named , which\nreallyLongFunction\nincrements a parameter named until it reaches . The parameter is displayed in\nNumber 500000 Number\nthe top left corner of the panel.\nThe button labeled Start Count executes the function normally. No other tasks can start while the count\nproceeds. The display of the parameter isn\xe2\x80\x99t refreshed until the count is complete.\nNumber\nThe button labeled Start Count Using asyncExec executes the function asynchronously. The panel can\nstart other tasks while the count proceeds. The display of the parameter is updated as its value\nNumber\nchanges.\nThe interface for this example appears as follows:\nasyncFTPListFiles\nAsynchronously gets a list of all files at a specified directory on an FTP server. Returns an array of\nFTPFile objects, on which the following methods can be called:\n- file.getName()\nDashBoard CustomPanel Development Guide ogScript Reference \xe2\x80\xa2 195- file.getTimestamp() (is a java.util.Calendar object)\n- file.getSize()\n- file.isFile()\n- file.isDirectory()\nSyntax\nhost port username password path callback\nogscript.asyncFTPListFiles( , , , , , );\nhost port username password path fileName\nogscript.asyncFTPListFiles( , , , , , ,\ncallback\n);\nParameters\nParameter Type Required Description\nHost String Yes Host address\nPort Int Yes Host port\nUsername String Yes Login username\nPassword String Yes Login password\nPath String Yes Source path\nfileName String Optional Source file name, can contain the ".*"\nwildcard.\ncallback Function Yes Callback function. Invoked after\nreference FTPListFiles is complete.\nCallback is passed success, list of files, and\nexception\nReturns\nReturns an array of FTPFile objects.\nFTPFile class is used to represent information about files stored on an FTP server.\nExample 1\nOutputs the file and directory names located at the directory \'/Media/Sports/Sens\' on an FTP server.\nThe source code for this example is as follows:\nfunction outputResults(success, files, exception)\n{\nif (!success)\n{\nogscript.debug("NO SUCCESS");\nreturn;\n}\nelse if (files != null)\n{\n/*\n* files[i].getName()\n* files[i].getTimestamp // returns java.util.Calendar\n* files[i].getSize() // returns file size in bytes\n* files[i].isFile() // returns true if the file is a File (not a\ndirectory)\n* files[i].isDirectory() // returns true if the file is a Directory\n*/\nogscript.debug("GOT " + files.length + " FILES");\n196 \xe2\x80\xa2 ogScript Reference DashBoard CustomPanel Development Guidefor (var i = 0; i < files.length; i++)\n{\nvar jsTime = (new Date(files[i].getTimestamp().getTimeInMillis()));\nif (files[i].isDirectory())\n{\n\xe2\x80\xa2\nogscript.debug("GOT DIRECTORY: " + files[i].getName());\n}\nelse\n{\n\xe2\x80\xa2\nogscript.debug("GOT FILE: " + files[i].getName() + " " + jsTime);\n}\n}\n}\n}\nogscript.asyncFTPListFiles(\'CAPRICABVS\', 21, \'blackstorm\', \'blackstorm\',\n\'/Media/Sports/Sens\', outputResults);\nasyncHTTP\nSend an asynchronous request to the given URL. Call the given function when the request has\ncompleted. The data retrieved from the HTTP request is passed as a string as the first variable in the\nmethod.\nIf the MIME type of the HTTP response is image or binary, the result will be a byte array containing\nwhat is fetched.\nSyntax\nURL Method Content_Type Data Callback\nogscript.asyncHTTP( , , , , );\nURL Method Content_Type Data Callback\nogscript.asyncHTTP( , , , , ,\nInclude Response_Code\n_ );\nParameters\nParameter Type Required Description\nURL String Yes Http url\nMethod String Yes The method for the URL request, one of:\nGET POST HEAD OPTIONS PUT DELETE\nTRACE are legal, subject to protocol\nrestrictions.\nContent_Type String Yes The content type of the request.\nData Object Yes Data can be a string, byte array, XML, or\nJSON object\nCallback Function Yes Function to call after the request\nreference completes.\nInclude_Response_ Boolean No True to include response code; otherwise\nCode false.\nReturns\nDashBoard CustomPanel Development Guide ogScript Reference \xe2\x80\xa2 197N/A\nExample 1\nComing soon.\nasyncPost\nSend an asynchronous post to the given URL. Call the given function when the post has completed. The\ndata retrieved from the HTTP Post is passed as a string as the first variable in the method.\nIf the MIME type of the HTTP response is image or binary, the result will be a byte array containing\nwhat is fetched.\nSyntax\nURL HTTP Post Data Callback Function\nogscript.asyncPost ( , , );\nURL Callback Function, Include\nogscript.asyncPost ( , HTTP Post Data,\nResponse\n);\nParameters\nParameter Type Required Description\nURL String Yes URL to send a post.\nHTTP Post Data String Yes Post to send to the specified URL.\nCallback Function Function Yes Function to call after the post completes.\nInclude Response Boolean No If true, result is a JSON Object\n{\nresponseCode = HTTP RESONSE\nCODE,\ncontentType = HTTP MIME TYPE\nurl = URL Requested\nbytes= BYTES RECEIVED\n}\nOtherwise, it is content fetched over HTTP\nparsed as though it\xe2\x80\x99s a string (as before).\nReturns\nN/A\nExample\nComing soon.\nclosePanel\nCloses the DashBoard panel that the command was called from.\nSyntax\nogscript.closePanel();\nParameters\nN/A\n198 \xe2\x80\xa2 ogScript Reference DashBoard CustomPanel Development GuideReturns\nN/A\nExample 1\n// Close the panel that command is called from\nogscript.closePanel();\ncolorToHSL\nConverts an RGB color to an HSL color\nColor parameter must be either an integer representation of an RGB color, or a string representation of\nan RBG color.\nSyntax\nint color\nogscript.colorToHSL ( );\nstring color\nogscript.colorToHSL ( );\nParameters\nParameter Type Required Description\ncolor Int Yes Integer representation of RGB color (in\ndecimal)\ncolor String Yes String representation of RGB color (in hex)\nReturns\nReturns a float array containing the HSL version of the color parameter.\nExample 1\nogscript.colorToHSL(16777215);\nogscript.colorToHSL(\'#FFFFFF\');\nWill both return HSL for the color white\ncopyText\nCopies text to the operating system\'s clipboard.\nSyntax\ntext\nogscript.copyText( );\nParameters\nParameter Type Required Description\nText String Yes Text to be copied to clipboard.\nReturns\nDashBoard CustomPanel Development Guide ogScript Reference \xe2\x80\xa2 199N/A\nExample 1\n// Will set the system clipboard to the text "Hello World!"\nogscript.copyText(\'Hello World!\');\ncreateAMPSender\nCreates a library of commands for controlling video servers using the Advanced Media Protocol (AMP).\nSyntax\nogscript. createAMPSender();\nParameters\nN/A\nReturns\nReturns an AMPCommands object.\nExample\n// To create and store a new AMP sender, you can use\nvar ampSender = ogscript.createAMPSender();\ncreateAsyncExec\nCreates a new asynchronous thread with the specified ID.\nSyntax\nthread ID\nogscript.createAsyncExec( );\nParameters\nParameter Type Required Description\nThread ID String Yes Desired ID for new thread\nReturns\nReturns an asynchronous thread with the specified ID if it was created, null otherwise.\nExample 1\n// Create and save an asynchronous thread with the id "new_thread"\nvar asyncThread = ogscript.createAsyncExec("new_thread");\ncreateByteArray\n200 \xe2\x80\xa2 ogScript Reference DashBoard CustomPanel Development GuideCreates a byte array with the specified length.\nSyntax\nlength\nogscript.createByteArray( );\nParameters\nParameter Type Required Description\nlength Int Yes Length of the byte array (Must be greater\nthan or equal to zero)\nReturns\nReturns a byte array of the desired length.\nExample 1\n// Create a new byte array with length of 10\nvar byteArray = ogscript.createByteArray(10);\ncreateFileInput\nCreates a new FileInputParser on a File object. Can call close, getSize, and isClosed on the\nFileInputParser object.\nSyntax\nogscript.createFileInput(fileObject);\nParameters\nParameter Type Required Description\nFile Object Object Yes Destination file object\nReturns\nReturns a FileInputParser object, on which the functions close(), getSize(), and isClosed() can be called.\nExample 1\n// If we have a file object called fileObject, and we want to debug output it\'s size:\nvar fileInputParser = ogscript.createFileInput(fileObject);\\\nvar fileSize = fileInputParser.getSize();\nogscript.debug(fileSize);\ncreateListener\nCreate a new listener with its own ID, settings, and task.\nDashBoard CustomPanel Development Guide ogScript Reference \xe2\x80\xa2 201Syntax\nid\nogscript.createListener( , listenerSettings, listenerTask);\nParameters\nParameter Type Required Description\nID String Yes ID for new listener\nListener Settings Object Yes Settings for new listener\nListener Task Function Yes Task for new listener\nreference\nReturns\nReturns an IServerWithClose object, which contains functions close, setPort, start, and stop.\nExample 1\nogscript.createListener(\'listener1\', listener1Settings, listener1Task);\ncreateVDCPSender\nCreates a library of commands for using the video disk control protocol (VDCP).\nSyntax\nogscript.createVDCPSender();\nParameters\nN/A\nReturns\nReturns a VDCPCommands object.\nExample\n// Create a new VDCP Sender\nvar vdcpLibrary = ogscript.createVDCPSender();\nfocus\nSets the focus to a component with a specified ID.\nSyntax\nid\nogscript.focus( );\nParameters\n202 \xe2\x80\xa2 ogScript Reference DashBoard CustomPanel Development GuideParameter Type Required Description\nID String Yes Component ID to focus\nReturns\nN/A\nExample 1\nComing soon.\nftp\nSaves an object to a destination path on an FTP server. Useful to store statistics, images, and any other\ndata on a server.\nSyntax\nhost\nogscript.ftp( , port, username, password, destPath, destName, binary,\ndata);\nParameters\nParameter Type Required Description\nHost String Yes Host address\nPort Int Yes Host port\nUsername String Yes Login username\nPassword String Yes Login password\nDestination Path String Yes Data destination path\nDestination Name String Yes Data destination name\nBinary Boolean Yes True if data is binary (.jpg, .mp3), false if\ndata is ascii (.txt, .html).\nData Object Yes Data to be transferred\nReturns\nReturns an FTPResponse object which contains a boolean \'success\', an object \'data\', and an exception\n\'ex\'.\nExample 1\nogscript.ftp(\'localhost\', 567, \'username\', \'password\', \'/dashboard/\', \'stats.txt\', false, statTextObject);\nftpGet\nGets a file from the source path on an FTP server, and stores it in the destination object. Useful to grab\nstatistics, images, or any other data from a server.\nDashBoard CustomPanel Development Guide ogScript Reference \xe2\x80\xa2 203Syntax\nhost\nogscript.ftpGet( , port, username, password, srcPath, srcName, binary,\ndestination);\nParameters\nParameter Type Required Description\nHost String Yes Host address\nPort Int Yes Host port\nUsername String Yes Login username\nPassword String Yes Login password\nSource Path String Yes Source path\nSource Name String Yes Source name\nBinary Boolean Yes True if data is binary (.jpg, .mp3), false if\ndata is ascii (.txt, .html).\nDestination File Object Yes Destination file object\nReturns\nReturns an FTPResponse object which contains a boolean \'success\', an object \'data\', and an exception\n\'ex\'.\nExample 1\n// Get a file stats.txt (ascii) from a directory "dashboard" on an ftp server\nogscript.ftpGet(\'localhost\', 567, \'username\', \'password\', \'/dashboard/\', \'stats.txt\', false, destinationObject)\nftpListFiles\nGets a list of all files at a specified directory on an FTP server.\nReturns an array of FTPFile objects, on which the following methods can be called:\n- file.getName()\n- file.getTimestamp() (is a java.util.Calendar object)\n- file.getSize()\n- file.isFile()\n- file.isDirectory()\nSyntax\nhost\nogscript.ftpListFiles( , port, username, password, srcPath);\nhost fileName\nogscript.ftpListFiles( , port, username, password, srcPath, );\nParameters\n204 \xe2\x80\xa2 ogScript Reference DashBoard CustomPanel Development GuideParameter Type Required Description\nHost String Yes Host address\nPort Int Yes Host port\nUsername String Yes Login username\nPassword String Yes Login password\nSource Path String Yes Source path\nFile Name String No Source file name\nReturns\nReturns an array of FTPFile objects.\nFTPFile class is used to represent information about files stored on an FTP server.\nExample 1\n// Gets a list of all files under the /photos/ directory on the FTP server\nogscript.ftpListFiles(\'localhost\', 557. \'username\', \'password\', \'/photos/\');\ngetApplicationPath\nReturns the path to the installation location of DashBoard.\nSyntax\nogscript.getApplicationPath();\nParameters\nN/A\nReturns\nReturns a String representation of the path to the DashBoard installation location.\nExample 1\n// Get and store dashboard installation loca\nvar dashboardLocation = ogscript.getApplicationPath();\ngetAsyncExecById\nFinds and returns an asynchronous thread with a specified ID.\nSyntax\nthread id\nogscript.getAsyncExecById( );\nParameters\nDashBoard CustomPanel Development Guide ogScript Reference \xe2\x80\xa2 205Parameter Type Required Description\nThread ID String Yes ID of desired thread.\nReturns\nReturns an asynchronous thread with the specified ID if one was found; otherwise null.\nExample 1\n// If we have an asynchronous thread with the id "thread1", we can get it using\nogscript.getAsyncExecById(\'thread1\');\ngetBrowserById\nFinds and returns a browser object with a specified ID. If browser with specified ID was not found,\nreturns null.\nSyntax\nBrowserID\nogscript.getBrowserById( );\nParameters\nParameter Type Required Description\nBrowser ID String Yes ID of browser to look for.\nReturns\nIf found, returns a browser element with the specified ID, null otherwise.\nExample\n// Get the browser with the ID "TestBrowser"\nogscript.getBrowserById("TestBrowser");\ngetContextId\nGets and returns the current context ID if it exists.\nSyntax\nogscript.getContextId();\nParameters\nN/A\nReturns\nReturns a string representation of the context ID if it exists; otherwise null.\n206 \xe2\x80\xa2 ogScript Reference DashBoard CustomPanel Development GuideExample 1\n// Get the current context ID\nvar contextID = ogscript.getContextId();\ngetFile\nFinds and returns a file at a given path.\nSyntax\nfilePath\nogscript.getFile( );\nParameters\nParameter Type Required Description\nfilePath String Yes Path to desired file\nReturns\nReturns the File object found at the specified path if it was found, null otherwise.\nExample 1\n// Get a file from the path "C://Users/John/Desktop/test.txt"\nvar file = ogscript.getFile(\'C://Users/John/Desktop/test.txt\');\ngetFileSize\nUsed to find the size (in bytes) of a file at a specified path.\nSyntax\nfilePath\nogscript.getFileSize( );\nParameters\nParameter Type Required Description\nfilePath String Yes Path to desired file\nReturns\nReturns a long equal to the size of the file in bytes.\nExample 1\n// Save the size of the file located at "C://Users/John/Desktop/helloworld.txt"\nvar fileSize = ogscript.getFileSize(\'C://Users/John/Desktop/helloworld.txt\');\nDashBoard CustomPanel Development Guide ogScript Reference \xe2\x80\xa2 207getImageById\nFinds and returns an image with a specified ID.\nSyntax\nimageID\nogscript.getImageById( );\nParameters\nParameter Type Required Description\nImage ID String Yes ID of desired image\nReturns\nReturns an image if one matching the ID was found, null otherwise.\nExample 1\n// Find and return an image with the id "image1"\nogscript.getImageById(\'image1\');\ngetPanelPath\nGets the path of the panel the function was called by.\nSyntax\nogscript.getPanelPath();\nParameters\nN/A\nReturns\nReturns a String representation of the path to the calling panel.\nExample 1\n// If the calling panel is stored at "C:\\Users\\Test\\DashBoard\\" on the disk,\nogscript.getPanelPath();\n// will return "C:\\Users\\Test\\DashBoard\\"\ngetPanelRelativeURL\nGets the full URL of a path with respect to the panel it is called from. Could be used to get the full path\nof an "images" or "stats" directory.\nSyntax\npath\nogscript.getPanelRelativeURL( );\n208 \xe2\x80\xa2 ogScript Reference DashBoard CustomPanel Development GuideParameters\nParameter Type Required Description\npath String Yes Relative path\nReturns\nReturns a String representing the full path of the relative path with respect to the panel\'s path.\nExample\n// If we have a panel stored at C:\\Users\\Test\\Panels\\ and we store images in a // directory \\Images\\\nlocated in the same \\Panels\\ folder that the panel itself is located in, we can // use the line\nogscript.getPanelRelativeURL(\'\\Images\\\');\n// to get the String "C:\\Users\\Test\\Panels\\Images\\".\nhslToColorString\nConverts an float array containing HSL data (hue, saturation, lightness) to a color string (Color string\ndisplays the color in hexadecimal).\nSyntax\nloat[]\nogscript.hslToColorString(hslF );\nParameters\nParameter Type Required Description\nHSL Float Array Float32_Array Yes Float array \xe2\x80\x93 first element is hue, second\nelement is saturation, third element is\nlightness.\nReturns\nReturns a hex string representation of the HSL color; if HSL float array was invalid, returns null.\nExample\n// If we have an hslFloat array containing 91 in index 0, 0.89 in index 1, and 0.61 in index 2\nogscript.hslToColorString(hslFloatArray);\n// Returns the string "#98F442"\nhttp\nUsed to fetch content from a web server or call restful API.\nSyntax\nURL\nogscript.http( , method, requestContentType, dataObject, includeResponse);\nParameters\nDashBoard CustomPanel Development Guide ogScript Reference \xe2\x80\xa2 209Parameter Type Required Description\nURL String Yes http URL\nMethod String Yes The method for the URL request, one of:\nGET POST HEAD OPTIONS PUT DELETE\nTRACE are legal, subject to protocol\nrestrictions.\nRequest Content String Yes The content type of the request.\nType\nData Object Object Yes Data can be a string, byte array, XML, or\nJSON object\nInclude Response Boolean Yes True to include response; otherwise false.\nReturns\nReturns either string data or a JSON object.\nExample 1\nComing soon.\ninstallTimer\nCreate a timer with the given ID and register it in the ContextTimerManager. Start the timer after the\nspecified delay. If requested, repeat the timer at the specified frequency. When the timer fires, run the\nspecified ogScript function.\nSyntax\nTimer ID Repeat Delay Repeat Delay Task\nogscript.installTimer ( , , , , );\nTimer ID Repeat Delay Repeat Delay Boolean Task\nogscript.installTimer ( , , , , , );\nParameters\nParameter Type Required Description\nTimer ID String Yes ID of the timer to create and register in the\nContextTimerManager.\nRepeat Boolean Yes true \xe2\x80\x94 repeat the timer using the specified\nDelay and Repeat Delay.\nfalse \xe2\x80\x94 only run the timer once, do not\nrepeat the timer.\nDelay Long Yes Number of milliseconds to wait before\nstarting the timer.\nRepeat Delay Long Yes How frequently the associated function\nruns, in milliseconds.\nExecute in Timer Boolean No If true, task will execute in timer thread\nTask Function Yes ogScript function to run when the timer\nfires.\nReturns\nN/A\n210 \xe2\x80\xa2 ogScript Reference DashBoard CustomPanel Development GuideExample 1\nThis example creates a label named "Time" and a button named "Install Timer". When a user clicks the\n"Install Timer" button, an associated task runs a function named myFunction (), which creates a timer.\nIt also retrieves the time value every 30 seconds, and loads it into a variable named str which is\ndisplayed on the "Time" label. The myFunction () function uses the installTimer function to create the\ntimer and set the rate at which the time data is updated.\n<label height="80" id="timeLabel" left="43" name="Time" style="txt-\nalign:west" top="26" width="275"/>\n<button buttontype="push" height="57" left="48" name="Install Timer"\ntop="133" width="184">\n<task tasktype="ogscript">function myFunction()\n{\nvar date = new Date();\nvar str = date.getHours() + \':\' + date.getMinutes() + \':\' +\ndate.getSeconds();\nogscript.rename(\'timeLabel\', \'Time: \' + str);\n}\n//create a timer that starts immediately and runs myFunction every 30\nseconds (30000 milliseconds)\nogscript.installTimer(\'myTimer\', true, 0, 30000, myFunction);\n</task>\n</button>\nisClosed\nWill return true if the context is closed or does not exist, and false otherwise .\n\xe2\x80\x98closed\xe2\x80\x99 means that the tab is closed, DashBoard is closed, or the panel is reloaded.\nSyntax\nogscript.isClosed();\nParameters\nN/A\nReturns\nReturns true if the context is closed or does not exist; otherwise false.\nExample\n// Get if the context is closed.\nvar closed = ogscript.isClosed();\njsonToString\nTransforms a JSON object into a String.\nSyntax\nNativeObject\nogscript.jsonToString( );\nDashBoard CustomPanel Development Guide ogScript Reference \xe2\x80\xa2 211Parameters\nParameter Type Required Description\nJSON native object NativeObject Yes The JSON to be converted to a String\nReturns\nReturns a String representation of the JSON native object.\nExample 1\n// If we have a JSON object named jsonObj, we can convert it to a string using:\nvar jsonString = ogscript.jsonToString(jsonObj);\npasteText\nGets the contents of the operating system clipboard, if the contents can be represented as a string.\nSyntax\nogscript.pasteText();\nParameters\nN/A\nReturns\nReturns a String containing the contents of the system clipboard.\nExample 1\n// If the system clipboard contains the text "Hello World!"\nogscript.pasteText();\n// will return a string containing "Hello World!"\naddRemoteTrigger\nAllows remote execution of a script inside of a CustomPanel through the RossTalk GPI command. The\nfunction can be removed by calling close on the object returned.\nSyntax\nfunction\nogscript.addRemoteTrigger ( );\ntriggerID, function\nogscript.addRemoteTrigger ( );\ntriggerID, triggerName, function\nogscript.addRemoteTrigger ( );\nParameters\n212 \xe2\x80\xa2 ogScript Reference DashBoard CustomPanel Development GuideParameter Type Required Description\nFunction String Yes The function to execute, including its\nparameters (if any).\nTrigger ID String Yes String that triggers the specified function to\nexecute.\nTrigger Name String Yes Shows on the button in the web UI.\nReturns\nReturns an object that contains one function named . When executed, removes the\nclose close\nfunction.\nExample\n// Add a remote trigger with a function named testFunction\nogscript.addRemoteTrigger(\'testFunction()\');\nogscript Object\nIn ogScript, use the ogscript object to access a library of general-purpose functions. To call a general-\npurpose function, use:\nogscript.function name(parameters);\nFor example:\nogscript.debug (\'This is a message\');\nThe following table lists the functions of the ogscript object. Detailed descriptions appear after the table.\nIf you are reading this document on-screen, click a function name in the table to view its description.\nFunction Parameters Returns Description\naddRemoteTrigger String [Trigger] Returns an object that Allows remote execution of a script\nString [Function] contains one function inside of a CustomPanel through the\nnamed close. When RossTalk GPI command.\nexecuted, close removes Function can be removed by calling\nthe function.\nclose on the object returned.\nappendXML String [Container ID] N/A Adds a section of OGLML code to\nString [XML snippet] the panel identified by the Container\nID parameter. The OGLML is added\nduring runtime and does not affect\nthe .grid file.\nValid only in <abs/> containers.\nasyncExec function N/A Executes a function outside of the\nUI current thread.\nDashBoard CustomPanel Development Guide ogScript Reference \xe2\x80\xa2 213Function Parameters Returns Description\nasyncFTP post N/A Sends a file to an FTP server.\nport\nusername\npassword\ndestPath\ndestName\nbinary\nsourceFilePath\ncallback\nasyncFTPGet host N/A Retrieves a file from FTP server.\nport\nusername\npassword\nsrcPath\nsrcName\nbinary\ndestFilePath or null\ncallback\nasyncPost String [URL] N/A Send an asynchronous post to the\nString [HTTP Post Data] given URL.\nFunction [Callback\nFunction]\nBoolean [include\nresponse]\ncancelTimer Timer ID N/A Cancel, stop and clean-up, a timer\nwith the given ID.\ncopyByteArray src byte array Creates a full or partial copy of a\noffset byte array.\nlength\ncreateByteArray length an empty byte array Creates an empty byte array of a\nspecified size.\ncreateFileInput String [File path] FileInputParser (like Access a file as a byte array with\nMessageParser but with the same capabilities as\ngetSize(), close(), and MessageParser to read raw bytes\nisClosed()\ncreateFileOutput String [File path] FileOutputBuilder, which Create a new file or append to an\nBoolean is same as existing file. Instead of saving XML\n[appendToExistingfile] MessageBuilder with or string data, gives access to write\nadded functions for clear() raw bytes (or strings, or shorts, or\n(overwrite file), close(), ints, etc.). Also gives the ability to\ngetSize(), flush(), and append to a file. Once open, it does\nisClosed() not close the file until the panel is\nclosed or close() is called. This is\nhandy for logging.\ncreateMessageBuilder N/A Returns a Creates a message builder, which\nMessageBuilder object enables you to construct a\nused to build byte arrays message.\n(generally for creating\nnetwork messages).\ncreateMessageParser messageBytes Returns a MessageParser Creates a message parser, which\nobject (generally used to enables you to parse a message.\nparse the various pieces\nof messages received\nover the network).\n214 \xe2\x80\xa2 ogScript Reference DashBoard CustomPanel Development GuideFunction Parameters Returns Description\ndebug String [Message] N/A Write a string to the openGear\nDebug Information View.\nfireGPI String [trigger] N/A Sends Trigger GPI string [trigger] to\nString [state] execute component task lists.\nBoolean [global] Sends optional [state] data string,\nwhich can be read by the script.\nWhen [global]\xe2\x80\x99 value is \'true\',\napplies to all open panels.\nWhen [global] is \'false\', applies only\nto the current active panel.\ngetAllById String [Object ID] Object [] Get all Objects accessible in the\ncurrent context that have the\nassociated ID.\ngetAttribute String [Attribute ID] Object Get an attribute registered in the\ncontext with the given ID.\ngetBuild N/A DashBoard version Gets the version of DashBoard\nnumber (same value that running the panel.\nappears in Help>About\nDashBoard)\ngetComponentsById String [Object ID] Component [] Get all Java Swing components\naccessible in the current context\nthat have the associated ID.\ngetCurrentUser N/A String Returns the username of the\ncurrent DashBoard user.\ngetIncludeById String [Include ID] IncludeReloadableContai Returns the first include with the\nner given ID.\ngetListenerById ID getListenerById returns Starts or stops a listener. Can also\nan object representing the check whether a listener is started.\nlistener.\nThis object has three\npublic methods you can\ncall: start(), stop(), and\nisStarted().\nThe return depends on\nwhich of the three\nmethods is used:\nIf the start() method is\nused, return is true if the\nlistener started\nsuccessfully; otherwise\nfalse.\nIf the stop() method is\nused, return is true if the\nlistener stopped\nsuccessfully; otherwise\nfalse.\nIf the isStarted() method\nis used, return is true if\nthe listener is started;\notherwise false.\ngetModificationDate String [File Path] Returns the time the Retrieves the time the specified file\nspecified file was last was last modified.\nmodified, in Unix Epoch\ntime (also known as\nPOSIX time), as a LONG\nvalue.\ngetObject String [Key] String Retrieves stored object\nDashBoard CustomPanel Development Guide ogScript Reference \xe2\x80\xa2 215Function Parameters Returns Description\ngetPosition String [ID] JAVA point object with Retrieves the horizontal (x) and\npoint.x and point.y vertical (y) position of the object, in\navailable. pixels.\ngetPrivateString String [Lookup ID] String Get a string defined in the lookup\nString [Key] table with the specified lookup ID.\ngetScopedAttribute String [Scope Name] Object Get an attribute in the named scope\nString [Attribute ID] that has the given ID. Scopes are\noften internally defined by\nDashBoard.\ngetSize String [ID] Dimension object with Retrieves the width and height of\nd.width and d.height the specified panel object.\navailable\ngetString String [Key] String Get a string defined in the global\nlookup table.\ngetTimerManager N/A ContextTimerManager Get the timer manager for the\ncontext to access timers and\nperform operations on selected\ntimers.\nThis function includes several\nmethods.\nhide String [ID] N/A Hide the popup with the specified\nID.\ninstallTimer String [Timer ID] N/A Create a timer with the given ID and\nBoolean [Repeat] register it in the\nContextTimerManager. Start the\nLong [Delay]\ntimer after the specified delay,\nLong [Repeat Rate]\nrepeat the timer if requested at the\nFunction [Task] specified rate. When the timer fires,\nrun the specified ogScript function.\nString [Timer ID] Boolean Report whether or not a timer exists\nand is in the \xe2\x80\x9crunning\xe2\x80\x9d state.\nisTimerRunningisTime\ntrue \xe2\x80\x94 a timer with the given ID\nrRunning\nexits and is in the \xe2\x80\x9crunning\xe2\x80\x9d state.\nfalse \xe2\x80\x94 a timer with the give ID\ndoes not exist or is not in the\n\xe2\x80\x9crunning\xe2\x80\x9d state.\nparseXML String org.w3c.dom.Document Parse and return an XML document\nusing the org.w3c.dom.Document\nAPI.\nputObject String [Key] N/A Defines a stored object.\nString [Value]\nputPrivateString String [LookupID] N/A Add or replace a string in a private\nString [Key] lookup table.\nString [Value]\nputString String [key] N/A Add or replace a string in the global\nString [value] lookup table.\nreload String [ID] Null, if null is provided as Rebuild the UI element with the\nthe ID. given ID.\nIf no ID is provided, rebuilds entire\ndocument.\nrename String [ID] N/A Modify the text for a tab name,\nString [Name] button, or label with the specified\nID.\n216 \xe2\x80\xa2 ogScript Reference DashBoard CustomPanel Development GuideFunction Parameters Returns Description\nreposition String [ID] N/A Moves object to specified XY pixel\nInteger [x position] location\nInteger [y position]\nrepositionByPercent String [ID] N/A Moves object to the specified\nInteger [percent x] location, as percentage of the\ncontainer width or height.\nInteger [percent y]\nCenter x and center y, when true,\nBoolean [center x]\ncenter the object at the location\nBoolean [center y]\nhorizontally (x only), vertically (y\nonly), or both (x and y).\nreveal String [ID] N/A Open a popup with the specified ID,\nor bring the tab with the specified ID\nto the foreground.\nrunXPath String [XPath] NodeList Execute the given XPath command\nXML Document on the given Document or Element\nand return the results as a\nor\nNodeList.\nXML Element\nsaveToFile path data Returns true, if data is Saves data to a file. This function is\noverwrite written successfully; typically used to save a byte array,\notherwise false. string, or XML document to a file.\nsendUDPAsBytes String [Host] N/A Send the given Data bytes to the\nInteger [Port] provided Host/Port through UDP.\nByte[] [Data]\nsendUDPString String [Host] N/A Convert the given Data string to\nInteger [Port] UTF-8 bytes and send them to the\nprovided Host/Port through UDP.\nString [Data]\nsetAnchorPoints String [ID] N/A Specifies how an object moves if\nBoolean [top] the user interface is resized for\ndifferent monitor and window sizes.\nBoolean [left]\nAnchors or releases an object\nBoolean [bottom]\nto/from the top, left, bottom, or right\nBoolean [right] sides of its container.\nsetSize String [ID] N/A Resizes a panel object to the\nString [width] specified size.\nString [height] Valid only in <abs/> containers.\nsetStyle String [ID] N/A Set Style parameters for the\nString [Style] component with the given ID if it\nexists.\nsetXML String [ID] N/A Dynamically generates UI\nString [new XML Content] components through ogscript.\nReplaces the contents of an\nelement with a string of XML code.\ntoBottom String [ID] N/A Displays the object below all others\nin the same container. Objects are\nlayered. If they overlap, higher\nlayers are drawn over lower layers.\ntoTop String [ID] N/A Displays the object above all others\nin the same container. Objects are\nlayered. If they overlap, higher\nlayers are drawn over lower layers.\nupload File [Upload File] N/A Open the File Upload dialog with\nthe specified file.\nDashBoard CustomPanel Development Guide ogScript Reference \xe2\x80\xa2 217addOnClose\nRuns a function when the panel is closed.\n\'closed\' means that the tab is closed, DashBoard is closed, or the panel is reloaded.\nSyntax\nFunction\nogscript.addOnClose( );\nParameters\nParameter Type Required Description\nFunction Function Yes Function to be added on close.\nreference\nReturns\nN/A\nExample 1\nogscript.addOnClose(functionName);\naddRemoteTrigger\nAllows remote execution of a script inside of a CustomPanel through the RossTalk GPI command. The\nfunction can be removed by calling close on the object returned.\nSyntax\ntrigger, function\nogscript.addRemoteTrigger ( );\nParameters\nParameter Type Required Description\nTrigger String Yes String that triggers the specified function to\nexecute.\nFunction String Yes The function to execute, including its\nparameters (if any).\nReturns\nReturns an object that contains one function named . When executed, removes the function.\nclose close\nExample\nComing soon.\nappendXML\nAdds a section of OGLML code to the panel identified by the parameter. The OGLML is\nContainer ID\nadded during runtime and does not affect the .grid file.\nThe appendXML function is supported within the <abs> tag only.\nSyntax\nogscript.appendXML (container ID, XML snippet);\n218 \xe2\x80\xa2 ogScript Reference DashBoard CustomPanel Development GuideParameters\nParameter Type Required Description\ncontainer ID String Yes ID of the container to append to. Valid only\nin <abs/> containers.\nXML snippet String (XML Yes XML code to append\nobject)\nReturns\nN/A\nExample\nComing Soon.\nasyncExec\nExecutes a function outside of the UI current thread.\nThis is especially useful for operations that take time to complete. You can use to run such\nasyncExec\noperations while continuing to execute the rest of your tasks.\nSyntax\nogscript.asyncExec (function);\nParameters\nParameter Type Required Description\nfunction Function Yes Reference to the function to be executed.\nCan also be an anonymous function.\nReturns\nN/A\nExample 1\nThis example displays two buttons. Each button runs a function named , which\nincrementFunction\nincrements a parameter named until it reaches . The parameter is displayed in\nNumber 500000 Number\nthe top left corner of the panel.\nThe button labeled Start Count executes the function normally. No other tasks can start while the count\nproceeds. The display of the parameter isn\xe2\x80\x99t refreshed until the count is complete.\nNumber\nThe button labeled Start Count Using asyncExec executes the function asynchronously. The panel can\nstart other tasks, and the user interface continues to function normally, while the count proceeds. The\ndisplay of the parameter is updated as its value changes.\nNumber\nThe interface for this example appears as follows:\nDashBoard CustomPanel Development Guide ogScript Reference \xe2\x80\xa2 219The source code for this example is as follows:\n<abs contexttype="opengear">\n<meta>\n<params>\n<param access="1" constraint="0.0;500001.0;0.0;500001.0;1"\nconstrainttype="INT_STEP_RANGE" name="Number" oid="Number"\nprecision="0" type="INT32" value="0" widget="label"/>\n</params>\n<api>function reallyLongFunction()\n{\n<!\xe2\x80\x94- &lt; represents less than and &gt; represents greater than -->\nfor (var i = 0; i &lt; 500001; i++)\n{\nparams.setValue(\'Number\', 0, i);\n}\n}</api>\n</meta>\n<param expand="true" height="62" left="17" oid="Number" top="20"\nwidth="205"/>\n<button buttontype="push" height="66" left="20" name="Start Count"\ntop="100" width="250">\n<task tasktype="ogscript">reallyLongFunction();</task>\n</button>\n<button buttontype="push" height="66" left="20" name="Start Count Using\nasyncExec" top="180" width="250">\n<task tasktype="ogscript">ogscript.asyncExec(reallyLongFunction);</task>\n</button>\n</abs>\nExample 2\nThe function does not allow you to pass parameters directly to the function you\nogscript.asyncExec\nwant to call. This example demonstrates how to work around this limitation, to asynchronously execute\nfunctions that require parameters, using a \xe2\x80\x9cwrapped function\xe2\x80\x9d technique.\nIn this example, which calculates the area of a triangle, the user can toggle between executing the\ncalculation function synchronously or asynchronously. Each time the calculation function is executed,\nthe openGear debug console receives a message indicating whether the execution call was synchronous\nor asynchronous.\nThe interface for this example, including the openGear debug console, appears as follows:\n220 \xe2\x80\xa2 ogScript Reference DashBoard CustomPanel Development GuideThe source code for this panel uses a variable named to control whether the function named\nasync\nis executed synchronously or asynchronously.\ncallMyFunction\nThe source code for this example is as follows:\n<abs contexttype="opengear" style="">\n<meta>\n<ogscript handles="onchange" id="ogs-onchange-base" name="Base Change\nHandler" oid="a">calcArea();</ogscript>\n<ogscript handles="onchange" id="ogs-onchange-height" name="Height Change\nHandler" oid="b">calcArea();</ogscript>\n<api id="api-asyncExec-demo" name="asyncExec Demo">function calcArea () {\nvar async = params.getValue(\'mode\', 0) === 1;\nfunction callMyFunction (base, height) {\n//Note: This example uses two parameters, but you can use as few or as many\nas required.\nreturn function () {\nparams.setValue(\'area\', 0, (base * height/2));\n}\n}\nif (async) {\nogscript.debug (\'making asynchronous call\');\nogscript.asyncExec(callMyFunction(params.getValue(\'a\',0),\nparams.getValue(\'b\',0)));\n} else {\nogscript.debug (\'making synchronous call\');\ncallMyFunction(params.getValue(\'a\',0), params.getValue(\'b\',0))();\n//Note: The parentheses at the end of the previous line are required to\ncall the wrapped function.\n}\n}</api>\n<params>\nDashBoard CustomPanel Development Guide ogScript Reference \xe2\x80\xa2 221<param access="1" constraint="0.0;100.0;0.0;100.0;1.0"\nconstrainttype="FLOAT_STEP_RANGE" name="A" oid="a" precision="0"\ntype="FLOAT32" value="10.0" widget="default"/>\n<param access="1" constraint="0.0;100.0;0.0;100.0;1.0"\nconstrainttype="FLOAT_STEP_RANGE" name="B" oid="b" precision="0"\ntype="FLOAT32" value="10.0" widget="default"/>\n<param access="1" constrainttype="FLOAT_NULL" name="Area" oid="area"\nprecision="3" type="FLOAT32" value="50.0" widget="default"/>\n<param access="1" constrainttype="INT_CHOICE" name="Mode" oid="mode"\nprecision="0" type="INT16" value="0" widget="default">\n<constraint key="0">Synchronous</constraint>\n<constraint key="1">Asynchronous</constraint>\n</param>\n</params>\n</meta>\n<simplegrid cols="2" height="219" left="5" top="20" width="525">\n<label header="true" name="Mode" style="txt-align:west"/>\n<param expand="true" oid="mode" showlabel="false" widget="toggle"/>\n<label header="true" name="Base Length" style="txt-align:west"/>\n<param expand="true" oid="a"/>\n<label header="true" name="Triangle Height (perpendicular to base)"\nstyle="txt-align:west;"/>\n<param expand="true" oid="b"/>\n<label header="true" name="Computed Area of Triangle (in square units)"\nstyle="txt-align:west"/>\n<param editable="false" expand="true" oid="area" widget="text-display"/>\n</simplegrid>\n</abs>\nasyncFTP\nSends a file to an FTP server. If a callback is provided, calls it when the operation is\nasyncFTP\ncomplete.\nNote: As the file is transferred, a progress attribute is updated. You can add an ogscipt handler to monitor\nchanges to the attribute to show progress.\nSyntax\nogscript.asyncFTP (host, port, username, password, destPath, destName,\nbinary, sourceFilePath, callback);\nParameters\n222 \xe2\x80\xa2 ogScript Reference DashBoard CustomPanel Development GuideParameter Type Required Description\nhost String Yes The host name of the destination\ncomputer.\nport Integer Yes The port number to which the data is to be\nsent.\nusername String Yes The username required to log onto the\ndestination computer.\npassword String Yes The password required to log onto the\ndestination computer.\ndestPath String No The directory path where the data is to be\nsaved on the destination computer.\ndestName String No The name of the destination file.\nCan be used to rename the existing file.\nIf a file with the same name exists in the\ndestination path, that file is overwritten.\nbinary Boolean Yes Specifies the transfer mode. When true,\nbinary transfer is used.\nWhen false, ASCII transfer is used.\nsourceFilePath String Yes The directory path to the source file. The\npath can be absolute or relative.\ncallback function No The callback is called when the operation\nreference is complete, whether or not the operation is\nsuccessful.\nReturns\nN/A\nExample 1\nThe following example is a task. It uses variable to populate the parameters of the function. It\nasyncFTP\nalso includes a callback to indicate success or failure of the transfer.\n<task tasktype="ogscript">function callback(success, sourceFilePath,\nexception)\n{\nif (success)\n{\nogscript.rename(\'label.bytes\', \'SUCCESS!\');\n}\nelse\n{\nogscript.rename(\'label.bytes\', \'FAIL!\');\n}\n}\nogscript.rename(\'label.bytes\', \'TRYING TO SEND FILE\'); var host =\nparams.getStrValue(\'params.host\', 0);\nvar port = params.getValue(\'params.port\', 0);\nvar user = params.getStrValue(\'params.username\', 0);\nvar password = params.getStrValue(\'params.password\', 0); var file =\nparams.getStrValue(\'params.file\', 0);\nvar destPath = params.getStrValue(\'params.destpath\', 0); var\ndestFileNameOverride = null;\nvar isBinary = true;\nogscript.asyncFTP(host, port, user, password, destPath,\ndestFileNameOverride, isBinary, file, callback);\nogscript.rename(\'label.bytes\', \'Waiting...\');\nDashBoard CustomPanel Development Guide ogScript Reference \xe2\x80\xa2 223</task>\nExample 2\nThe following is an example of an ogscript handler for monitoring and reporting the progress of the\ntransfer.\n<ogscript attribute="com.rossvideo.ftp.event" handles="attributechange">\nvar progressEvent = event.getNewValue();\nif (progressEvent == null)\n{\nogscript.debug(\'No progress\');\n}\nelse\n{\nogscript.rename(\'label.bytes\', (progressEvent.getTotalBytesTransferred()\n/ 1024) + \'kb\');\n}\n</ogscript>\nasyncFTPGet\nRetrieves a file from FTP server.\nSyntax\nogscript.asyncFTPGet (host, port, username, password, srcPath, srcName,\nbinary, destFilePath or null, callback);\nParameters\nParameter Type Required Description\nhost String Yes The host name of the source computer,\nfrom which the file is to be retrieved\nport Integer Yes The port number required to access the\nsource computer.\nusername String Yes The username required to log onto the\nsource computer.\npassword String Yes The password required to log onto the\nsource computer.\nsrcPath String No The directory path where the source file is\nlocated.\nsrcName String Yes The name of the file to be retrieved.\nbinary Boolean Yes Specifies the transfer mode. When true,\nbinary transfer is used.\nWhen false, ASCII transfer is used.\ndestFilePath or null String No The directory path where the file is to be\nsaved on the local computer.\nIf null, the file is saved in the same\ndirectory as the panel.\ncallback function No The callback is called when the operation\nreference is complete, whether or not the operation\nis successful.\nReturns\nN/A\nExample\n224 \xe2\x80\xa2 ogScript Reference DashBoard CustomPanel Development GuideComing soon.\nasyncPost\nSend an asynchronous post to the given URL. Call the given function when the post has completed. The\ndata retrieved from the HTTP Post is passed as a string as the first variable in the method.\nIf the MIME type of the HTTP response is image or binary, the result will be a byte array containing what\nis fetched.\nSyntax\nogscript.asyncPost (URL, HTTP Post Data, Callback Function, Include\nResponse);\nParameters\nParameter Type Required Description\nURL String Yes URL to send a post.\nHTTP Post Data String Yes Post to send to the specified URL.\nCallback Function Function Yes Function to call after the post completes.\nInclude Response Boolean No If true, result is a JSON Object\n{\nresponseCode = HTTP RESONSE\nCODE,\ncontentType = HTTP MIME TYPE\nurl = URL Requested\nbytes= BYTES RECEIVED\n}\nOtherwise, it is content fetched over HTTP\nparsed as though it\xe2\x80\x99s a string (as before).\nReturns\nN/A\nExample\nComing soon.\ncancelTimer\nCancel, stop and clean up, a timer with the given ID.\nNote: For information about creating a timer function, see installTimer on page 242.\nSyntax\nogscript.cancelTimer (Timer ID);\nDashBoard CustomPanel Development Guide ogScript Reference \xe2\x80\xa2 225Parameters\nParameter Type Required Description\nTimer ID String Yes ID of the timer to stop and clean up.\nReturns\nN/A\nExample\n//Stop the timer that was created with installTimer\nogscript.cancelTimer(\'myTimer\');\ncopyByteArray\nCreates a full or partial copy of a byte array.\nSyntax\nogscript.copyByteArray(src, offset, length)\nParameters\nParameter Type Required Description\nsrc byte array Yes The byte array to be copied.\noffset Integer Yes Index of the first byte to be copied. Use 0\nfor the start of the array.\nlength Integer Yes The number of bytes to copy.\nTip: To copy the entire array, use\nsrc.length.\nReturns\nbyte array\nExample 1\nIn the following example, the contents of a byte array named are copied into a variable named\nsrcArray\nmyCopy.\nvar myCopy=ogscript.copyByteArray (srcArray,0,srcArray.length);\nExample 2\nIn the following example, the 20 bytes of a byte array named , starting at byte , are copied into\nsrcArray 4\na variable named myCopy.\nvar myCopy=ogscript.copyByteArray (srcArray,4,20);\ncreateByteArray\nCreates an empty byte array of a specified size.\nSyntax\nogscript.createByteArray (length);\nParameters\nParameter Type Required Description\nlength Integer Yes The size of the new array, in bytes.\n226 \xe2\x80\xa2 ogScript Reference DashBoard CustomPanel Development GuideReturns\nAn empty byte array.\nExample\nvar myNewByteArray = ogscript.createByteArray (12);\ncreateFileInput\nAccesses a file as a byte array with the same capabilities as , to read raw bytes. See also\nMessageParser\ncreateMessageParser on page 228.\nSyntax\nogscript.createFileInput (File path);\nParameters\nParameter Type Required Description\nFile path String Yes Path of the file to open (can be relative to\nthe panel)\nReturns\nFileInputParser (like MessageParser but with getSize(), close(), and\nisClosed().\nExample\nComing Soon.\ncreateFileOutput\nCreates a new file or appends to an existing file. Instead of saving XML or string data, gives access to\nwrite raw bytes (or strings, or shorts, or ints, etc.). Also gives the ability to append to a file. Once open, it\ndoes not close the file until the panel is closed or is called. This is handy for logging.\nclose()\nSimilar to MessageBuilder (see createMessageBuilder on page 228).\nSyntax\nogscript.createFileOutput (File path, appendToExistingfile);\nParameters\nParameter Type Required Description\nFile path String Yes File path of the file to be created or\nappended.\nappendToExistingfile Boolean Yes When true, data is appended to existing\nfile.\nWhen false, a new file is created.\nReturns\n, which is same as with added functions for (overwrite\nFileOutputBuilder MessageBuilder clear()\nfile), , , , and .\nclose() getSize() flush() isClosed()\nExample\nComing soon.\nDashBoard CustomPanel Development Guide ogScript Reference \xe2\x80\xa2 227createMessageBuilder\nCreates a message builder, which enables you to construct a message. The message is created as a byte\narray, can contain multiple data types.\nSyntax\nogscript.createMessageBuilder ();\nParameters\nN/A\nReturns\nReturns a MessageBuilder object used to build byte arrays (generally for creating network messages).\nExample\nIn the following example, a variable named myMessage is created to contain message content created\nby a message builder. Then data of various data types are added to the message. The variable\nmessageArray is defined to contain the message content as a byte array.\nTip: You can use the createMessageParser function to parse messages.\nvar myMessage = ogscript.createMessageBuilder();\nmyMessage.writeBoolean(true); myMessage.writeByte(255);\nmyMessage.writeByte(255);\nmyMessage.writeShort(65535); myMessage.writeShort(65535);\nmyMessage.writeChar(\'a\'); myMessage.writeInt(65536);\nmyMessage.writeLong(4294967296); myMessage.writeFloat(0.000001);\nmyMessage.writeDouble(0.000002); myMessage.writeString(\'abcd\');\nmyMessage.writeUTF(\'Hello World\'); //includes 2-byte length count\nvar messageArray = myMessage.toByteArray();\ncreateMessageParser\nCreates a message parser, which enables you to parse a message.\nSyntax\nogscript.createMessageParser (messageBytes);\nParameters\nParameter Type Required Description\nmessageBytes byte array Yes The source byte array.\nReturns\nReturns a MessageParser object (generally used to parse the various pieces of messages received over\nthe network).\nExample\nIn the following example, a variable named messageArray contains several pieces of data of various\ndata types to be extracted by a message parser. A variable named parsedMessage is created to contain\nthe extracted message content. Each element of the array is parsed and sent to the debug utility.\nTip: You can use the createMessageBuilder function to create messages.\nvar parsedMessage = ogscript.createMessageParser(messageArray);\nogscript.debug(parsedMessage.readBoolean());\nogscript.debug(parsedMessage.readByte());\nogscript.debug(parsedMessage.readUnsignedByte());\n228 \xe2\x80\xa2 ogScript Reference DashBoard CustomPanel Development Guideogscript.debug(parsedMessage.readShort());\nogscript.debug(parsedMessage.readUnsignedShort());\nogscript.debug(parsedMessage.readChar());\nogscript.debug(parsedMessage.readInt());\nogscript.debug(parsedMessage.readLong());\nogscript.debug(parsedMessage.readFloat());\nogscript.debug(parsedMessage.readDouble());\nogscript.debug(parsedMessage.readString(4));\nogscript.debug(parsedMessage.readUTF());</task>\ndebug\nWrite a string to the openGear Debug Information view.\nThe openGear Debug Information view must be open to view debug messages. To open the openGear\nDebug Information view, select openGear Debug Information from the Views menu in DashBoard.\nSyntax\nogscript.debug (Message);\nParameters\nParameter Type Required Description\nMessage String Yes Message to display in the openGear\nDebug Information View.\nReturns\nN/A\nExample 1\nogscript.debug (\'This is a message\');\nExample 2\nvar data = params.getValue(0x12,0);\nogscript.debug (\'Parameter 0x12 (score): \' + data);\nExample 3\nogscript.debug (\'Parameter 0x12 (score): \' + params.getValue(0x12,0));\nfireGPI\nSends a Trigger GPI message to panels. When buttons, labels, and displayed parameters that have a\nmatching GPI Trigger receive the message, their task lists are executed.\nTip: This function can be used for inter-panel communication, by triggering globally.\nSyntax\nTrigger State Global\nogscript.fireGPI ( ), ( ), ( );\nParameters\nParameter Type Required Description\nTrigger String Yes GPI Trigger message.\nState String No Sends optional data string, which can be read\nby the script.\nDashBoard CustomPanel Development Guide ogScript Reference \xe2\x80\xa2 229Parameter Type Required Description\nGlobal Boolean Yes When true, applies to all open panels.\nWhen false, applies only the panel initiating the\ntrigger.\nReturns\nN/A\nExample\nIn this example, the GPI trigger message \'StartClock\' and the state data \'ResetClock\' are sent to all open\npanels.\nogscript.fireGPI (\'StartClock\',\'ResetClock\',true);\ngetAllById\nGet all Objects accessible in the current context that have the associated ID.\nSyntax\nogscript.getAllById (Object ID);\nParameters\nParameter Type Required Description\nObject ID String Yes ID of the objects in the current context to\nget.\nReturns\nObject []\nExample\nComing soon.\ngetAttribute\nGet an attribute registered in the context with the given ID.\nSyntax\nogscript.getAttribute (Attribute ID);\nParameters\nParameter Type Required Description\nAttribute ID String Yes ID from which to get a registered in context\nattribute.\nReturns\nObject\nExample\nComing soon.\n230 \xe2\x80\xa2 ogScript Reference DashBoard CustomPanel Development GuidegetBuild\nReturns the DashBoard version number. This is the same version number you see in DashBoard if you\nclick About DashBoard on the Help menu.\nSyntax\nogscript.getBuild ();\nParameters\nN/A\nReturns\nDashBoard version number, similar to the following:\nVersion 7.0.0I 2015-06-12 T09:54\ngetComponentsById\nGet all Java Swing components accessible in the current context that have the associated ID.\nSyntax\nogscript.getComponentsById (Object ID);\nParameters\nParameter Type Required Description\nObject ID String Yes ID from which to get all Java Swing\ncomponents accessible in the current\ncontext.\nReturns\nComponent []\nExample\nComing soon.\ngetCurrentUser\nReturns the username of the current DashBoard user.\nWhen a User Rights Management server is present, this function returns the username of the user\nsigned-in to DashBoard.\nWhen no User Rights Management Server is found, this function returns the computer account name.\nSyntax\nogscript.getCurrentUser ( );\nParameters\nN/A\nReturns\nString\nDashBoard CustomPanel Development Guide ogScript Reference \xe2\x80\xa2 231Example\nThis example uses the getCurrentUser function to read the user name, and then uses the rename function\nto rename a label. For more information about the rename function, see rename on page 247.\nThe label is defined in the .grid file as follows:\n<label height="49" id="Welcome Label" left="136" name="Welcome" style="txt-\nalign:west;" top="275" width="188"/>\nThe script to read the user name and then rename the label is as follows:\n//read the login user name\nvar loginName = ogscript.getCurrentUser();\n//display the user name in the Welcome label var message = \'Welcome \' +\nloginName; ogscript.rename(\'Welcome Label\',message);\ngetIncludeById\nReturns the first include with the given ID. The include must have been created using the <include> tag.\nSyntax\nogscript.getIncludeById (Include ID);\nParameters\nParameter Type Required Description\nInclude ID String Yes ID of the include to find.\nReturns\nIncludeReloadableContainer\nExample\nComing soon.\ngetListenerById\nStarts or stops a listener. Can also check whether a listener is started.\nSyntax\nogscript.getListenerById (ID);\nParameters\nParameter Type Required Description\nID String Yes ID of the listener.\nReturns\ngetListenerById returns an object representing the listener.\nThis object has three public methods you can call: start(), stop(), and isStarted().\nThe return depends on which of the three methods is used:\n\xe2\x80\xa2 If the start() method is used, return is true if the listener started successfully; otherwise false.\n\xe2\x80\xa2 If the stop() method is used, return is true if the listener stopped successfully; otherwise false.\n\xe2\x80\xa2 If the isStarted() method is used, return is true if the listener is started; otherwise false.\n232 \xe2\x80\xa2 ogScript Reference DashBoard CustomPanel Development GuideExample\nvar myListener = ogscript.getListenerById (myId); myListener.start ();\nmyListener.stop ();\nmyListener.isStarted ();\ngetModificationDate\nRetrieves the time the specified file was last modified.\nSyntax\nogscript.getModificationDate (file path);\nParameters\nParameter Type Required Description\nFile path String Yes Path to the file.\nReturns\nReturns the time the specified file was last modified, in Unix Epoch time (also known as POSIX time),\nas a LONG value.\nExample\nComing soon.\ngetObject\nYou can create an object and reference it in other parts of the code. Some possible uses include:\n\xe2\x80\xa2 Storing parsed XML data in an object so you don\xe2\x80\x99t have to re-parse it.\n\xe2\x80\xa2 Storing the results of an async HTTP post so you don\xe2\x80\x99t have to re-fetch it.\n\xe2\x80\xa2 Storing connection code so you cna reference it wherever your code needs to establish that\nconnection.\nThe getObject function works in conjunction with the putObject function. The putObject function\ndefines the object. The getObject function references the object. The scope of a defined object is global,\nso you can reference it from anywhere in your panel code.\nFor information about the putObject function, see putObject on page 244.\nSyntax\nogscript.getObject(Key);\nParameters\nParameter Type Required Description\nKey String Yes The name used to reference what is being\nstored.\nReturns\nString.\nDashBoard CustomPanel Development Guide ogScript Reference \xe2\x80\xa2 233Example\nThe following example parses and stores data from an XML file in a variable so it can be used globally\nwithout the need to re-parse the XML data each time you want to use it.\nIt defines a function named loadTheXML, which uses the parseXML function to retrieve XML data\nfrom a file and load it into a variable named myObject. It then uses the putObject function to copy the\ndata into a variable named myXML. The readTheXML function loads the data into a variable named\notherObject.\nfunction loadTheXML()\n{\nvar myObject = ogscript.parseXML(\'file:/c:/mydocument.xml\');\nogscript.putObject(\'myXML\',myObject);\n}\nfunction readTheXML()\n{\nvar otherObject = ogscript.getObject(\'myXML\');\n// Do anything you want with the data, now contained in the otherObject\nvariable.\n}\ngetPosition\nRetrieves the horizontal (x) and vertical (y) position of a panel object, in pixels.\nSyntax\nogscript.getPosition (ID);\nParameters\nParameter Type Required Description\nID String Yes The ID of the panel object.\nReturns\nJAVA point object containing public variables x and y, populated with values for the horizontal (y) and\nvertical (y) position of the object, in pixels.\nExample\nThe following example draws a label that can be resized and repositioned. When the user drags the\nmiddle of the label, it moves. When the user drags the bottom right corner of the label, the label is\nresized.\n<abs bottom="0" contexttype="opengear" left="0" right="0" top="0">\n<meta>\n<ogscript handles="onmousedown" targetid="move-label">var size =\nogscript.getSize(\'move-label\');\nif (event.getX() &lt; size.width - 10 &amp;&amp; event.y &lt;\nsize.height - 10)\n{\nogscript.putObject(\'mode\', \'move\'); ogscript.putObject(\'position\',\nogscript.getPosition(\'move-label\')); ogscript.putObject(\'offsetX\',\nevent.x); ogscript.putObject(\'offsetY\', event.y);\n}\nelse\n{\nogscript.putObject(\'mode\', \'size\');\n234 \xe2\x80\xa2 ogScript Reference DashBoard CustomPanel Development Guide}\n</ogscript>\n<ogscript handles="ondrag" targetid="move-label">\nif (ogscript.getObject(\'mode\') == \'size\')\n{\nogscript.setSize(\'move-label\', event.getX(), event.getY());\n}\nelse if (ogscript.getObject(\'mode\') == \'move\')\n{\nvar origin = ogscript.getObject(\'position\'); var offsetX =\nogscript.getObject(\'offsetX\'); var offsetY =\nogscript.getObject(\'offsetY\');\nogscript.reposition(\'move-label\', origin.x + event.x - offsetX,\norigin.y + event.y - offsetY);\nogscript.putObject(\'position\', ogscript.getPosition(\'move-label\'));\n}\n</ogscript>\n</meta>\n<label height="116" id="move-label" left="27" style="bdr:etched;bg#FF0000"\ntop="38" width="215"/>\n</abs>\ngetPrivateString\nGet a string defined in a private lookup table that matches the specified lookup ID.\nNote: Use the getPrivateString function if the lookup table has an ID. If the lookup table has no ID, use\nthe getString function. For more information about the getString function, see getString on page 237.\nSyntax\nogscript.getPrivateString (Lookup ID, Key);\nParameters\nParameter Type Required Description\nLookup ID String Yes ID of the string to find in the specified\nlookup table.\nKey String Yes Private lookup table in which to find the\nspecified string.\nReturns\nString\nExample\nThis example uses the getPrivateString function to read an IP address stored in a lookup table. The\nlookup table is defined at the beginning of the .grid file, and can be accessed by any script.\nThe lookup table definition for this example is as follows:\n<lookup id="hosts">\n<entry key="XPression.host">10.0.2.210</entry>\n<entry key="XPression.port">7788</entry>\n</lookup>\nDashBoard CustomPanel Development Guide ogScript Reference \xe2\x80\xa2 235The script to read an entry from the lookup table is as follows:\n//Get the IP Address associated with entry key XPression.host\nvar host = ogscript.getPrivateString(\'hosts\',\' XPression.host \');\ngetScopedAttribute\nGet an attribute in the named scope that has the given ID. Scopes are often internally defined by\nDashBoard.\nSyntax\nogscript.getScopedAttribute (Scope Name, Attribute ID);\nParameters\nParameter Type Required Description\nScope Name String Yes Name of the scope in which to get and\nattribute.\nAttribute ID String Yes ID of the attribute to get in the named\nscope.\nReturns\nObject\nExample\nComing soon.\ngetSize\nRetrieves the width and height of the specified panel object, in pixels.\nSyntax\nogscript.getSize (ID);\nParameters\nParameter Type Required Description\nID String Yes ID of the panel object.\nReturns\nDimension object with d.width and d.height available.\n236 \xe2\x80\xa2 ogScript Reference DashBoard CustomPanel Development GuideExample\nThe following example draws a label that can be resized and repositioned. When the user drags the\nmiddle of the label, it moves. When the user drags the bottom right corner of the label, the label is\nresized.\n<abs bottom="0" contexttype="opengear" left="0" right="0" top="0">\n<meta>\n<ogscript handles="onmousedown" targetid="move-label">var size =\nogscript.getSize(\'move-label\');\nif (event.getX() &lt; size.width - 10 &amp;&amp; event.y &lt;\nsize.height - 10)\n{\nogscript.putObject(\'mode\', \'move\'); ogscript.putObject(\'position\',\nogscript.getPosition(\'move-label\')); ogscript.putObject(\'offsetX\',\nevent.x); ogscript.putObject(\'offsetY\', event.y);\n}\nelse\n{\nogscript.putObject(\'mode\', \'size\');\n}\n</ogscript>\n<ogscript handles="ondrag" targetid="move-label">\nif (ogscript.getObject(\'mode\') == \'size\')\n{\nogscript.setSize(\'move-label\', event.getX(), event.getY());\n}\nelse if (ogscript.getObject(\'mode\') == \'move\')\n{\nvar origin = ogscript.getObject(\'position\'); var offsetX =\nogscript.getObject(\'offsetX\'); var offsetY =\nogscript.getObject(\'offsetY\');\nogscript.reposition(\'move-label\', origin.x + event.x - offsetX,\norigin.y + event.y - offsetY);\nogscript.putObject(\'position\', ogscript.getPosition(\'move-label\'));\n}\n</ogscript>\n</meta>\n<label height="116" id="move-label" left="27" style="bdr:etched;bg#FF0000"\ntop="38" width="215"/>\n</abs>\ngetString\nGet a string defined in the global lookup table.\nNote: Use the getString function if the lookup table has no ID. If the lookup table has an ID, use the\ngetPrivateString function. For more information about the getPrivateString function, see\ngetPrivateString on page 235.\nSyntax\nogscript.getString (Key);\nDashBoard CustomPanel Development Guide ogScript Reference \xe2\x80\xa2 237Parameters\nParameter Type Required Description\nKey String Yes Private lookup table from which to get\nstring.\nReturns\nObject\nExample\nThis example uses the getString function to read an IP address stored in a lookup table. The lookup table\ndefinition for this example is as follows:\n<lookup>\n<entry key="Tom">television</entry>\n</lookup>\nThe script to read an entry from the lookup table is as follows:\n//Get the string associated with entry key Tom ogscript.getString(\'Tom\');\ngetTimerManager\nGet the timer manager for the context to access timers and perform operations on selected timers.\nSyntax\nogscript.getTimerManager ( );\nParameters\nN/A\nMethods\nThe getTimerManager function is an object that has several methods. The following methods can be run\non an existing timer. A timer can be created using the installTimer function or using the graphical\neditor. For more information about the installTimer function, see installTimer on page 242.\nParameter\nMethod Required Description\nisRunning() N/A Checks whether the time is running.\nstartTimer(Boolean reset) Yes Starts the timer.\ntrue or false If the boolean parameter is set to true, the\ntimer resets to the starting time when the\nfunction is performed.\nIf the boolean parameter is set to false, the\nfunction is performed at the timer\'s current\ntime.\nstopTimer(Boolean reset) Yes Stops the timer.\ntrue or false If the boolean parameter is set to true, the\ntimer resets to the starting time when the\nfunction is performed.\nIf the boolean parameter is set to false, the\nfunction is performed at the timer\'s current\ntime.\nresetTimer() N/A Resets the timer to the start time.\nsetStart(Long valueInMilliseconds) Yes Sets the start time of the timer.\nMilliseconds\n(Long)\n238 \xe2\x80\xa2 ogScript Reference DashBoard CustomPanel Development GuideParameter\nMethod Required Description\nsetStop(Long valueInMilliseconds) Yes Sets the stop time of the timer.\nMilliseconds\n(Long)\nsetTime(Long valueInMilliseconds) Yes Sets the current time of the timer.\nMilliseconds\n(Long)\ngetStart() N/A Returns the timer\xe2\x80\x99s start time in\nmilliseconds (Long).\ngetStop() N/A Returns the timer\xe2\x80\x99s stop time in\nmilliseconds (Long).\ngetCurrent() N/A Returns the timer\xe2\x80\x99s current value in\nmilliseconds (Long).\nincrementTime(Long difference) Yes Increments the timer value by the specified\nMilliseconds number of milliseconds\n(Long)\nsetPattern(String dateTimePattern) Yes Sets the time format pattern for displaying\nTime format time values.\ndefinition\nReturns\nContextTimerManager\nExample 1 \xe2\x80\x94 getTimerManager function using isRunning method\n//verify if timer named \'selftimer\' is currently running\nif (ogscript.getTimerManager().getTimer(\'selftimer\').isRunning())\n{\nogscript.debug(\'running = true\');\n}\nelse\n{\nogscript.debug(\'running = false\');\n}\nExample 2 \xe2\x80\x94 getTimerManager function using startTimer method\n//Starts a timer named \'selftimer\'\nogscript.getTimerManager().getTimer(\'selftimer\').startTimer(false);\nExample 3 \xe2\x80\x94 getTimerManager function using stopTimer method\n//Stops a timer named \'selftimer\'\nogscript.getTimerManager().getTimer(\'selftimer\').stopTimer(false);\nExample 4 \xe2\x80\x94 getTimerManager function using resetTimer method\n//Resets a timer named \'selftimer\' to the start time\nogscript.getTimerManager().getTimer(\'selftimer\').resetTimer();\nExample 5 \xe2\x80\x94 getTimerManager function using setStart method\n//Set the start time of a timer named \'selftimer\' to 30 seconds (30000ms)\nogscript.getTimerManager().getTimer(\'selftimer\').setStart(30000);\nExample 6 \xe2\x80\x94 getTimerManager function using setStop method\n//Set the stop time of a timer named \'selftimer\' to two minutes (120000 ms)\nogscript.getTimerManager().getTimer(\'selftimer\').setStop(120000);\nDashBoard CustomPanel Development Guide ogScript Reference \xe2\x80\xa2 239Example 7 \xe2\x80\x94 getTimerManager function using setTime method\n//Set the current time of a timer named \'selftimer\' to 59 seconds (59000 ms)\nogscript.getTimerManager().getTimer(\'selftimer\').setTime(59000);\nExample 8 \xe2\x80\x94 getTimerManager function using getStart method\n// Get the start time of a timer named \'selftimer\' var startTime =\nogscript.getTimerManager().getTimer(\'selftimer\').getStart();\nExample 9 \xe2\x80\x94 getTimerManager function using getStop method\n// Get the stop time of a timer named \'selftimer\' var stopTime =\nogscript.getTimerManager().getTimer(\'selftimer\').getStop();\nExample 10 \xe2\x80\x94 getTimerManager function using getCurrent method\n// Get the current time of a timer named \'selftimer\' var currentTime =\nogscript.getTimerManager().getTimer(\'selftimer\').getCurrent();\nExample 11 \xe2\x80\x94 getTimerManager function using incrementTime method\n//increase the current time of a timer named \'selftimer\' by 30 seconds\nogscript.getTimerManager().getTimer(\'selftimer\').incrementTime(30000)\n;\n//decrease the current time of a timer named \'selftimer\' by 5 seconds\nogscript.getTimerManager().getTimer(\'selftimer\').incrementTime(-5000)\n;\nExample 12 \xe2\x80\x94 getTimerManager function using setPattern method\nThe following table describes the syntax for setting the time format. For some formats, repeating the\nletter returns more digits or a variation of the format. For example, when specifying M for month, one\nM shows the month number with no leading zero, two Ms adds a leading zero for months 0 to 9, three\nMs shows the three letter month (such as Jan), and four or more Ms shows the full month name (such as\nJanuary).\nDate or Time\nLetter Component Presentation Examples\nD Day Number 189\nH Hour of the day (0-23) Number 8\nm Minute of the hour Number 30\ns Second of the minute Number 55\nS Millisecond Number 768\nG Era designator Text AD\nY Year Number 1969; 69\nM Month of the year Text or number September; Sep; 09\nw Week of the year Number 27\nW Week of the month Number 3\nd Day of the month Number 12\nF Day of the week in the Number 1\nmonth If the day of the week is\nTuesday, 1 would\ndenote the first\nTuesday of the month\nE Day of the week Text Friday; Fri\n240 \xe2\x80\xa2 ogScript Reference DashBoard CustomPanel Development GuideDate or Time\nLetter Component Presentation Examples\nk Hour of the day (1-24) Number 22\nK Hour in AM/PM (0-11) Number 0\nh Hour in AM/PM (1-12 Number 10\na AM/PM marker Text PM\nz Time zone General Time Zone Pacific Standard Time,\nPST,\nZ Time zone RFC 822 time zone -0800\nThe following code example returns the date and time. An example of the date and time as returned by\nthis example is Sep 30, 2013 2:35:34 PM.\n//Sets the display format of a timer named \'simpleclock\' to show full date and\ntime\nogscript.getTimerManager().getTimer(\'simpleclock\').setPattern(\'MMM dd, yyyy\nh:mm:ss a\');\nhide\nHide the popup associated with the specified ID.\nNote: to use the hide function, a popup must already exist. Popups can be created only in the JavaScript\nsource, not in DashBoard.\nSyntax\nogscript.hide (Popup ID);\nParameters\nParameter Type Required Description\nPopup ID String Yes ID of the popup to hide.\nReturns\nN/A\nExample\nThis example includes two sections of XML code to be added to the .grid file. The first creates a button\nthat opens a popup. The second creates a button that hides the popup.\n//This example creates a button which, when clicked by a user, opens the popup\narea.\n<popup id="popup1" left="20" name="Click here to open the Popup" top="25">\n<abs height="300" left="200" style="bdr:etched;" top="200" width="300">\n</abs>\n</popup>\n//This example creates a button which, when clicked by a user, hides the\npopup.\n<button buttontype="push" height="50" left="50" name="Click here to hide the\nPopup" top="500" width="200">\n<task tasktype="ogscript">ogscript.hide(\'popup1\');</task>\n</button>\nDashBoard CustomPanel Development Guide ogScript Reference \xe2\x80\xa2 241installTimer\nCreate a timer with the given ID and register it in the ContextTimerManager. Start the timer after the\nspecified delay. If requested, repeat the timer at the specified frequency. When the timer fires, run the\nspecified ogScript function.\nSyntax\nogscript.installTimer (Timer ID, Repeat, Delay, Repeat Delay, Task);\nParameters\nParameter Type Required Description\nTimer ID String Yes ID of the timer to create and register in the\nContextTimerManager.\nRepeat Boolean Yes true \xe2\x80\x94 repeat the timer using the specified\nDelay and Repeat Delay.\nfalse \xe2\x80\x94 only run the timer once, do not\nrepeat the timer.\nDelay Long Yes Number of milliseconds to wait before\nstarting the timer.\nRepeat Delay Long Yes How frequently the associated function\nruns, in milliseconds.\nTask Function Yes ogScript function to run when the timer\nfires.\nReturns\nN/A\nExample\nThis example creates a label named "Time" and a button named "Install Timer". When a user clicks the\n"Install Timer" button, an associated task runs a function named myFunction (), which creates a timer.\nIt also retrieves the time value every 30 seconds, and loads it into a variable named str which is\ndisplayed on the "Time" label. The myFunction () function uses the installTimer function to create the\ntimer and set the rate at which the time data is updated.\n<label height="80" id="timeLabel" left="43" name="Time" style="txt-\nalign:west" top="26" width="275"/>\n<button buttontype="push" height="57" left="48" name="Install Timer"\ntop="133" width="184">\n<task tasktype="ogscript">function myFunction()\n{\nvar date = new Date();\nvar str = date.getHours() + \':\' + date.getMinutes() + \':\' +\ndate.getSeconds();\nogscript.rename(\'timeLabel\', \'Time: \' + str);\n}\n//create a timer that starts immediately and runs myFunction every 30\nseconds (30000 milliseconds)\nogscript.installTimer(\'myTimer\', true, 0, 30000, myFunction);\n</task>\n</button>\n242 \xe2\x80\xa2 ogScript Reference DashBoard CustomPanel Development GuideisTimerRunning\nReport whether or not a timer exists and is in the \xe2\x80\x9crunning\xe2\x80\x9d state.\nSyntax\nogscript.isTimerRunning (Timer ID);\nParameters\nParameter Type Required Description\nTimer ID String Yes true \xe2\x80\x94 a timer with the given ID exits and is in\nthe \xe2\x80\x9crunning\xe2\x80\x9d state.\nfalse \xe2\x80\x94 a timer with the give ID does not exist\nor is not in the \xe2\x80\x9crunning\xe2\x80\x9d state.\nReturns\nBoolean\nExample\n//verify if the timer is currently running\nvar runtime = ogscript.isTimerRunning(\'selftimer\');\nparseXML\nParse and return an XML document using the org.w3c.dom.Document API. The XML document to parse\ncan be provided in the following ways:\n\xe2\x80\xa2 Piece of well-formatted XML\n\xe2\x80\xa2 URL relative to a CustomPanel\n\xe2\x80\xa2 File URL (file:/c:/\xe2\x80\xa6)\n\xe2\x80\xa2 http URL (http://\xe2\x80\xa6)\nThe document is loaded via a blocking call that is run in the DashBoard User Interface thread.\nCalls to load documents over a network (for example, using http://) are strongly discouraged and can\nhave undesired impacts on the UI performance.\nSyntax\nogscript.parseXML (Document);\nParameters\nParameter Type Required Description\nDocument String Yes XML document to parse.\nReturns\nXML Document\nFor more information about returns, refer to the following URL:\nhttp://docs.oracle.com/javase/6/docs/api/org/w3c/dom/Document.html\nDashBoard CustomPanel Development Guide ogScript Reference \xe2\x80\xa2 243Example\nThe following example loads an XML file from the web using an asynchronous http request. An XPath\nexpression extracts data from the XML and displays it on a label.\nfunction myFunc(pageContent)\n{\nvar xmlPageContent = \'&lt;?xml version="1.0" encoding="UTF-8"?&gt;\\n\' +\npageContent;\nvar document = ogscript.parseXML(xmlPageContent); var nodeList =\nogscript.runXPath(\'/response/sports/sportsItem/leagues/leaguesIt\nem/teams/teamsItem/name\', document); var teamList = \'&lt;html&gt;\';\nogscript.debug(nodeList.getLength());\nfor (var i = 0; i &lt; nodeList.getLength(); i++)\n{\nteamList = teamList + nodeList.item(i).getTextContent() +\n\'&lt;br/&gt;\';\n}\nogscript.rename(\'resultLabel\', teamList + \'&lt;/html&gt;\');\n}\nogscript.asyncPost(\'http://api.oursports.com/v1/sports/hockey/league/\nteams/?_accept=text%6Axml&amp;apikey=ksjdur7euejru47fkbos85kg\', null,\nmyFunc);\nputObject\nYou can create an object and reference it in other parts of the code. Some possible uses include:\n\xe2\x80\xa2 Storing parsed XML data in an object so you don\xe2\x80\x99t have to re-parse it.\n\xe2\x80\xa2 Storing the results of an async HTTP post so you don\xe2\x80\x99t have to re-fetch it.\n\xe2\x80\xa2 Storing connection code so you cna reference it wherever your code needs to establish that\nconnection.\nThe putObject function works in conjunction with the getObject function. The putObject function\ndefines the object. The getObject function references the object. The scope of a defined object is global,\nso you can reference it from anywhere in your panel code.\nFor information about the getObject function, see getObject on page 233.\nSyntax\nogscript.putObject(Key, Value);\nParameters\nParameter Type Required Description\nKey String Yes The name of the object in which the data is\nbeing stored.\nValue String Yes The value to be stored.\nReturns\nN/A.\n244 \xe2\x80\xa2 ogScript Reference DashBoard CustomPanel Development GuideExample\nThe following example parses and stores data from an XML file in a variable so it can be used globally\nwithout the need to re-parse the XML data each time you want to use it.\nIt defines a function named loadTheXML, which uses the parseXML function to retrieve XML data\nfrom a file and load it into a variable named myObject. It then uses the putObject function to copy the\ndata into a variable named myXML. The readTheXML function loads the data into a variable named\notherObject.\nfunction loadTheXML()\n{\nvar myObject = ogscript.parseXML(\'file:/c:/mydocument.xml\');\nogscript.putObject(\'myXML\',myObject);\n}\nfunction readTheXML()\n{\nvar otherObject = ogscript.getObject(\'myXML\');\n// Do anything you want with the data, now contained in the otherObject\nvariable.\n}\nputPrivateString\nAdd or replace a string in a private lookup table.\nNote: Use the putPrivateString function if the lookup table has an ID. If the lookup table has no ID, use\nthe putString function. For more information about the putString function, see putString on page 246.\nSyntax\nogscript.putPrivateString (Lookup ID, Key, Value);\nParameters\nParameter Type Required Description\nLookup ID String Yes ID of the string to create or replace in the\nspecified lookup table.\nKey String Yes Private lookup table in which to create or\nreplace the specified string.\nValue String Yes New value for the specified string.\nReturns\nN/A\nExample\nThis example uses the putPrivateString function to replace a datum in a lookup table. The lookup table\ndefinition for this example is as follows:\n<lookup id="hosts">\n<entry key="XPression.host">10.0.2.210</entry>\n<entry key="XPression.port">9999</entry>\n</lookup>\nDashBoard CustomPanel Development Guide ogScript Reference \xe2\x80\xa2 245The script to replace an entry in the lookup table is as follows:\n//Replace the port number associated with entry key XPression.host\nogscript.putPrivateString(\'hosts\',\' XPression.port \', \'7788\');\nputString\nAdd or replace a string in the global lookup table.\nNote: Use the putPrivateString function if the lookup table has no ID. If the lookup table has an ID, use\nthe putPrivateString function. For more information about the putPrivateString function, see\nputPrivateString on page 245.\nSyntax\nogscript.putString (Lookup ID, Value);\nParameters\nParameter Type Required Description\nLookup ID String Yes ID of the string to create or replace in the\nglobal lookup table.\nValue String Yes New value for the specified string.\nReturns\nN/A\nExample\nThis example uses the putString function to replace a datum in a lookup table. The lookup table\ndefinition for this example is as follows:\n<lookup>\n<entry key="Tom">television</entry>\n</lookup>\nThe script to replace an entry in the lookup table is as follows:\n//Replace the string associated with entry key Tom\nogscript.putString(\'Tom\',\'telephone\');\nreload\nRebuild the user interface element with the specified ID. If the ID is for an <include> tag, re-fetch the\nincluded document before rebuilding the user interface.\nIf no ID is provided, rebuilds the entire document.\nSyntax\nogscript.reload (User Interface ID);\nParameters\nParameter Type Required Description\nUser Interface ID String Yes ID of the user interface element to rebuild.\nReturns\nNull, if null is provided as the ID.\n246 \xe2\x80\xa2 ogScript Reference DashBoard CustomPanel Development GuideExample\nIn this example, the ogscript.reload function is used to rebuild a drop-down list to show new options.\n//create a new array of colours\nvar color = new Array("Red","Green","Blue");\n//populate the dropdown color_list with the color array\nparams.replaceIdentifiedConstraint(\'color_list\',\nparams.createIntChoiceConstraint(color));\n//reload the dropdown list to view the new options\nogscript.reload(\'color_list\');\nrename\nModify the text associated with a tab name, label, or button. Use the Component ID to specify the\ncomponent to rename. Do not use the Object ID (OID).\nTo view the ID of a component, double-click the component in PanelBuilder to open the Edit\nComponent dialog box. The ID box displays the ID of the selected component.\nID \xe2\x80\x94 use the ID\ndisplayed in this box to\nidentify the component\nto rename.\nFigure 2.1 Component ID in the Edit Component dialog box\nSyntax\nogscript.rename (Component ID, Name);\nParameters\nParameter Type Required Description\nComponent ID String Yes ID of the user interface component to\nrename.\nName String Yes New text to display on the screen for the\nspecified user interface component.\nReturns\nN/A\nExample 1\n// Set the item with ID=\'Seat 5\' to have the text \'Mika Andersen\'\nogscript.rename (\'Seat 5\',\'Mika Andersen\');\nExample 2\n// Read the value of a parameter into a variable named data var data =\nparams.getValue(0x12,0);\n// Use the variable named data to make a new ID and set the ID to have the text\n\'Mika Andersen\'\nogscript.rename(\'Seat \' + data,\'Mika Andersen\');\nDashBoard CustomPanel Development Guide ogScript Reference \xe2\x80\xa2 247reposition\nMoves a component to an absolute position, defined as an X - Y pixel position.\nAlternatively, you can specify a component\xe2\x80\x99s position by percentage of the container\xe2\x80\x99s width and\nheight. For more information, see repositionByPercent on page 248.\nSyntax\nogscript.reposition (ID, x position, y position);\nParameters\nParameter Type Required Description\nID String Yes ID of the component you want to reposition\nx position Integer Yes Number of pixels from the left\ny position Integer Yes Number of pixels from the right\nReturns\nN/A\nExample\nIn this example, the task associated with the \xe2\x80\x9cTop Left\xe2\x80\x9d button uses the ogscript.reposition function to\nreposition a label.\n<label height="40" id="myLabel" left="160" name="myLabel" style="txt-\nalign:center" top="100" width="160"/>\n<button buttontype="push" height="40" left="160" name="Top Left" top="200"\nwidth="160">\n<task tasktype="ogscript">ogscript.reposition(\'myLabel\', 0, 0);\n</task>\n</button>\nrepositionByPercent\nMoves a component to an absolute position, defined as a percentage of container width and height.\nAlternatively, you can specify a component\xe2\x80\x99s position by pixel. For more information, see reposition on\npage 248.\nSyntax\nogscript.repositionByPercent (OID, x percent, y percent, center x, center y);\nParameters\nParameter Type Required Description\nOID String Yes OID of the component you want to\nreposition\nx percent Integer Yes Distance from the left, as a percentage of\ncontainer width\ny percent Integer Yes Distance from the top, as a percentage of\ncontainer height\ncenter x Boolean Yes true \xe2\x80\x94 Shows the full width of the object.\nfalse \xe2\x80\x94 Crops the object if it extends\nbeyond the horizontal boundaries of the\ncontainer.\ncenter y Boolean Yes true \xe2\x80\x94 Shows the full height of the object.\nfalse \xe2\x80\x94 Crops the object if it extends\n248 \xe2\x80\xa2 ogScript Reference DashBoard CustomPanel Development GuideParameter Type Required Description\nbeyond the vertical boundaries of the\ncontainer.\nReturns\nN/A\nExample\nIn this example, the task associated with the One Quarter button uses the ogscript.reposition function to\nreposition a label 25% from the left, and 25% from the top. Centering is set to false in both the x and y\naxes, so if the label overhangs the edges of the container the overhanging portion is not shown.\n<label height="41" id="myLabel" left="160" name="myLabel" style="txt-\nalign:center" top="101" width="160"/>\n<button buttontype="push" height="40" left="160" name="One Quarter" top="200"\nwidth="159">\n<task tasktype="ogscript">ogscript.repositionByPercent(\'myLabel\', 25, 25,\nfalse, false);\n</task>\n</button>\nreveal\nOpen a popup with the specified ID, or bring the tab with the specified ID to the foreground.\nThis function is especially useful for tab sets that have their placement set to the center, meaning that\nthere are no tabs showing for users to click. Using the reveal function is the only way to display the\nspecified tab.\nSyntax\nogscript.reveal (User Interface ID);\nParameters\nParameter Type Required Description\nUser Interface ID String Yes ID of the popup to open or the tab to bring\nto the foreground.\nReturns\nN/A\nExample\nThis example includes a definition for a set of tabs with its position set to center, and uses the\nogscript.reveal function to select a particular tab to be shown.\nTip: When tab position is set to center, tabposition="none" in the tab set\xe2\x80\x99s XML source code.\n<tab height="91" left="580" tabposition="none" top="373" width="221">\n<abs id="page1" name="Tab 1"/>\n<abs id="page2" name="Tab 2"/>\n<abs id="page3" name="Tab 3"/>\n</tab>\n//Select Tab2 ogscript.reveal(\'page2\');\nDashBoard CustomPanel Development Guide ogScript Reference \xe2\x80\xa2 249runXPath\nExecute the given XPath command on the given XML Document or XML Element and return the\nresults as a NodeList.\nogscript.runXPath (XPath, Document);\nor\nogscript.runXPath (XPath, Element);\nParameters\nParameter Type Required Description\nXPath String Yes The XPath command to execute on the\ngiven XML Document or XML Element\nDocument String Yes XML Document on which to execute the\ngiven XPath command.\nElement Yes XML Element on which to execute the\ngiven XPath command.\nFor more information about the required parameters, refer to the following URLs:\n\xe2\x80\xa2 http://docs.oracle.com/javase/6/docs/api/org/w3c/dom/Document.html\n\xe2\x80\xa2 http://docs.oracle.com/javase/6/docs/api/org/w3c/dom/Element.html\n\xe2\x80\xa2 http://docs.oracle.com/javase/6/docs/api/org/w3c/dom/NodeList.html\n\xe2\x80\xa2 http://www.w3schools.com/xpath/\nReturns\nNodeList\nExample\nComing soon.\nsaveToFile\nSaves data to a file. This function is typically used to save a byte array, string, or XML document to a\nfile.\nSyntax\nogscript.saveToFile(path, data, overwrite);\nParameters\nParameter Type Required Description\npath String Yes The directory path to the destination file.\ndata String, byte[], or Yes The data to be saved to file.\nXML\noverwrite Boolean Yes When true, existing file of the same name\nis overwritten.\nWhen false, existing file of the same name\nis not overwritten.\nReturns\nReturns true, if data is written successfully; otherwise false.\n250 \xe2\x80\xa2 ogScript Reference DashBoard CustomPanel Development GuideExample\nogscript.saveToFile(\'files/my-new-file.txt\',\'This is my data\',true);\nsendUDPAsBytes\nConverts ASCII string data to a byte array, and sends it as bytes to the specified host/port through UDP.\nThe ASCII data is converted to Hexadecimal bytes, and can consist only of the following characters:\n\xe2\x80\xa2 0 to 9\n\xe2\x80\xa2 A to F\n\xe2\x80\xa2 Spaces and commas (as delimiters)\nSyntax\nogscript.sendUDPAsBytes (Host, Port, Data);\nParameters\nParameter Type Required Description\nHost String Yes Host name to send the given data through\nUDP.\nPort Integer Yes Port number on the given host to be sent\ngiven data through UDP.\nData ASCII string Yes Data to be converted to bytes and sent\nthrough UDP to the specified host/port.\nReturns\nN/A\nExample\nmyComputer, 7788,\nogscript.sendUDPAsBytes ( \'7A, 3C, FF\');\nsendUDPBytes\nSend the given data bytes to the specified host/port through UDP.\nSyntax\nogscript.sendUDPBytes (Host, Port, Data);\nParameters\nParameter Type Required Description\nHost String Yes Host name to send the given Data bytes\nthrough UDP.\nPort Integer Yes Port number on the given Host to send\ngiven Data byte through UDP.\nData Byte Yes Data bytes to send through UDP to the\ngiven Host and Port.\nReturns\nN/A\nExample\nComing soon.\nDashBoard CustomPanel Development Guide ogScript Reference \xe2\x80\xa2 251sendUDPString\nConvert a string to UTF-8 bytes and send the bytes to the provided host/port through UDP.\nSyntax\nogscript.sendUDPString (Host, Port, Data);\nParameters\nParameter Type Required Description\nHost String Yes Host name to send the given Data string\nthrough UDP.\nPort Integer Yes Port number on the given Host to send\ngiven Data string through UDP.\nData String Yes Data string to convert to bytes and send\nthrough UDP to the given Host and Port.\nReturns\nN/A\nExample\nThis example uses the sendUDPString function to send a message to a particular host/port.\nvar host = ogscript.getPrivateString(\'hosts\',\' Panel.host \');\nvar port = parseInt(ogscript.getPrivateString(\'hosts\',\' Panel.port \'));\nvar message = "Hello, can you hear me?";\nogscript.sendUDPString(host,port,message);\nsetAnchorPoints\nSpecifies how an object moves if the user interface is resized for different monitor and window sizes.\nAnchor points are relative to the container in which they are located (for example, a tab, a split pane,\netc.).\nThe setAnchorPoints function allows you to anchor or release an object to/from the top, left, bottom, or\nright sides. By setting these values, you can effectively anchor an object to a corner, a side, or the\ncenter.\nSyntax\nogscript.setAnchorPoints (ID, top, left, bottom, right);\nParameters\nParameter Type Required Description\nID String Yes ID of the object you want to anchor.\ntop Boolean Yes true \xe2\x80\x94 object is anchored to the top\nfalse \xe2\x80\x94 object is not anchored to the top\nleft Boolean Yes true \xe2\x80\x94 object is anchored to the left\nfalse \xe2\x80\x94 object is not anchored to the left\nbottom Boolean Yes true \xe2\x80\x94 object is anchored to the bottom\nfalse \xe2\x80\x94 object is not anchored to the\nbottom\nright Boolean Yes true \xe2\x80\x94 object is anchored to the right\nfalse \xe2\x80\x94 object is not anchored to the right\n252 \xe2\x80\xa2 ogScript Reference DashBoard CustomPanel Development GuideReturns\nN/A\nExample\nThe button in this example has a task that anchors an object (with ID \'dialog\') to the top left.\n<button buttontype="push" name="anchorTopLeft">\n<task tasktype="ogscript">ogscript.setAnchorPoints(\'dialog\', true, true,\nfalse, false);\n</task>\n</button>\nsetSize\nResizes a panel object the to the specified width and height, in pixels. Valid only in <abs/> containers.\nSyntax\nogscript.setSize (ID, width, height);\nParameters\nParameter Type Required Description\nID String Yes ID of the panel object to be resized. Valid\nonly in <abs/> containers.\nwidth Integer Yes New width of the panel, in pixels.\nheight Integer Yes New height of the panel, in pixels.\nReturns\nN/A\nExample\nComing soon.\nsetStyle\nSet Style parameters for the component with the given ID if it exists. Style commands are additive.\nThey can be added or modified, but not removed.\nTip: To view syntax examples for particular styles, use the PanelBuilder user interface to add the style\non the Style tab, and then view the resulting code in the Source tab.\nFor openGear Style Hints for the available style options, refer to the openGear documentation.\nSyntax\nogscript.setStyle (Component ID, Style);\nParameters\nParameter Type Required Description\nComponent ID String Yes ID of the Component to style with the\ngiven Style parameters.\nStyle String Yes Style parameters with which to style the\ngiven Component.\nDashBoard CustomPanel Development Guide ogScript Reference \xe2\x80\xa2 253Returns\nN/A\nExample 1\nThis example defines the style of a label, and then makes three style changes.\n//label definition\n<label height="45" id="label1" left="330" name="Change the style of this\nlabel" style="txt-align:west;" top="100" width="325"/>\n//first change - set the background to red\nogscript.setStyle(\'label1\',"bg#FF0000");\n//second change - set the text colour to black and text size to big\nogscript.setStyle(\'label1\',"fg#000000;size:big");\n//third change - modify the text alignment from left to right\nogscript.setStyle(\'label1\',"txt-align:east");\nExample 2\nThis example creates a pre-defined style, and applies it to a component. Pre-defined styles can add or\nreplace a component\xe2\x80\x99s style settings, but not remove them.\n//create a pre-defined style\n<style id="Style1" name="Style1" value="size:Big;bg#6F63FB;bdr:etched;"/>\n//Add a predefined Style to a component\nogscript.setStyle(\'label1\',"style:Style1")\nsetXML\nDynamically generates UI components through ogscript. Replaces the contents of an element with a\nstring of XML code.\nNotes:\n\xe2\x80\xa2 The .grid file is not affected by so its effects do not persist after the CustomPanel is\nsetXML()\nclosed.\n\xe2\x80\xa2 is not synchronous with the calling code which can lead to subtle problems. For\nsetXML()\nexample, if you used this method to instantiate a customwidget you would not be able to access it\non the line immediately following call.\nsetXML()\n\xe2\x80\xa2 If used to inject OGLML that includes either directly, or as part of a customwidget\n<ogscript/>\nit\'s necessary to release any resources used by the injected objects before subsequently overwriting\nthe same <abs/>. Failure to do this will cause resource leaks, and possibly unwanted behaviour.\nSyntax\nogscript.setXML (ID, new XML content)\nParameters\nParameter Type Required Description\nID String Yes ID of the component in which you want to\nreplace XML\nnew XML content String Yes The new XML content\n254 \xe2\x80\xa2 ogScript Reference DashBoard CustomPanel Development GuideReturns\nN/A\nExample 1\nThis simplified example illustrates how to use .\nogscript.setXml\nIn this example, the value of the variable is XML content (a label named ). The\noglml myLabel\ncommand populates the canvas named with the value of the\nsetXML abs Destination oglml\nvariable. The result simply displays the label name myLabel.\n<abs>\n<abs id="my-abs" name="Destination" />\nvar oglml \'<label name="myLabel"/>\',\nogscript setXML (\'my-abs\', oglml);\n</abs>\nExample 2\nThis example displays a table with two rows of two columns. The first row contains a parameter named\nTYPE LABEL TEXT: that allows the user to type in a white box. The second row contains a button\nnamed setXml and a blank label. When the user clicks the setXml button, the associated task populates\nthe blank label with whatever text the user typed. The user can redefine the label contents as many times\nas they want.\nIn this example, the replacement XML is specified in a variable named that uses\noglml\nto retrieve the typed text from the parameter named . The button\nparams.getValue Text for Label\ntask uses to populate the label ( ) with the value of the variable\nogscript.setXml id="my-abs"\n.\noglml\n<abs contexttype="opengear">\n<meta>\n<params>\n<param access="1" maxlength="0" name="Text for Label" oid="txt"\ntype="STRING" value="Type Here!" widget="text"/>\n</params>\n</meta>\n<table height="100" left="5" top="9" width="400">\n<tr>\n<label colspan="1" fill="both" header="true" name="TYPE LABEL TEXT:"\nrowspan="1" style="txt-align:center;" weightx="1.0" weighty="1.0"/>\n<param colspan="1" expand="true" fill="both" oid="txt" rowspan="1"\nstyle="txt-align:center;" weightx="1.0" weighty="1.0"/>\n</tr>\n<tr>\n<button buttontype="push" colspan="1" fill="both" name="setXml"\nrowspan="1" weightx="1.0" weighty="1.0">\n<task tasktype="ogscript">var oglml = \'&lt;label name="\' +\nparams.getValue(\'txt\',0) + \'" style="txt-align:center;" anchor="center"\nDashBoard CustomPanel Development Guide ogScript Reference \xe2\x80\xa2 255top="0" bottom="0" left="0" right="0" /&gt;\'\nogscript.setXML(\'my-abs\', oglml);</task>\n</button>\n<abs anchor="center" colspan="1" fill="both" id="my-abs" rowspan="2"\nstyle="bdr:etched;" weightx="1.0" weighty="1.0"/>\n</tr>\n</table>\n</abs>\nExample 3\nThis example has a label with text ( ). It also has a button associated with\n<abs id="0x4"> \xe2\x80\xa6 </abs>\na task that uses to replace the text by replacing the XML contents of the\nogscript.setXml <abs>\nelement. In this example, the replacement XML is contained within the task definition.\nBefore the button is clicked:\nAfter the button is clicked:\n<abs>\n<abs id="0x4">\n<label height="59" id="0x2" left="61" name="This Text Will Be Replaced"\nstyle="txt-align:center" top="40" width="238"/>\n</abs>\n<button buttontype="push" height="40" id="0x3" left="59"\nname="replaceText" top="121" width="240">\n<task tasktype="ogscript">ogscript.setXml(\'0x4\', \'&lt;label\nheight="59" id="0x2" left="61" name="This is the New Text" style="txt-\nalign:center" top="40" width="238"/&gt;\');\n</task>\n</button>\n</abs>\n256 \xe2\x80\xa2 ogScript Reference DashBoard CustomPanel Development GuidetoBottom\nDisplays the object below all others in the same container. Object display is layered. If objects overlap,\nhigher layers are drawn over lower layers.\nSyntax\nogscript.toBottom (ID);\nParameters\nParameter Type Required Description\nID String Yes ID object to be sent to the bottom\nReturns\nN/A\nExample\nThis example includes two labels occupying the same position. LabelOne is defined second in the code,\nso it appears on top and is therefore visible. Button One runs a task that uses ogscript.toBottom to send\nLabel One to the bottom of the stack. This makes Label Two visible. Button Two sends Label Two to\nthe bottom.\n<abs>\n<label height="317" id="labelTwo" left="100" name="Label Two"\nstyle="size:Biggest;bg#D92648;txt-align:center;" top="100" width="350"/>\n<label height="317" id="labelOne" left="100" name="Label One"\nstyle="size:Biggest;bg#selectbg;txt-align:center;" top="100" width="350"/>\n<button buttontype="push" height="40" id="oneBottom" left="150" name="Button\nOne" style="bg#selectbg;txt-align:center;" top="450" width="100">\n<task tasktype="ogscript">ogscript.toBottom(\'labelOne\');\n</task>\n</button>\n<button buttontype="push" height="40" id="twoBottomn" left="300" name="Button\nTwo" style="bg#D92648;txt-align:center;" top="450" width="100">\n<task tasktype="ogscript">ogscript.toBottom(\'labelTwo\');\n</task>\n</button>\n</abs>\ntoTop\nDisplays the object above all others in the same container. Object display is layered. If objects overlap,\nhigher layers are drawn over lower layers.\nSyntax\nID\nogscript.toTop ( );\nDashBoard CustomPanel Development Guide ogScript Reference \xe2\x80\xa2 257Parameters\nParameter Type Required Description\nID String Yes ID object to be sent to the top\nReturns\nN/A\nExample\nThis example includes two labels occupying the same position. LabelTwo is defined second in the code,\nso it appears on top and is therefore visible. Button One runs a task that uses ogscript.toTop to send\nLabel One to the top of the stack. This makes Label One visible. Button Two sends Label Two to the\ntop.\n<abs>\n<label height="317" id="labelOne" left="100" name="Label One"\nstyle="size:Biggest;bg#selectbg;txt-align:center;" top="100" width="350"/>\n<label height="317" id="labelTwo" left="100" name="Label Two"\nstyle="size:Biggest;bg#D92648;txt-align:center;" top="100" width="350"/>\n<button buttontype="push" height="40" id="oneTop" left="150" name="Button\nOne" style="bg#selectbg;txt-align:center;" top="450" width="100">\n<task tasktype="ogscript">ogscript.toTop(\'labelOne\');\n</task>\n</button>\n<button buttontype="push" height="40" id="twoTop" left="300" name="Button\nTwo" style="bg#D92648;txt-align:center;" top="450" width="100">\n<task tasktype="ogscript">ogscript.toTop(\'labelTwo\');\n</task>\n</button>\n</abs>\nupload\nOpen the File Upload dialog with the specified file.\nSyntax\nFilename\nogscript.upload ( );\nParameters\nParameter Type Required Description\nFilename String Yes Name of the file with which to open the\nFile Upload dialog box.\nReturns\nN/A\nExample\nComing soon.\n258 \xe2\x80\xa2 ogScript Reference DashBoard CustomPanel Development Guideparams Object\nIn ogScript, use the params object to access functions to interact with openGear Device parameters and\nconstraints. The params object is also used to manipulate parameters stored in the .grid file.\nThe params object is accessible when a CustomPanel is associated with an openGear device or XML\ndata file (.grid file). Scripts referencing a device must follow beneath the referenced device in the XML\nhierarchy.\nTo call an openGear Device function, use:\nfunction name parameters\nparams. ( );\nFor example:\nvar data = params.getValue (0x12, 0);\nSome params functions return a ParamScriptable object named this, which contains several methods\nthat enable you to manipulate parameters. For more information, see ParamScriptable Object on page\n277.\nparams Functions\nThe following table lists the functions of the params object. Detailed descriptions appear after the table.\nIf you are reading this document on-screen, click a function name in the table to view its description.\nFunction Parameters Returns Description\ncreateCopy Source OID ParamScriptable Creates a copy of the parameter. The\nDestination OID duplicate parameter is independent of the\nbase parameter. Changing the value of\none does not affect the other.\ncreateIntChoiceConstraint [choices] N/A Creates a choice constraint (which is a\nset of key/value pairs) for use in toggle\nbuttons, combo box, radio buttons, etc.\nThe choice constraint you create here can\nbe used to replace a constraint for a\nparameter.\ncreateLinkedCopy Source OID ParamScriptable Creates a copy of the parameter that is\nDestination OID linked to the base parameter:\nChanging the value of the base\nparameter also changes the value of the\nduplicate parameter.\nChanging the value of the duplicate\nparameter does not affect the value of the\nbase parameter.\ncreateMultiSet String [OID] multiset object Replaces multiple parameter values all at\nInteger [Index] once.\nObject [Value]\ncreateParam JSON N/A Creates a parameter based on a JSON\nparameter parameter definition.\ndefinition\ndeleteParam OID of N/A Deletes the specified parameter.\nparameter to\ndelete\ngetAllValues String [OID] The entire array of Retrieves the entire array of values within\nvalues within the the parameter.\nparameter.\ngetConstraint String [OID] Constraint Get the constraint from the parameter\nwith the specified OID.\ngetDeviceStatus String [OID] Device status Checks the status of a device and returns\ninformation an Integer value indicating that status:\nDashBoard CustomPanel Development Guide ogScript Reference \xe2\x80\xa2 259Function Parameters Returns Description\n0 - good\n- warning\n- error\n- unknown\ngetElementCount Integer [Context ParamScriptable Get the information about an element in a\nID] String [OID] parameter with the specified OID.\nInteger [Index]\ngetIdentifiedConstraint String [ID] String Get the constraint with the specified ID. If\nthe ID is an external object URL, get the\nconstraint defined in the specified\nexternal object.\ngetParam String [Context ParamScriptable Gets information about an element in the\nID] parameter with the specified Object ID.\nString [OID]\nInteger [Index]\ngetParam (OID, String or Integer N/A Removes a parameter element. If the\nIndex).remove [OID] Integer parameter is an array with more than one\n[Index] element, the element at the index location\nis removed.\ngetStream String [OID] Boolean Check whether streaming of parameter\nvalues to XPression is enabled.\ngetValue String [OID] String Get the value of a parameter with the\nInteger [Index] specified OID.\nIf the parameter is not an array\nparameter, use an Index of 0. In most\ncases, enter 0 as the Index.\ngetValueAsString String [OID] String Get a string representation of an element\nInteger [Index] in a parameter with the specified OID.\nisDeviceOnline String [OID] Online status of the Queries a device to determine whether it\ndevice as Boolean is online.\nisPrivateParamContext N/A Boolean Returns true if local OGLML-based\nparameters are operating disconnected\nfrom the real device.\nreplaceConstraint String [OID] N/A Replace the constraint for the parameter\nString with the specified OID with the constraint\n[Constraint ID] with the specified constraint ID.\nreplaceViewConstraint String [view N/A Replaces the constraint object of a\nOID] String parameter view.\n[constraint\nobject]\nresetAllValues String N/A If the specified parameter is a copy of a\n[parameter OID] base parameter, this function resets the\nparameter\xe2\x80\x99s values to those of the base\nparameter.\nsetAccess String [OID], N/A Set the access level of the parameter with\nInteger [Access] the provided OID.\nsetAllValues OID Object[] N/A For an array parameter, replaces the\nValues current array with the new array.\nsetMenuState Integer [Static N/A Set the menu state of the menu with the\nMenu ID], specified static menu ID.\nInteger [Menu\nState]\nsetPrivateParamContext Boolean [Value] N/A true \xe2\x80\x94 disconnect parameters defined in\nthe OGLML document from the device.\n260 \xe2\x80\xa2 ogScript Reference DashBoard CustomPanel Development GuideFunction Parameters Returns Description\nfalse \xe2\x80\x94 re-connect parameters defined in\nthe OGLML document from the device.\nsetStream String [OID] N/A Controls whether the parameter streams\nBoolean its values to XPression when XPression\n[true/false] streaming is on.\nWhen true, streaming is ON. When false,\nstreaming is OFF.\nsetValue String [OID], N/A Set the value of an element in a\nInteger [Index], parameter with the provided OID to the\nObject [Value] provided value.\nsetValueRelative String [OID], N/A Changes the value of a parameter.\nInteger [index], If the value is a string, it is replaced. If it is\nInteger [change a float or int, the specified value is added\nin value] to the current value.\nString Subscribes to a device with subscriptions\nsupport.\nString Unsubscribes to a device with\nsubscriptions support.\ntoOid String (OID) N/A Creates an OID object.\ncreateCopy\nCreates a copy of the parameter. The duplicate parameter is independent of the base parameter.\nChanging the value of one does not affect the other.\nSyntax\nSource OID, Destination OID\nparams.createCopy ( );\nParameters\nParameter Type Required Description\nSource OID String Yes The OID of the parameter to copy\nDestination OID String Yes The OID of the new parameter.\nReturns\nReturns ParamScriptable. For more information, see ParamScriptable Object on page 277.\nExample\nComing soon.\ncreateIntChoiceConstraint\nSyntax\nChoices\nparams.createIntChoiceConstraint ( );\nParameters\nParameter Type Required Description\nChoices String Yes Name of the array variable that contains the\nchoices.\nReturns\nN/A\nDashBoard CustomPanel Development Guide ogScript Reference \xe2\x80\xa2 261Example\nComing soon.\ncreateLinkedCopy\nCreates a copy of the parameter that is linked to the base parameter:\n\xe2\x80\xa2 Changing the value of the base parameter also changes the value of the duplicate parameter.\n\xe2\x80\xa2 Changing the value of the duplicate parameter does not affect the value of the base parameter.\nSyntax\nSource OID, Destination OID\nparams.createLinkedCopy ( );\nParameters\nParameter Type Required Description\nSource OID String Yes The OID of the parameter to copy\nDestination OID String Yes The OID of the new parameter.\nReturns\nReturns ParamScriptable. For more information, see ParamScriptable Object on page 277.\nExample\nComing soon.\ncreateMultiSet\nChanges the values of multiple parameters at once. This function will return a multiSetScriptable\nObject.\nSyntax\nOID, Index, Value\nparams.createMultiSet ( );\nParameters\nParameter Type Required Description\nOID String Yes Object ID of object of interest.\nIndex Integer Yes Array parameter index. If the parameter is\nnot an array parameter, use an Index of 0.\nIn most cases, enter 0 as the Index.\nValue Object Yes New value for the OID.\nReturns\nMultiset object.\nExample\nIn the following example, four parameters named "Value 1" through "Value 4" are created with text\nvalues that are displayed on buttons when the example is run. When the user taps the Multi-Set button,\nthe params.createMultiSet function changes the parameter values to those referenced by the function.\n<abs contexttype="opengear" gridsize="20" style="">\n<meta>\n<params>\n262 \xe2\x80\xa2 ogScript Reference DashBoard CustomPanel Development Guide<param access="1" maxlength="0" name="Value 1" oid="Value_1"\nstateless="true" type="STRING" value="Original Value 1"\nwidget="100"/>\n<param access="1" maxlength="0" name="Value 2" oid="Value_2"\nstateless="true" type="STRING" value="Original Value 2"\nwidget="100"/>\n<param access="1" maxlength="0" name="Value 3" oid="Value_3"\nstateless="true" type="STRING" value="Original Value 3"\nwidget="100"/>\n<param access="1" maxlength="0" name="Value 4" oid="Value_4"\nstateless="true" type="STRING" value="Original Value 4"\nwidget="100"/>\n</params>\n</meta>\n<param expand="true" height="40" left="20" oid="Value_1" top="20"\nwidth="340"/>\n<param expand="true" height="40" left="20" oid="Value_2" top="80"\nwidth="340"/>\n<param expand="true" height="40" left="20" oid="Value_3" top="140"\nwidth="340"/>\n<param expand="true" height="40" left="20" oid="Value_4" top="200"\nwidth="340"/>\n<button buttontype="push" height="60" left="20" name="Multi-Set" top="260"\nwidth="340">\n<task tasktype="ogscript">\nvar multi = params.createMultiSet(); multi.setValue(\'Value_1\', 0,\n\'Multi-set 1\');\nmulti.setValue(\'Value_2\', 0, \'Multi-set 2\');\nmulti.setValue(\'Value_3\', 0, \'Multi-set 3\');\nmulti.setValue(\'Value_4\', 0, \'Multi-set 4\'); multi.execute();\n</task>\n</button>\n</abs>\ncreateParam\nCreates a parameter based on a JSON parameter definition.\nSyntax\nJSON parameter definition\nparams.createParam ( );\nParameters\nParameter Type Required Description\nJSON parameter String Yes JSON definition of the parameter.\ndefinition\nReturns\nN/A\nExample\nComing soon.\nDashBoard CustomPanel Development Guide ogScript Reference \xe2\x80\xa2 263deleteParam\nDeletes the specified parameter.\nSyntax\nOID\nparams.deleteParam ( );\nParameters\nParameter Type Required Description\nOID String Yes OID of parameter to delete\nReturns\nN/A\nExample\nComing soon.\ngetAllValues\nRetrieves the entire array of values from a parameter.\nSyntax\nOID\nparams.getAllValues ( );\nParameters\nParameter Type Required Description\nOID String Yes The OID of the parameter\nReturns\nThe entire array of values from the parameter.\nExample\nComing soon.\ngetConstraint\nGet the constraint from the parameter with the specified Object ID.\nSyntax\nOID\nparams.getConstraint ( );\nParameters\nParameter Type Required Description\nOID String Yes Object ID of the object of interest.\nReturns\nConstraint\nExample\nComing soon.\n264 \xe2\x80\xa2 ogScript Reference DashBoard CustomPanel Development GuidegetDeviceStatus\nChecks the status of a device and returns an Integer value indicating that status.\nSyntax\nOID\nparams.getDeviceStatus ( );\nParameters\nParameter Type Required Description\nOID String Yes OID of the device to be queried.\nReturns\nDevice status, as an Integer:\n\xe2\x80\xa2 0 \xe2\x80\x94 good\n\xe2\x80\xa2 1 \xe2\x80\x94 warning\n\xe2\x80\xa2 2 \xe2\x80\x94 error\n\xe2\x80\xa2 3 \xe2\x80\x94 unknown\nExample\nComing soon.\ngetElementCount\nGets the number of elements in a parameter array.\nSyntax\nOID\nparams.getElementCount ( );\nParameters\nParameter Type Required Description\nOID String Yes The OID of the parameter.\nReturns\nThe number of elements in the parameter array, as an Integer.\nExample\nComing soon.\ngetIdentifiedConstraint\nGet the constraint with the specified ID. If the ID is an external object URL, get the constraint defined\nin the specified external object.\nSyntax\nID\nparams.getIdentifiedConstraint ( );\nParameters\nParameter Type Required Description\nID String Yes ID of the constraint of interest.\nDashBoard CustomPanel Development Guide ogScript Reference \xe2\x80\xa2 265Returns\nString\nExample\nComing soon.\ngetParam\nGets information about an element in the parameter with the specified Object ID.\nSyntax\nContext ID, OID, Index\nparams.getParam ( );\nParameters\nParameter Type Required Description\nContext ID String No The context ID of the component that contains\nthe parameter of interest.\nOID String Yes Object ID of the object of interest.\nIndex Integer Yes Array parameter index. If the parameter is not\nan array parameter, use an Index of 0. In most\ncases, enter 0 as the Index.\nReturns\nParamScriptable\nExample\nComing soon.\ngetParam (OID, Index).remove\nRemoves a parameter element. If the parameter is an array with more than one element, the element at\nthe index location is removed.\nSyntax\n[oid], [index]\nparams.getParam ( ).remove();\nParameters\nParameter Type Required Description\nOID String or Yes OID can be a string or an integer, depending\nInteger on how the parameter is defined.\nIndex Integer Yes Array parameter index. If the parameter is not\nan array parameter, use an Index of 0.\nReturns\nN/A\nExample\nComing soon.\n266 \xe2\x80\xa2 ogScript Reference DashBoard CustomPanel Development GuidegetStream\nChecks whether streaming of parameter values to XPression is enabled for the parameter.\nSyntax\nOID\nparams.getStream ( );\nParameters\nParameter Type Required Description\nOID String Yes OID of the parameter\nReturns\nBoolean, to indicate whether streaming is enabled.\nExample\nComing soon.\ngetValue\nGets the value of a parameter with the specified Object ID.\nSyntax\nOID Index\nparams.getValue ( , );\nParameters\nParameter Type Required Description\nOID String Yes Object ID of object of interest.\nIndex Integer Yes Array parameter index. If the parameter is not\nan array parameter, use an Index of 0. In most\ncases, enter 0 as the Index.\nReturns\nString\nExample\nvar data = params.getValue (0x12,0);\ngetValueAsString\nGets a string representation of an element in a parameter with the specified Object ID.\nSyntax\nOID, Index\nparams.getValueAsString ( );\nDashBoard CustomPanel Development Guide ogScript Reference \xe2\x80\xa2 267Parameters\nParameter Type Required Description\nOID String Yes Object ID of the object of interest.\nIndex Integer Yes Array parameter index. If the parameter is not\nan array parameter, use an Index of 0. In most\ncases, enter 0 as the Index.\nReturns\nParamScriptable\nExample\nComing soon.\nisDeviceOnline\nQueries a device to determine whether it is online.\nSyntax\nOID\nparams.isDeviceOnline ( );\nParameters\nParameter Type Required Description\nOID String Yes OID of device to query.\nReturns\nOnline status of the device.\nExample\nComing soon.\nisPrivateParamContext\nReturns true when the local OGLML-based parameters are operating disconnected from a real device.\nChanges and values are not sent to or fetched from the device if the parameter is defined in the OGLML\ndocument.\nSyntax\nparams.isPrivateParamContext ();\nParameters\nN/A\nReturns\nBoolean\nExample\nComing soon.\n268 \xe2\x80\xa2 ogScript Reference DashBoard CustomPanel Development GuidereplaceConstraint\nReplace the constraint for the parameter with the specified Object ID with the constraint with the\nspecified constraint ID. If the ID is an external object URL, replace the constraint with the constraint\nspecified by the external object.\nSyntax\nOID, Constraint ID\nparams.replaceConstraint ( );\nParameters\nParameter Type Required Description\nOID String Yes Object ID of object of interest.\nConstraint ID String Yes ID of the constraint with which to replace the\nconstraint for the parameter with the specified\nObject ID.\nReturns\nN/A\nExample\nComing soon.\nreplaceViewConstraint\nReplaces the constraint object of a parameter view.\nSyntax\nview OID, constraint object\nparams.replaceViewConstraint ( );\nParameters\nParameter Type Required Description\nview OID String Yes OID of the view.\nconstraint object String Yes constraint object to use.\nReturns\nN/A\nExample\nComing soon.\nresetAllValues\nIf the specified parameter is a copy of a base parameter, this function resets the parameter\xe2\x80\x99s values to\nthose of the base parameter.\nSyntax\nparameter OID\nparams.resetAllValues ( );\nDashBoard CustomPanel Development Guide ogScript Reference \xe2\x80\xa2 269Parameters\nParameter Type Required Description\nparameter OID String Yes The OID of the parameter.\nReturns\nN/A\nExample\nComing soon.\nsetAccess\nSet the access level of the parameter with the specified Object ID.\nSyntax\nOID, Access\nparams.setAccess ( );\nParameters\nParameter Type Required Description\nOID String Yes Object ID of object of interest.\nAccess Integer Yes Access level to set for the specified OID. The\navailable access levels are as follows:\n0 \xe2\x80\x94 Read Only\n1 \xe2\x80\x94 Read and Write\nReturns\nN/A\nExample\nComing soon.\nsetAllValues\nFor an array parameter, replaces the current array with a new array.\nSyntax\nparams.setAllValues([oid], [array]);\nParameters\nParameter Type Required Description\nOID String Yes The OID of the parameter.\nArray String Yes The new array.\nReturns\nN/A\nExample\nComing soon.\n270 \xe2\x80\xa2 ogScript Reference DashBoard CustomPanel Development GuidesetMenuState\nSet the menu state of the menu with the provided static menu ID.\nSyntax\nStatic Menu ID, Menu State\nparams.setMenuState ( );\nParameters\nParameter Type Required Description\nStatic Menu ID Integer Yes ID of the menu of interest.\nMenu State Integer Yes Menu state to set for the specified Static Menu\nID. The available menu states are as follows:\n0 \xe2\x80\x94 Hidden\n1 \xe2\x80\x94 Disabled\n2 \xe2\x80\x94 Normal\nReturns\nN/A\nExample\nComing soon.\nsetPrivateParamContext\nControl the context between the parameters defined in the OGLM document and a device. This function\nhas no impact on parameters that are only defined on the device or only defined in the OGLML\ndocument.\nSyntax\nValue\nparams.setPrivateParamContext ( );\nParameters\nParameter Type Required Description\nValue Boolean Yes The available contexts are as follows:\ntrue \xe2\x80\x94 disconnect parameters defined in the\nOGLML document from the device.\nfalse \xe2\x80\x94 re-connect parameters defined in the\nOGLML document from the device.\nReturns\nN/A\nExample\nComing soon.\nDashBoard CustomPanel Development Guide ogScript Reference \xe2\x80\xa2 271setStream\nControls whether a parameter streams its values to XPression when XPression streaming is on.\nSyntax\nOID, true/false\nparams.getStream ( );\nParameters\nParameter Type Required Description\nOID String Yes OID of the parameter\ntrue/false Boolean Yes When true, streaming is ON. When false,\nstreaming is OFF.\nReturns\nN/A\nExample\nComing soon.\nsetValue\nSet the value of a parameter for the provided Object ID.\nSyntax\nOID Index Value\nparams.setValue ( , , );\nParameters\nParameter Type Required Description\nOID String Yes Object ID of object of interest.\nIndex Integer Yes Array parameter index. If the parameter is not\nan array parameter, use an Index of 0. In most\ncases, enter 0 as the Index.\nValue Object Yes New value for the OID.\nReturns\nN/A\nExample 1\n// Set the parameter to 3: params.setValue (0x12,0,3);\nExample2\n// Set the value to 3 greater than it was.\nvar data = getValue (0x12,0); params.setValue (0x12,0,data + 3);\nExample3\n// Set the value of Param_A to match the value of Param_B\nparams.setValue(\'Param_A\', 0, params.getValue(\'Param_B\', 0));\n272 \xe2\x80\xa2 ogScript Reference DashBoard CustomPanel Development GuidesetValueRelative\nIncrements or decrements a numeric value by a specified amount.\nSyntax\nOID, Index, Change in value\nparams.setValueRelative ( );\nParameters\nParameter Type Required Description\nOID String or Yes The OID of the object of which you want to\nInteger change the value.\nIndex Integer Yes Position of data in the parameter.\nChange in Integer Yes Amount by which the value is incremented. To\nValue decrement the value, use a negative integer.\nReturns\nN/A\nExample\nComing soon.\nsubscribe\nYou can use the subscribe or unsubscribe command templates or code syntax below to add the\nsubscription list to a DashBoard device panel. You must add support to subscribe and/or unsubscribe\nfrom parameter updates in the device panel\xe2\x80\x99s OGLML structure. You can also use the command\ntemplate that is provided in the DashBoard PanelBuilder Script Palette under params.\nSyntax\nvar subList = new Array();\nsubList.push("oid1");\nsubList.push("oid2");\nvar subscriptionOwnerObject = params.subscribe(subList, callback);\nParameters Type Required Description\nDashBoard CustomPanel Development Guide ogScript Reference \xe2\x80\xa2 273subList, [Array of *Required to Subscribes to parameters with the provided\ncallback strings, support devices OIDs. To support subscriptions, the subscribe\ncallback] with support for function is required to subscribe to parameter\nsubscriptions. updates in the device panel\'s OGLML\nstructure. You can also use the DashBoard\nPanelBuilder Script Palette to add the\nsubscribe or unsubscribe functions using the\ntemplate.\nReturns\nReturns for later use to unsubscribe.\nsubscriptionOwnerObject\n"params.subscribe" Example\n<task tasktype="ogscript">\nvar subList= new Array();\nsubList.push("deviceoptions.speakerlevel");\nsubList.push("db.touch.version.*");\nvar subscriptionOwnerObject = params.subscribe(subList, callback);\nogscript.putObject(\'my-subscription-owner-object\',\nsubscriptionOwnerObject);\n</task>\nExplanation\nIn this example, the is used to retain the result of the params.subscribe\nogscript.putObject\nfunction, which is later used to unsubscribe.\nunsubscribe\nYou can use the subscribe or unsubscribe command templates or code syntax below to add the\nsubscription list to a DashBoard device panel. You must add support to subscribe and/or unsubscribe\nfrom parameter updates in the device panel\xe2\x80\x99s OGLML structure. You can also use the template that is\nprovided in the DashBoard PanelBuilder Script Palette.\nSyntax\n274 \xe2\x80\xa2 ogScript Reference DashBoard CustomPanel Development Guideparams.unsubscribe(subscriptionOwnerObject);\nFunction Type Returns Description\nunsubscribe [subscriptionOw N/A Unsubscribes from the OIDs provided by the\nnerObject] subscriptionOwnerObject.\n"params.subscribe" Example\n<task tasktype="ogscript">\nvar subscriptionOwnerObject = ogscript.getObject(\'my-subscription-\nowner-object\');\nparams.unsubscribe(subscriptionOwnerObject);\n</task>\nExplanation\nIn the subscribe example above, the is used to retain the result of the\nogscript.putObject\nparams.subscribe function and ogscript.getObject fetches it when we want to unsubscribe\n(params.unsubscribe). You can see that the subscribe response object is used to unsubscribe.\nNow that you have successfully implemented subscriptions support, make sure that you leverage the\nbuilt-in automations within DashBoard to support subscriptions.\ntoOid\nCreates an OID object.\nSyntax\nOID\nparams.toOid ( );\nParameters\nParameter Type Required Description\nOID String Yes The value of the new OID object.\nReturns\nN/A\nExample\nThis example is a function that uses the toOid function to create an OID with the value\n, then uses the function to return the OID value.\n\'my.special.oid\' getOid\nfunction lookForSpecificOid(myParam)\n{\nvar myOID = params.toOid(\'my.special.oid\'); return myParam.getOid() == myOID;\n}\nDashBoard CustomPanel Development Guide ogScript Reference \xe2\x80\xa2 275276 \xe2\x80\xa2 ogScript Reference DashBoard CustomPanel Development GuideParamScriptable Object\nSome params functions return a ParamScriptable object named , which contains several methods\nthis\nthat enable you to manipulate parameters.\nIn ogScript, use methods of the object to manipulate parameters. To call a general-purpose\nthis\nfunction, use:\nmethod name parameters\nthis. ( );\nFor example:\nthis.replaceConstraint ("0.0;100.0;0.0;100.0;1");\nThe following table lists the methods of the ParamScriptable object.\nMethod Parameters Returns Description\ndeleteParam N/A N/A Deletes the parameter\ngetConstraint N/A Returns the parameter constraint Gets the parameter constraint\ngetAllValues N/A The entire array of values within Retrieves the entire array of\nthe parameter. values within the parameter.\ngetElementCount N/A The number of elements in the Gets the number of elements in\nparameter array, as an Integer. the parameter array.\ngetIndex N/A Returns the array index of the Gets the array index of the\ncurrent element current element\ngetOid N/A Returns the OID of the changed Gets the OID of the changed\nparameter parameter\ngetValue N/A Returns the value of the changed Gets the value of the changed\nelement element\ngetValueAsString N/A Returns a string representation of Gets a string representation of\nthe changed value the changed value\ngetValueAt Integer [index] Returns a string representation of Gets a string representation of\nthe value at the provided index the value at the provided index\ngetValueAtAsString Integer [index] Returns a string representation of Gets a string representation of\nthe value at the provided index the value at the provided index\nsetValue String [value] N/A Sets the value of the changed\nelement to the provided value.\ngetName N/A Returns the parameter name Gets the parameter name\nreplaceConstraint String N/A Replaces the parameter\'s\n[Constraint] constraint to the provided value\nremove N/A N/A Removes the current array\nelement\nisArrayParameter N/A Returns true if the parameter is Checks whether the parameter\nan array element is an array element\nresetAllValues N/A N/A If the parameter is a copy of a\nbase parameter, this function\nresets the parameter\xe2\x80\x99s values\nto those of the base parameter.\nsetValueAt Integer [index] N/A Sets the value of element at\nString [value] the provided index to the\nprovided value.\ngetElementCount N/A Returns the number of elements Gets the number of elements in\nin the array the array\nDashBoard CustomPanel Development Guide ogScript Reference \xe2\x80\xa2 277rosstalk Object\nIn ogScript, use the rosstalk object to communicate over the network to other devices that speak\nRossTalk protocol. Functions in the rosstalk object are typically set through a user interface.\nAlso see, rosstalkex Object.\nTo call a general-purpose function, use:\nfunction name parameters\nrosstalk. ( );\nFor example:\nrosstalk.setHost (Server01);\nThe following table lists the functions of the rosstalk object.\nFunction Parameters Returns Description\nsetHost String [Host] N/A Set a default host to use for\nRossTalk commands where\nno host has been defined.\ngetHost N/A String Get the default host\npreviously defined.\nsetPort Integer [Port] N/A Set a default port to use for\nRossTalk commands where\nno host has been defined.\ngetPort N/A Integer Get the default port previously\ndefined.\nsendAsBytes String [Host], Int [Port], N/A Equivalent of calling:\nString [Bytes as Hex String] sendAsBytes(host, port,\nbytes, null);\nsendAsBytes String [Host], Int [Port], N/A Convert bytes from string\nString [Bytes as Hex String], (where string is formatted as\nFunction [Callback] ASCII representations of\nbytes e.g.\n"FDDFEAAE12F9\xe2\x80\xa6") and\nsend them to the provided\nhost at the provided port.\nInvoke the callback function\nwhen done.\nsendAsBytesWithResponse String [Host], Int [Port], Response Convert bytes from string\nString [Bytes as Hex String], message (where string is formatted as\nString [responseBytes], provided by ASCII representations of\nFunction [Callback] the recipient. bytes e.g.\n"FDDFEAAE12F9\xe2\x80\xa6") and\nsend them to the provided\nhost at the provided port.\nInvoke the callback function\nwhen done.\nThe [responseBytes] string,\nwhen received from the\nrecipient, indicates the end of\nthe response message.\nsendBytes String [Host], Int [Port], N/A Send the provided bytes to\nByte[] [Data to Send], the provided host at the\nFunction [Callback] provided port. Invoke the\ncallback function when done.\nsendBytesWithResponse String [Host], Int [Port], Response Send the provided bytes to\nByte[] [Data to Send], Byte message the provided host at the\n[responseTerminator] provided by provided port. Invoke the\nFunction [Callback] the recipient. callback function when done.\nThe [responseTerminator]\nbyte, when received from the\n278 \xe2\x80\xa2 ogScript Reference DashBoard CustomPanel Development GuideFunction Parameters Returns Description\nrecipient, indicates the end of\nthe response message.\nsendMessage String [RossTalk Command] N/A Equivalent of calling:\nsendMessage (getHost(),\ngetPort(), RossTalk\nCommand, null);\nsendMessage String [RossTalk Command], N/A Equivalent of calling:\nFunction [Callback] sendMessage (getHost(),\ngetPort(), RossTalk\nCommand, Callback);\nsendMessage String [Host], Int [Port], N/A Equivalent of calling:\nString [RossTalk Command] sendMessage (Host, Port,\nRossTalk Command, null);\nsendMessage String [Host], Int [Port], N/A Send the provided string as\nString [RossTalk Command] UTF-8 followed by CRLF\nFunction [Callback] bytes to the provided host at\nthe provided port. Invoke the\ncallback function when done.\nsendMessageWithResponse String [Host], Int [Port], Response Send the provided string as\nString [RossTalk Command], message UTF-8 followed by CRLF\nString [responseTerminator], provided by bytes to the provided host at\nFunction [Callback] the recipient. the provided port. Invoke the\ncallback function when done.\nThe [responseTerminator]\nstring, when received from the\nrecipient, indicates the end of\nthe response message.\nDashBoard CustomPanel Development Guide ogScript Reference \xe2\x80\xa2 279rosstalkex Object\nIn ogScript, you can use the rosstalkex object to communicate over the network to other devices that\nspeak RossTalkEx protocol. You can use RossTalk Ex commands to trigger specific events, or to send\ngeneric RossTalkEx commands. You can also send RossTalk commands through RossTalkEx, but you\ncannot do the reverse.\nDashBoard sends RossTalkEx commands to XPression using an authenticated RossTalkEx connection.\nThis differs from the method that other RossTalk commands use, which is an open TCP protocol.\nTo call a general-purpose function, use:\nfunction name parameters\nrosstalkex. ( );\nFor example:\nrosstalkex.sendMessage("10.3.2.1", 8020, "DATALINQKEY 101:k1:v1", null);\nThe following table lists the functions of the rosstalkex object.\nFunction Parameters Returns Description\ngetConnection String [Host], Integer If the handshake is This is an optional command that\nsuccessful, the users can use to open and\n[Port], Boolean [Creation\nconnection object authenticate a connection to an\nFlag] is returned. If the XPression. An authentication\nhandshake is not request will be sent.\nsuccessful, a null Once a connection is opened, it will\nvalue is returned. remain open for the life of the panel\n(assuming it is not explicitly closed\nby either end).\nIf users use FALSE as the creation\nflag, then the getConnection function\nwill simply return the existing\nconnection if it was previously\nopened, or null if it was not.\nThe creation flag command is\noptional, because when the\nsendMessage or\nsendMessageWithResponse\ncommands are executed in a panel,\nif the connection with the host is not\nopen, then the getConnection\nfunction is first executed\nautomatically.\nOnce a connection is established,\nthe message is sent using the XML\nAPI wrapper.\nsendMessage String [Host], Integer If the ADD DEFINITION.\n[Port], String [Message], authentication is This command calls getConnection\nnot successful, no to initiate an authenticated\nFunction [Callback] message is sent connection.\nand an error\nOnce the connection is open,\nmessage is thrown,\nsubsequent calls will not\notherwise, nothing\nautomatically trigger the\nis returned.\ngetConnection function.\ne\n280 \xe2\x80\xa2 ogScript Reference DashBoard CustomPanel Development Guiderobot Object\nIn ogScript, use the robot object to communicate with CamBot robotic cameras through the CamBot PC\nUser Interface. Functions in the robot object are typically set through a user interface.\nTo call a general-purpose function, use:\nfunction parameters\nrobot. name ( );\nFor example:\nrobot.setHost (Server01);\nThe following table lists the functions of the robot object.\nFunction Parameters Returns Description\nsetHost String [Host] N/A Set a default host to use for\nCamBot commands where no\nhost has been defined.\ngetHost N/A String Get the default host\npreviously defined.\nsetPort Integer [Port] N/A Set a default port to use for\nCamBot commands where no\nhost has been defined.\ngetPort N/A Integer Get the default port previously\ndefined.\nsendCambot String [CamBot N/A Equivalent of calling:\nCommand] sendCambot (getHost(),\ngetPort(), command, null)\nsendCambot String [CamBot N/A Equivalent of calling:\nCommand] Function sendCambot (getHost(),\n[Callback] getPort(), CamBot Command,\nCallback);\nsendCambot String [Host], Int [Port], N/A Equivalent of calling:\nString [CamBot sendCambot (Host, Port,\nCommand] CamBot Command, null);\nsendCambot String [Host], Int [Port], N/A Send the provided CamBot\nString [CamBot command to the provided host\nCommand] Function at the provided port. Invoke\n[Callback] the callback function when\ndone.\nCallback function signature:\nFunction (Boolean success,\nString sentData, String\nreceivedData, Exception\njavaException)\nvdcp Object\nIn ogScript, use the vdcp object to communicate with BlackStorm video servers. Functions in the vdcp\nobject are typically set through a user interface.\nTo call a general-purpose function, use:\nname parameters\nvdcp.function ( );\nFor example:\nvdcp.setHost (Server01);\nThe following table lists the functions of the vdcp object.\nDashBoard CustomPanel Development Guide ogScript Reference \xe2\x80\xa2 281Function Parameters Returns Description\nsetHost String [Host] N/A Set a default host to use for VDCP\ncommands where no host has been\ndefined.\ngetHost N/A String Get the default host previously\ndefined.\nsetPort Integer [Port] N/A Set a default port to use for VDCP\ncommands where no host has been\ndefined.\ngetPort N/A Integer Get the default port previously\ndefined.\nactiveClip String [Host], Int [Port], Int [Channel], N/A Fetch the active clip ID for the\nFunction [Callback] provided channel from the server at\nthe provided host/port. Invoke the\ncallback with the active clip ID when\ndone.\nCallback function signature:\nFunction (Boolean success, String\nsentCommand, String resultString,\nException javaException)\nclipDuration String [Host], Int [Port], Int [Channel], N/A Fetch the duration [HH:MM:SS:FF]\nString [ClipID], Function [Callback] of the clip with the given ID. Invoke\nthe callback with the clip duration\nwhen done.\nCallback function signature:\nFunction (Boolean success, String\nsentCommand, String resultString,\nException javaException)\ncontinuePlay String [Host], Int [Port], Int [Channel] N/A Sends the vdcp continuePlay\ncommand.\ncueClip String [Host], Int [Port], Int [Channel] N/A\ncueClip String [Host], Int [Port], Int [Channel], N/A\nFunction [Callback]\nfastForward String [Host], Int [Port], Int [Channel] N/A\nfastForward String [Host], Int [Port], Int [Channel], N/A\nFunction [Callback]\nlistClips String [Host], Int [Port], Int [Channel], N/A\nFunction [Callback]\npause String [Host], Int [Port], Int [Channel] N/A\npause String [Host], Int [Port], Int [Channel], N/A\nFunction [Callback]\nplay String [Host], Int [Port], Int [Channel] N/A Sends the vdcp variPlay command.\nrewind String [Host], Int [Port], Int [Channel] N/A\nrewind String [Host], Int [Port], Int [Channel], N/A\nFunction [Callback]\nstop String [Host], Int [Port], Int [Channel] N/A\nstop String [Host], Int [Port], Int [Channel], N/A\nFunction [Callback]\nnkScript Object\nIn ogScript, use the nkScript object to control NK Router OGLML tags used in Switchboard virtual\n282 \xe2\x80\xa2 ogScript Reference DashBoard CustomPanel Development Guidecontrol panels. Functions in the nkScript object are usually set through a user interface.\nThe nkScript global object is only accessible in OGLML contexts that are declared as having a NK\nRouter context type or are beneath such a context in the OGML document hierarchy.\nTo call a general-purpose function, use:\nfunction name parameters\nnkscript. ( );\nFor example:\nnkscript.setHost (Server01);\nThe following table lists the functions of the nkscript object.\nFunction Parameters Returns Description\nconvertCommaSeperat String [Levels], Boolean Long Levelmask Allows conversion of a list of\nedLevelsToMask [SearchTags] levels to the appropriate level\nmask. Level mask is a bit field\nwhere you can have up to 32\nlevels set \'on\' at a time.\nSearchTags should always be\n\'true\'.\ndoSwitch N/A Boolean Equivalent of calling:\ndoSwitch(getActiveDst(),\ngetActiveSrc(),\ngetLevelMask());\ndoSwitch Int [Dst], Boolean Do a switch on the active IPS\nInt [Src], Long [Levels] to route the given destination\nto the given source on the\ngiven levels.\ndoSwitchWithLabels String [Destination], Boolean Allows you to switch between\nString [Source], String levels by name.\n[Levels]\ngetActiveDst N/A Int Get the active destination\nnumber\n(0-indexed). Returns -1 if\nthere is no active destination.\ngetActiveDstName N/A String Get the name of the active\ndestination (from the\nswitchboard configuration).\nReturns null if there is no\nactive destination.\ngetActiveIPS N/A String Get the serial number of the\nactive IPS.\ngetActiveIPSName N/A String Get the name of the active\nIPS.\ngetActiveSrc N/A Int Get the active source number\n(0-indexed). Returns -1 if\nthere is no active source.\ngetActiveSrcName N/A String Get the name of the active src\n(from the switchboard\nconfiguration).\nReturns null if there is no\nactive source.\ngetActiveSystem N/A NKSystem Get the currently active\nNKSystem.\ngetDstName String [Source] String Get the destination name of\nthe given source.\ngetLevelMask N/A Long Get the current level mask (as\na bit field)\nLevel mask is a bit field where\nDashBoard CustomPanel Development Guide ogScript Reference \xe2\x80\xa2 283Function Parameters Returns Description\nyou can have up to 32 levels\nset \'on\' at a time.\ngetLevelName String [Source] String Get the level name of the\ngiven source.\nString [Destination], Boolean Get the protect status of the\ngetProtectStatus String [Levels] destination level.\ngetSrcName String [Source] String Get the source name.\nString [Destination], Int Get the status of the given\ngetStatus String [Level] destination level.\nisLevelActive Int [Level Num] Boolean Is the current level active.\nEquivalent to asking:\nlevelMask & (1 << levelNum)\n!= 0;\nisMCFlag N/A Boolean Is the Machine Control flag\nset.\nisProtected N/A Boolean Verifies whether the active\ndestination is protected or not.\nisProtected Int [Destination], Long Boolean Verifies whether the given\n[Levels] destination is protected; or\nnot.\nisProtectedByMe N/A Boolean Is the active destination\nprotected by this virtual panel.\nisSrcActive Int [Src] Boolean Verifies whether the given\nsource is active on the active\ndestination of all levels.\nisSrcActive Int [Dst], Boolean Verifies whether the provided\nInt [Src], Long [Levels] source is active on the\nspecified destination and level\nmask.\nisVirtual N/A Boolean Verifies whether virtual routing\nis in use (for switch\ncommands and status\nrequests).\nsetActiveDst Int [Dst] N/A Set the active destination (0-\nindexed).\nsetActiveIPS String [Serial] Boolean Set the IPS with the given\nserial number as the active\nIPS to receive commands and\nsend status.\nDeactivate any currently\nactive IPS.\nsetActiveSrc Int [Src] N/A Set the active source (0-\nindexed).\nsetLevelActive Int [Level Num], Boolean Boolean Set the given level as active.\n[Active]\nsetLevelMask Long [Level Mask] N/A Set the complete level mask\nbitfield.\nsetMCFlag Boolean Boolean Set the Machine Control flag\nto true or false.\nsetProtected Boolean Boolean Request the router to protect\nthe active destination.\nsetVirtual Boolean Boolean Set virtual routing on/off for\nswitch commands and status\n284 \xe2\x80\xa2 ogScript Reference DashBoard CustomPanel Development GuideFunction Parameters Returns Description\nrequests.\nverifyConfiguration N/A Boolean Re-activate the current IPS.\nDashBoard CustomPanel Development Guide ogScript Reference \xe2\x80\xa2 285Appendices\nIn This Section\nSee appendices in the bookmark navigation.\nAppendix A: Widget Hint Definitions\n// widget hints for all parameter types\n#define WIDGET_DEFAULT 0 // let DashBoard decide\n#define WIDGET_TEXT_DISPLAY 1 // display as text, read only\n#define WIDGET_HIDDEN 2 // do not display\n// widget hints for numeric types with NULL_CONSTRAINT or RANGE_CONSTRAINT\n#define WIDGET_SLIDER_HORIZONTAL 3 // slider (RANGE only)\n#define WIDGET_SLIDER_VERTICAL 4 // slider (RANGE only)\n#define WIDGET_SPINNER 5 // spinner\n#define WIDGET_TEXTBOX 6 // numeric entry field\n#define WIDGET_PROGRESS_BAR 17 // progress bar (RANGE only)\n#define WIDGET_AUDIO_METER 19 // audio meter (RANGE only)\n#define WIDGET_MENU_POPUP 20 // popup menu with the ID(INT ONLY)\n#define WIDGET_TIMER 21 // countdown/up timer (RANGE only)\n#define WIDGET_SLIDER_H_NO_LABEL 24 // unlabeled slider (RANGE only)\n#define WIDGET_SLIDER_V_NO_LABEL 25 // unlabeled slider (RANGE only)\n#define WIDGET_VERTICAL_FADER 26 // vertical fader bar (RANGE only)\n#define WIDGET_TOUCH_WHEEL 27 // touch wheel (RANGE only)\n#define WIDGET_HEX_SPINNER 28 // base 16 spinner (RANGE only)\n#define WIDGET_ABSOLUTE_POSITIONER 29 // absolute x,y positioner\n#define WIDGET_CROSSHAIR 30 // joystick-like x,y positioner\n#define WIDGET_JOY_STICK 34 // joystick x,y positioner\n// widget hints for integer types with CHOICE_CONSTRAINT\n#define WIDGET_COMBO_BOX 7 // combo box - usually the default\n#define WIDGET_CHECKBOX 8 // two choices\n#define WIDGET_RADIO_HORIZONTAL 9 // radio buttons\n#define WIDGET_RADIO_VERTICAL 10 // radio buttons\n#define WIDGET_BUTTON_PROMPT 11 // single choice\n#define WIDGET_BUTTON_NO_PROMPT 12 // single choice\n#define WIDGET_BUTTON_TOGGLE 13 // two choices\n#define WIDGET_FILE_DOWNLOAD 18 // external object OID/filename pairs\n#define WIDGET_RADIO_TOGGLE_BUTTONS 22 // display a toggle button for choices\n#define WIDGET_TREE 31 // display a tree with choices\n#define WIDGET_TREE_POPUP 32 // display a tree in a combo box\n286 \xe2\x80\xa2 Widget Hint Definitions DashBoard CustomPanel Development Guide// widget hints for INT32_PARAM\n#define WIDGET_IP_ADDRESS 14 // nnn.nnn.nnn.nnn\n#define WIDGET_COLOR_CHOOSER 23 // argb color chooser\n#define WIDGET_COLOR_CHOOSER_POPUP 33 // argb color chooser in popup\n// widget hints for integer arrays\n#define WIDGET_ARRAY_HEADER_VERTICAL 15 // array layout specification\n#define WIDGET_ARRAY_HEADER_HORIZONTAL 16 // array layout specification\n// widget hints for STRING_PARAM\n#define WIDGET_TEXT_ENTRY 3 // normal text entry field\n#define WIDGET_PASSWORD 4 // uses password entry field\n#define WIDGET_TITLE_LINE 5 // layout hint - read only\n#define WIDGET_LINE_ONLY 6 // layout hint - read only\n#define WIDGET_TITLE_ONLY 7 // layout hint - read only\n#define WIDGET_PAGE_TAB 8 // layout hint - read only\n#define WIDGET_LICENSE 9 // RossKeys license adapter\n#define WIDGET_TITLE_HEADER 10 // layout hint - read only\n#define WIDGET_COMBO_ENTRY 11 // combo box plus entry field\n#define WIDGET_ICON_DISPLAY 12 // icon plus text display\n#define WIDGET_RICH_LABEL 13 // multi-line display (html format)\n#define WIDGET_MULTILINE_TEXT_ENTRY 14 // multi-line text entry (non-html)\n// widget hints for STRING_PARAM (used with special OID 255.1)\n#define WIDGET_NAME_OVERRIDE_APPEND 0\n#define WIDGET_NAME_OVERRIDE_REPLACE 1\n// deprecated names - here for backward compatibility\n#define WIDGET_NONE WIDGET_DEFAULT\n#define WIDGET_COMBO WIDGET_COMBO_BOX\n#define WIDGET_RADIO WIDGET_RADIO_HORIZONTAL\n#define WIDGET_HSLIDER WIDGET_SLIDER_HORIZONTAL\n#define WIDGET_VSLIDER WIDGET_SLIDER_VERTICAL\nDashBoard CustomPanel Development Guide Widget Hint Definitions \xe2\x80\xa2 287Appendix B: Reserved Object IDs\nReserved OIDs\nParameter OIDs in the set 0xFF00 to 0xFFFF are reserved for future protocol messages. Apart from\nthese, there are several other OIDs that have special significance in DashBoard.\nName OID Type Constra Function\nint\nSUPPLIER_NAME* 0x0102 String N/A Name of the card manufacturer or OEM\nsupplier (i.e. who customer should call for\nsupport). Reported as a generic card\nparameter by SNMP.\nPRODUCT_NAME** 0x0105 String N/A The product name used to identify the\n(32- card in DashBoard. This name should not\nbytes change. For display purposes, an\nmax) alternate name can be provided via OID\n0xFF01.\nReported as a generic card parameter by\nSNMP.\nSERIAL_NUMBER 0x0106 String N/A Unique serial number.\nSOFTWARE_REV*+ 0x010B String N/A This value is used by a card to report\n(20- information about its software load. The\nbytes value should be meaningful to the people\nmax) supporting the card.\nReported as a generic card parameter by\nSNMP.\nFPGA_REV+ 0x010C String N/A This value is used by DashBoard\ncompare software versions when\nuploading the Main Board FPGA Type\n(upload type 1).\nOPTION_SOFTWARE_REV+ 0x010D String N/A This value is used by DashBoard\ncompare software versions when\nuploading the Option Board Software\nType (upload type 2).\nOPTION_FPGA_REV+ 0x010E String N/A This value is used by DashBoard\ncompare software versions when\nuploading the Option Board FPGA Type\n(upload type 3).\nSMPTE_STATUS 0x0201 Int16 N/A Card status to be reported via frame fault\nLEDs.\nValue of 0 indicates no error.\nNon-zero values indicate error state.\nCURRENT_MILLIS 0x0205 Int16 N/A Current consumption in milliamps at 12 V.\nThis may be used by the fan controller to\nadjust fan speed for high-current cards.\nEDIT_PERMISSION 0x0601 Int16 Choice Tells DashBoard that the card is editable.\nIf this OID is used, parameters on the\ncard will be editable only if the parameter\nvalue is 0. If the parameter value is non-\nzero, the card will display as read-only.\nFRAME_POWER_CAPABILITY 0xFE0F This OID is broadcast regularly to every\ncard in the frame. The value of the\nparameter is the power available to each\nslot a card occupies.\nThis value is calculated using the power\n288 \xe2\x80\xa2 Reserved Object IDs DashBoard CustomPanel Development GuideName OID Type Constra Function\nint\nrating of the power supplies installed in\nthe frame (if the power supplies are\ndifferent, the lowest rating is used), minus\nsome overhead for the frame and frame\ncontroller card, divided by the number of\nslots in the frame.\n[(Power supply rating - overhead) /\nNumber of slots in frame.]\nA card may consume the power of\nmultiple slots, if the card occupies multiple\nslots. For example, a card occupying two\nslots may use two times the parameter\nvalue.\nNAME_OVERRIDE 0xFF01 String N/A With a widget hint of 0, the value in this\nString will be appended to the device\nname (0x0105) when displayed in the\nDashBoard tree and tabs. With a widget\nhint of 1, the value in this String will be\ndisplayed instead of the value in 0x0105\nin the DashBoard tree and tabs.\nCONNECT_VERIFY 0xFF03 Mixed N/A This parameter is used for communicating\nDashBoard\xe2\x80\x99s connection handshake and\nresponse.\nUPLOAD_URL 0xFF02 String N/A Alternate file upload target. This\noverrides the behavior of the DashBoard\nupload button.\nIf this value is \xe2\x80\x9cdisable\xe2\x80\x9d, DashBoard will\ndisable the upload button on the device\npage.\nIf this value is a valid URL, DashBoard\nwill upload files to this location via HTTP\nPOST.\nFRAME_ID 0xFF04 String N/A Reserved for use by an openGear frame\xe2\x80\x99s\nNetwork Interface Card. If this parameter\nis provided, its value MUST match the\nunique ID provided by SLP and manual\nSLP attribute queries. If it does not,\nDashBoard will close its connection to the\nframe.\nBACKWARDS_COMPATIBILE 0xFF05 String N/A Specifies the lowest software version to\n(20- maintain OID-compatibility with this\nbytes software version. If this OID is not\nmax) supplied, the lowest software version is\nassumed to be the version specified in the\nSOFTWARE_REV OID (0x010B).\nThe card guarantees that all software\nversions bounded by the version numbers\nspecified between 0xFF05 and 0x010B\ncan be restored using the same stored set\nof parameter values.\nRESTORE_SET_DELAY 0xFF06 Int16 N/A Specifies the delay to use between each\nparameter set request during a card\nrestore. The restore set messages will\nnot be sent any faster than the specified\ndelay. This number must be between 0\nand 1000 milliseconds.\nIf this value is not specified, a default of 0\nis used. Parameters will be restored as\nquickly as the card can process the\nDashBoard CustomPanel Development Guide Reserved Object IDs \xe2\x80\xa2 289Name OID Type Constra Function\nint\nPARAM_SET commands.\nIf the value is -1, DataSafe is disabled for\nthis card. Other negative values are not\nvalid at this time and should not be used.\nRESTORE_START 0xFF07 Int16 N/A A parameter set request with a value of 1\nwill be sent to this parameter before the\ncard data is restored (the equivalent of a\nbutton press in DashBoard).\nIf this parameter is provided, its position in\nthe list of OIDs returned by the\nOGP_GET_PARAM_OIDS Response\ndefines where the range of saved\nparameter values should start. No\nparameters whose OID was returned\nbefore this OID will be restored by\nDataSafe.\nRESTORE_STOP 0xFF08 Int16 N/A A parameter set request with a value of 1\nwill be sent to this parameter after the\ncard data is restore is complete (the\nequivalent of a button press in\nDashBoard).\nIf this parameter is provided, its position in\nthe list of OIDs returned by the\nOGP_GET_PARAM_OIDS Response\ndefines where the range of saved\nparameter values should stop. No\nparameters whose OID was returned after\nthis OID will be restored by DataSafe.\nDATASAFE_NAME 0xFF09 String N/A Alternative card name for determining\nDataSafe compatibility.\nUPLOAD_NAME 0xFF0A Int16 Choice Alternative card name for file upload\npurposes.\nDISPLAY_OPTIONS 0xFF0B Int16 Each array element is used to define a\nARRA different display option.\nY\nElement 0 controls display of the card:\n0 (Default) = Display the card in the tree\nview\n1 = Hide the card in the tree view\nElement 1 controls the display of the slot\nname before the card name:\n0 (Default) = Display the slot name (e.g.\nSlot 1: UDC-8225-W)\n1 = Hide the slot name (e.g. UDC-8225-\nW)\nAll other array elements are reserved for\nfuture use.\nDEVICE_ICON 0xFF0C Int16 N/A Contains an external object ID for an\nencapsulated icon.\nDEVICE_INDEX_URL 0xFF0D String N/A URL for a DashBoard Connect XML\nDefinition.\nOGLML_DESCRIPTOR 0xFF0E String N/A Provides an OGLML URL that describes a\n290 \xe2\x80\xa2 Reserved Object IDs DashBoard CustomPanel Development GuideName OID Type Constra Function\nint\nlayout to use in place of the standard\nconfiguration screen in DashBoard.\nDEDICATED_CONNECTION 0xFF0F Binary N/A Allows a card that has its own Ethernet\nport to communicate directly with\nDashBoard, bypassing the CAN bus and\nMFC card. This allows traffic offloading\nfrom the CAN bus, and also allows\nmessages to be sent to specific\nDashBoards rather than all of them.\nWhen connected, DashBoard will use this\nconnection to send all messages to the\ncard. DashBoard will continue to receive\nupdates from both the dedicated OGP\nconnection and the CAN Bus connection.\nUTF-8 String for the hostname\nUINT16 for the port\nUINT8 for the use\n0 = Do not use\n1 = Connect when UI is visible\nDEVICE_IP_ADDRESS 0xFF10 Int32 IP_AD Cards that have their own Ethernet port\nDRESS should use this OID to report their current\nIPv4 address.\nFAN_SPEED_REQUEST 0xFF11 Int16 N/A Used by cards in OG3-FR high power\nframe to request additional fan cooling.\nCard must send OGP_REPORT_PARAM\nfor this OID periodically (not to exceed\nonce per minute). Value of the parameter\nvaries depending on the cooling\ncapabilities of the frame.\nOCCUPIED_SLOTS 0xFF12 Int16 N/A Report the number of slots this card\noccupies.\nValue consists of two 8-bit fields,\nrepresenting the number of additional\nslots to the left and right.\nValue = (left << 8) | (right)\nUPLOAD_FILE_EXTENSIONS 0xFF13 String N/A Extensions of file types allowed to be sent\nArray to the device. Arrau elements have the\nformat: \xe2\x80\x9c[Description]<ext:[extension\nwithout dot]>\xe2\x80\x9d\nRESERVED 0xFF14 \xe2\x80\xa6 \xe2\x80\xa6 Reserved for future use\nto\n0xFFFF\n** Required by DashBoard and SNMP.\n* Required for SNMP.\n+ Version numbers are important for software uploads and DataSafe. Please review section 5-9 for\nrecommended version number encodings.\nSMPTE_STATUS, CURRENT_MILLIS, and EDIT_PERMISSION are optional, but to avoid\nmisinterpretation, these OIDs should not be used for other parameters.\nReserved MFC and DashBoard Connect (slot 0) OIDs\nParameter OIDs in the range 0xFE00 to 0xFEFF have special significance for the MFC network\nDashBoard CustomPanel Development Guide Reserved Object IDs \xe2\x80\xa2 291controller (Slot 0) device. These also apply to any DashBoard Connect devices reporting on slot 0.\nName OID Type Constra Function\nint\nDOOR_STATE 0x0709 Int16 N/A Broadcast by the MFC every 10 seconds to\nindicate door status. 1= closed and 2= open\nDeprecated field, see\nFAN_DOOR_STATUS on page 293.\nSLOT_NAMES 0x803 Int16_Array N/A This array has one element for each slot in\nthe frame. Each element\xe2\x80\x99s value is the OID\nof a String parameter whose value should be\nused as the name for the device in the given\nslot.\nSLOT_DATA_SAFE 0x802 Int16_Array N/A This array has one element for each slot in\nthe frame.\n0 = DataSafe is enabled for the slot [Element\n#]\nDefault = DataSafe is disabled for slot\n[Element #] by the frame\nURM_STATE 0xFE01 Int16 N/A States whether the frame requires a User\nRights Management (URM) -Enabled\nDashBoard (or a master password) is\nrequired to connect to DashBoard.\n0 (Default) = URM is not supported by the\nframe\n1 = URM is disabled/not required\n2 = URM is enabled/required\nMASTER_PASSWORD 0xFE02 String N/A This is the value of the master password\n(20-bytes required by DashBoard users to connect\nmax) when the User Rights Management server is\nnot available and the URM State is\n\xe2\x80\x9cEnabled\xe2\x80\x9d\nAPPLY_BUTTON 0xFE03 Int16 Choice The button DashBoard must press to apply\nchanges to the master password or URM\nstate parameters.\nCANCEL_BUTTON 0xFE04 Int16 Choice The button DashBoard can press to cancel\nany changes to the master password or\nURM state parameters. After the apply\nbutton has been pressed, this button does\nnothing.\nDEVICE_CATEGORY 0xFE05 String N/A Default: \xe2\x80\x9copenGear Devices\xe2\x80\x9d\nControls how items are grouped in User\nRights Management and in the DashBoard\ntree view.\nItems sharing the same category are kept\ntogether.\nFRAME_ICON 0xFE06 Int16 N/A Contains an external object ID for an\nencapsulated icon.\nCONFIG_SLOT 0xFE07 Int16 N/A Default: 0\nThe slot # for the device to open when the\nframe is \xe2\x80\x98opened\xe2\x80\x99 for configuration.\nCONFIG_URL 0xFE08 String N/A Default: [none]\nIf defined and non-empty, the URL of a web\npage to open when the frame is \xe2\x80\x98opened\xe2\x80\x99 for\nconfiguration.\nINDEX_URL 0xFE09 String N/A URL for a DashBoard Connect XML\nDefinition.\nMASTER_PASSWORD 0xFE0A String N/A Same as 0xFE02 above, but used for\n_SAVE internal storage on the MFC controller.\n292 \xe2\x80\xa2 Reserved Object IDs DashBoard CustomPanel Development GuideName OID Type Constra Function\nint\nFAN_DOOR_STATUS 0xFE0B Int16 N/A Broadcast by the MFC every 10 seconds to\nindicate door status.\n1= closed\n2= open\nThis replaces legacy OID 0x0709.\nFAN_AMBIENT_TEMP 0xFE0C Int16 N/A Broadcast by the MFC every 10 seconds to\nreport the ambient temperature of inlet air.\n0 = fan door is open\nOtherwise temperature in degrees Celsius.\nFAN_SPEED_REPORT 0xFE0D Int16 N/A Broadcast by the MFC every 10 seconds to\nreport current door fan speed.\n0 = minimum speed (or fan door open)\nHigher values indicate increasing speed.\nMax value depends on DFR frame type.\nRESERVED 0xFE0E \xe2\x80\xa6 \xe2\x80\xa6 Reserved for future use\n\xe2\x80\x93\n0xFEFF\nDashBoard CustomPanel Development Guide Reserved Object IDs \xe2\x80\xa2 293'